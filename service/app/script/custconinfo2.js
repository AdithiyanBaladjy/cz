var rid;
var crm_desk_id;
var customer_id_for_analytics;
var pn;
var st;
var dt;
var nfub_link_loaded = false;
var non_fund_too_large=false; // used only when customer has a lot of non-fund based accounts
var too_large_cut_off=5;  // used only when customer has a lot of non-fund based accounts
var nfub_current_page=1; // used only when customer has a lot of non-fund based accounts
var page_loading=false;
var next_btn=true;
var selected_adv_toggle = 0;
var services_availed = 0;
var new_deposits = [];
var gbm_flg = true;
var gbm_loaded = true;
var gbm_rcddata = [];
var set_resolved = {
  "dep":false,
  "adv":false
};
var new_non_funds = [];
var new_advances = [];
var rel_rec_g = []; 
var desk_contat_data = {};
var new_tickets = [];
var chqInterval;
var custComInterval;
var resolveInterval;
var stadat;
var home_info;
var deposits_flg = false;
var advances_flg = false;
var logged_in_user_mail=null;
var logged_in_user_id=null;
var logged_in_user_profile_id;
var logged_in_user_profile;
var page_num_td = 1;
var page_num_casa = 1;
var page_num_adv = 1;
var allow_paging = false;
var first_time_show_rel = false;
var offset = 200;
var rel_data = {
  "td":[],
  "adv":[],
  "casa":[]
}
var last_open_page_rel = {
  "td":1,
  "adv":1,
  "casa":1
}
var related_flg = {
  "td":false,
  "casa":false,
  "adv":false
};
var closed_rel = {
  "td":"N",
  "casa":"N",
  "adv":"N"
};
var show_table = {
  "td":false,
  "casa":false,
  "adv":false
};
var nfb_flg = false;
var empflg = null;
// var stress_category="-";s
var total_loan_accounts = 0;
var total_deposit_accounts = 0;
var nfb_data;
var fb_casa;
var RetailCorporate;
var fb_adv;
var rel_records = [];
var fb_td;
var tt;
var tkt_lst = {};
var ds_record_id = "";
var tg;
var elements;
var stop_cheque_type_json=null;
var hotlist_json=null;
//used in ticket creation in desk
var desk_contact_id=null;
var desk_agent_id=null;
var last_name_for_desk=null;
var ds_cust_id=null;
var debit_hotlist_in_prog="";
var acc_reading_in_pro="";

var cibScore;
var pan;
var phn;
var phone_for_desk;
var mail_for_desk;
var last_name_for_desk;
var first_name_for_desk;
var middle_name_for_desk;
var mail;
var mobl;
var custid;
var solid;
var prod_count = 0;
var ref_clicked = false;
var prev_balance;
var rating;
var leads_results = [];
var credit_balance = 0;
var mask_char="*";
var debit_balance = 0;
var deposits_calculated = false;
var advances_calculated = false;
var sr_link_loaded=false;
var desk_created_contact_id;
var curr_acc_no_for_cb=null;
var deposit_timer=null; //used to poll deposits flag from script_s360.js
//refresh button sample code: <td class="tabdat" colspan=2><button id="fundbasedreloadButton" onclick="fundbasedReload('${stadat[i].Name||"-"}')">Refresh!</button></td>
// var idstr = window.sessionStorage;
var flag = 0;
var modal = document.getElementById("myModal");
var modal3 = document.getElementById("myModal3");
var modal1 = document.getElementById("myModal1");
var modal2 = document.getElementById("myModal2");
var span = document.getElementById("modalspan");
var span1 = document.getElementById("modal1span");
var span2 = document.getElementById("modal2span");
var span3 = document.getElementById("modal3span");
var interestRate;
var csusList = [];
var prd_description = {};
//ATM claim change
var atm_claim_accounts_array=[];
//
var curr_conv = {};
var csuslistElements = `<div style="display:flex; flex-direction:row; justify-content:space-between"><span class="homePanelTitle" id="csusPanelTitle">Cross Sell/Up Sell</span><i class='fa fa-refresh blue' id='refresh-icon' onclick="getDataCrossSellData();fetchPersonalisedOffer()"></i></div></div>
                  <ol id="csusPanelList">`;

var loader_html = `<figure>
<div class="dot white"></div>
<div class="dot"></div>
<div class="dot"></div>
<div class="dot"></div>
<div class="dot"></div>
</figure>`;

var table_loader_html = `<div style='position:absolute;top:0;left:0;right:0;bottom:0;background-color:white;'><figure>
<div class="dot white"></div>
<div class="dot"></div>
<div class="dot"></div>
<div class="dot"></div>
<div class="dot"></div>
</figure></div>`;



var block_loader_html = `<div class='load-block'><div class='glow'></div></div>`;
var table_loader_skeleton=`<div style="position:relative;width:100%;height:40px;background-color:white;border-radius:4px;box-shadow: 0 2px 8px 0 #b1b1b1;">${block_loader_html}</div>`;
let circular_loader = `<div style="pointer-events: none;position:absolute;top:0;left:0;right:0;bottom:0; background:linear-gradient(to top,#0279ff,#00a3f3); display:flex; align-items:center; justify-content:center; border-radius:6px;" id="circular_loader"><div class="small-circular-loader"></div></div>`;
let circular_loader_colorless = `<div style="position:absolute;top:0;left:0;right:0;bottom:0; display:flex; align-items:left; justify-content:flex-start; border-radius:6px; padding-left:25px;" id="circular_loader"><div style="border: 3px solid rgba(254,254,254,0.5); border-top-color:white;" class="small-circular-loader"></div></div>`;


var pop_up_on_d = `<div class="pop-up" id="pop_fg"></div>`;
var pop_up_on_d2 = `<div class="pop-up-backdrop flex-row" id="pop_up_on_d"></div>`;

var nri_tag=`<div class="nri-tag">NRI<div class='glow2' style='position:absolute;left:0;top:0;'></div></div>`

var adv_populated = false;
var dp_populated = false;
var td_populated = false;

var csusList = [];
var prd_description = {};

var currently_selected_drop_elem=null;
//Session time out code
var time_out_factor = 15;
var time_out = 60 * 1000 * time_out_factor;

//flag for fetching user logged-in user info
var user_fetched=false;
var verification_needed_profile_ids=['1068000204615394','1068000204615878'];
//1068000204615878 - ubi call center team leader
//1068000204615394 - 1068000204615394
var verification_needed_tabs=['varNavChildDivSR','varNavChildDivFu','varNavChildDivNf','varNavChildDivTk','varNavChildDivGbm'];
//change for applying verification-based restriction for tabs drop down
//Add the tab names (display names of the tabs) which don't have above ID or which is dynamically added in run-time (lazy loading)
//For which verification-based restriction needs to be enforced
var verificationNeededTabNames=["Service Request","Deposits","Advances","Govt Schemes","Tickets","Send SMS / Whatsapp","Notes"];
//
var cust_data_loaded=false;
//change: variables for making pop-ups moveable
var current_x=null;
var current_y=null;
var current_pop_elem=null;
//change: JSON to store API logs
var api_logs={};
var send_log_msg_ids={
  "Account statement API":2,
  "cheque book inquiry API":3,
  "Standing instructions API":8,
  "Term deposit API":9,
  "Balance inquiry API":7,
  "Mini-Statement API":6,
  "Loan Inquiry API":5,
  "Lien API":4,
  "Fetch debit card API":1,
  "Account freeze API":10,
  "Nominee API":11,
  "Cheque Book Tracking API":12,
  "Debit Card Tracking API":13,
  "MB deregister API":15,
  "UPI Block API":15,
  "ATM Claim API":16,


};
//change: variable to store logs to be copied to clipboard
var clip_board_str='';
var customerPanNoUnmasked;
/*
"Debit card hotlist API":11,
  "Cheque status API":12,
  "Range of cheque status API":13,
  "Stop cheque API":14
*/
var glowLoader=`<div class="glow-container marginTop"><div class="glow"></div></div>`;

//change: additional ticket fields for automated ticket creation
var res_status_for_desk;
var customer_branch_sol_id_for_desk;

//change: Access control for profile:'Call Center Internal Bank'
//Always keep the profile ids as strings inside the array
var sc_df_dh_access_denied_profiles=["1068002206101972"];
//change: Access to debit card hotlisting, debit freeze & stop cheque functionalities
//given only to ['Call center agent profile','Administrator']
//In future, if any new profile needs these privileges, include them in code.
var sc_df_dh_access_allowed_profiles=["1068000204615394","1068000000031157"];
//change for debit freezeprofile inclusion
var df_access_allowed_profiles=["1068000204615394","1068000000031157","1068004891291794","1068004891309850"];
var dh_access_allowed_profiles=["1068000204615394","1068000000031157"];
var sc_access_allowed_profiles=["1068000204615394","1068000000031157"];

var maskKeys=["cardNumber","cardNo"]; //Array of keys used to mask sensitive information from shown on screen using 'show logs' feature
var leadsLoaded=false;
var s360Reloaded=false;
var instanceId=3; //For load balancing
var isUatInstance=true; //change this flag to false when deploying in production instance
var userSpecialPermissions;
/*
instanceID -> 1 for service 360
instanceID -> 2 for service 360 LB2
instanceID -> 3 for service 360 LB3
*/

/*
Features in UAT but not released to prod:
1. UPI Blocking (UAT-prod switch is svcOptions variable) - special permission is given and release is blocked by special permissions
2. ATM Claim (Hide ATM claim in details.html)
3. 3/4/2025 MB deregisteration API sign-off given but UPI blocking not given yet.
   Hence, only MB deregisteration is released in prod. UAT-prod switch is svcOptions variable
*/

var dynamicSrMenuCount=0;
var generalCloneCount=0;
var configFiles=["outboundFields.json","fieldsFormat.json","dispositionValues.json","despositionModuleFields.json","additionalTabs.json"];
var configsJson={};
var despositionHistory={};
//insurance variables
var segregatedInsurancedata;
var insuranceTypeMapping={
  "health":["GROUP_HEALTH","HEALTH"],
  "life":["GROUP_TERM_LIFE","LIFE","TERM"],
};

var insuranceVerticalDescriptionMapping={
  "CV":"General Insurance - Commercial Vehicle",
  "FW":"General Insurance - Four Wheeler",
  "TW":"General Insurance - Two Wheeler",
  "HOME":"General Insurance - Home Insurance",
  "TERM":"Term Life Insurance",
  "LIFE":"Life Insurance",
  "HEALTH":"Health Insurance",
  "GROUP_HEALTH":"Group Health Insurance",
  "GROUP_TERM_LIFE":"Group Term Insurance"
};
//
// average balance in pop-ups change
var averageBalances={};

//account search change
var acctSearchTimer;

//Customer Name for whatsapp-sms feature
var customerFullName;
//communication logs for whatsapp-sms feature
var communicationLogs;
var contactSubFormLimit=25;
//notes changes
var glowLoader=`<div class="glow-container marginTop"><div class="glow"></div></div>`;

var attach_file_size = 5; // attachment max file size 
var attach_list = [];

var maxVerticalTabs=8;
var lockersOverdueArr=[];
var debitCardTrackingDetails;

var freezeRemarks;

var backOfficeTeamId=358000000156994;

var mobileBankingTeamId=358000000157028;
// var parentAccount;

var logged_in_user_full_name;
var autoTicketCreated=false;

function loadConfigFiles()
{
  for(let file of configFiles)
  {
    fetchConfigFile(file);    
  }
}
//changes for whatsapp-sms feature
function fetchConfigFile(fileName)
{
  let resourcePath="./config/";  //resource path for prod
  // let resourcePath="/app/config/";  //resource path for local
  fetch(resourcePath+fileName).then((res)=>{
    return res.json();}).then((configJson)=>{
      configsJson[fileName]=configJson;
      if(fileName=="additionalTabs.json")
      {
        //load additional tabs on screen
        // loadAdditionalTabs();
        loadAdditionalTabsWithDropDown();
      }
    }).catch((err)=>{
        configsJson[fileName]=null;
        console.log("error in fetching config file",err);
      });
}

function setDropDownContent(dropDownElem,content)
{
  let dropDownContentContainer=dropDownElem.querySelector(".drop-down-cont");
  if(dropDownContentContainer)
  {
    dropDownContentContainer.innerHTML=content;
  }
}
//change for restricting access to additional drop down items based on customer verification
//Ip - show - flag to 
function showVerifiedTabsInTabDropDown(show)
{
  //if show is false
  //Add vfd-class to drop-options of the tab drop-down and also hide the options accordingly
  //Hide the Entire Drop-down if all options of the drop-down are hidden
  //if show is true
  //Get all options of the tab drop-down with vfd-class remove hide class
  //remove hide class on the tabsDropDown also
  let tabsDropDown=document.getElementById("additionalMenuDropDown");
  if(tabsDropDown && (verification_needed_profile_ids.includes(logged_in_user_profile_id)))
  {
    if(show)
    {
      let verificationNeededOptions=tabsDropDown.querySelectorAll(".vfd-tab");
      for(let option of verificationNeededOptions)
      {
        option.classList.remove("hide");
      }
      tabsDropDown.classList.remove("hide");
    }
    else
    {
      let dropOptions=tabsDropDown.getOptionElems();
      let optionsCount=dropOptions.length;
      let hiddenCount=0;
      for(let option of dropOptions)
      {
        if(verificationNeededTabNames.includes(option.innerHTML))
        {
          option.classList.add("vfd-tab");
          option.classList.add("hide");
          hiddenCount++;
        }
      }
      if(hiddenCount==optionsCount)
      {
        tabsDropDown.classList.add("vfd-tab");
        tabsDropDown.classList.add("hide");
      }
    }
  }
  
}
//
// Load additional tabs with DropDown
function loadAdditionalTabsWithDropDown()
{
  let additionalTabs=configsJson["additionalTabs.json"]["tabs"];
  let verNavigationBar=document.getElementById("verNavDiv");
  let verNavChildrenCount=verNavigationBar.children.length;
  let lastNavElem=verNavigationBar.children[verNavChildrenCount-2];
  let lastNavElemTitle;
  let navCount=0;
  let tabsDropDown;
  let tabNamesArr=[];
  let navElems={};
  let firstAdditionalTab;
  let navigationChildren=verNavigationBar.children;
  let currentNavElem=0;
  let windowWidth=window.innerWidth;
  if(windowWidth<=1450)
  {
    maxVerticalTabs=6;
  }
  for(let elem of navigationChildren)
  { 
    currentNavElem++;
    if((currentNavElem>maxVerticalTabs)&&(currentNavElem!=(verNavChildrenCount)))
    {
      let lastNavElemTitleElem=elem.querySelector(".navImg");
      lastNavElemTitle=lastNavElemTitleElem.innerHTML;
      tabNamesArr.push(lastNavElemTitle);
      navElems[lastNavElemTitle]=elem;
      elem.classList.add("hide");
    }
  }
  /*
  if(lastNavElem)
  {
    let lastNavElemTitleElem=lastNavElem.querySelector(".navImg");
    lastNavElemTitle=lastNavElemTitleElem.innerHTML;
    tabNamesArr.push(lastNavElemTitle);
    navElems[lastNavElemTitle]=lastNavElem;
  }
  */
  for(let tab of additionalTabs)
  {
    let navElem=document.createElement("div");
    navElem.classList.add("varNavChildDiv");
    navElem.classList.add("dynamicNavChild");
    navElem.id=`varNavChildDiv${navCount}`;
    navElem.setAttribute("loaded","false");
    navElem.innerHTML=`<a href="javascript: void(0);" id="childLink${navCount}"><span class="navImg" id="navHomeImg${navCount}" alt="homeinfo">${tab.tabName}</span></a>`;
    tabNamesArr.push(tab.tabName);
    let anchor=document.getElementById(`childLink${navCount}`);
    let tabContainer= document.createElement("div");
    let tabParent=document.createElement("div");
    tabParent.classList.add("tab-parent");
    tabContainer.classList.add("displayDivChild");
    tabContainer.classList.add("additional-child-parent");
    tabContainer.id=`additionalChild${navCount}`;
    // tabContainer.style.paddingLeft="0.25%";
    navElem.addEventListener("click",(evt)=>{
      try{
        displayNav(anchor);
      }
      catch(e)
      {
        console.log("Silently discarding error in displayNav");
      }
      
      let isChildLoaded=navElem.getAttribute("loaded");
      if(isChildLoaded=="true")
      {
        //display child
        tabContainer.style.display = "flex";
        navElem.style.backgroundColor = "#5b616e";
      }
      else
      {
        //loadChild from server and add the HTML code to DOM
        let indexPage=tab.index;
        let htmlContent=loadTemplate(indexPage);
        let mainTabParent=document.getElementById("mainDisplayDiv");
        // tabContainer.innerHTML=htmlContent;
        tabParent.innerHTML=htmlContent;
        tabContainer.appendChild(tabParent);
        // tabParent.appendChild(tabContainer);
        mainTabParent.appendChild(tabContainer);
        let dependentJsFiles=tab.scripts;
        for(let file of dependentJsFiles)
        {
          loadScriptFile(file);
        }
        tabContainer.style.display = "flex";
        navElem.style.backgroundColor = "#5b616e";
        //`<div class="displayDivChild" id="homeChild" style="padding-left: 0.25%;"></div>`
        navElem.setAttribute("loaded","true");
      }
    });
    navCount++;
    verNavigationBar.appendChild(navElem);
    navElem.classList.add("hide");
    navElems[tab.tabName]=navElem;
  }
  tabsDropDown=createDynamicDropDown(tabNamesArr,(selectedVal)=>{
    let selectedNav=navElems[selectedVal];
    let selectedItemElem=tabsDropDown.querySelectorAll(".drop-content>.drop-line.dr.drop-line-selected")[0];
    let dropDownItems=tabsDropDown.querySelectorAll(".drop-content>.drop-line.dr");
    console.log("Selected Element is",selectedItemElem);
    for(let item of dropDownItems)
    {
      item.classList.remove("hide_tab_imp");
    }
    selectedItemElem.classList.add("hide_tab_imp");
    for(let key of Object.keys(navElems))
    {
      let nav=navElems[key];
      nav.classList.add("hide");
    }
    selectedNav.classList.remove("hide");
    if(selectedNav.classList.contains("dynamicNavChild"))
    {
      selectedNav.click();
    }
    else
    {
      let selectedNavAnchor=selectedNav.querySelector("a");
      displayNav(selectedNavAnchor);
    }
    //change to hide the drop-down if all options are hidden
    let atleastOneOptionVisible=false;
    for(let option of dropDownItems)
    {
      if((!option.classList.contains("hide"))&&(!option.classList.contains("hide_tab_imp")))
      {
        atleastOneOptionVisible=true;
      }
    }
    if(!atleastOneOptionVisible)
    {
      tabsDropDown.classList.add("hide");
      tabsDropDown.classList.add("vfd-tab");
    }
    // tabsDropDown.querySelectorAll(".drop-line")[1].classList.remove("hide");
    setDropDownContent(tabsDropDown,"<span class='marginRight5px'>More</span><i class='fa fa-ellipsis'></i>");
  });
  tabsDropDown.classList.add("varNavChildDiv");
  tabsDropDown.classList.add("additional-tab-drop-down");
  // tabsDropDown.classList.add("vfd-tab");
  tabsDropDown.id="additionalMenuDropDown";
  if(verification_needed_profile_ids.includes(logged_in_user_profile_id))
  {
    show_tabs_on_verification(false);
  }
  // firstAdditionalTab=tabsDropDown.querySelectorAll(".drop-line")[1];
  // firstAdditionalTab.classList.add("hide");
  verNavigationBar.appendChild(tabsDropDown);
  showVerifiedTabsInTabDropDown(false);
  setDropDownContent(tabsDropDown,"<span class='marginRight5px'>More</span><i class='fa fa-ellipsis'></i>");
}
//
// Changes for whatsapp-sms feature
function loadAdditionalTabs()
{
  let additionalTabs=configsJson["additionalTabs.json"]["tabs"];
  let verNavigationBar=document.getElementById("verNavDiv");
  let navCount=0;
  
  for(let tab of additionalTabs)
  {
    let navElem=document.createElement("div");
    navElem.classList.add("varNavChildDiv");
    navElem.id=`varNavChildDiv${navCount}`;
    navElem.setAttribute("loaded","false");
    navElem.innerHTML=`<a href="javascript: void(0);" id="childLink${navCount}"><span class="navImg" id="navHomeImg${navCount}" alt="homeinfo">${tab.tabName}</span></a>`;
    let anchor=document.getElementById(`childLink${navCount}`);
    let tabContainer= document.createElement("div");
    let tabParent=document.createElement("div");
    tabParent.classList.add("tab-parent");
    tabContainer.classList.add("displayDivChild");
    tabContainer.classList.add("additional-child-parent");
    tabContainer.id=`additionalChild${navCount}`;
    tabContainer.style.paddingLeft="0.25%";
    navElem.addEventListener("click",(evt)=>{
      try{
        displayNav(anchor);
      }
      catch(e)
      {
        console.log("Silently discarding error in displayNav");
      }
      
      let isChildLoaded=navElem.getAttribute("loaded");
      if(isChildLoaded=="true")
      {
        //display child
        tabContainer.style.display = "flex";
        navElem.style.backgroundColor = "#5b616e";
      }
      else
      {
        //loadChild from server and add the HTML code to DOM
        let indexPage=tab.index;
        let htmlContent=loadTemplate(indexPage);
        let mainTabParent=document.getElementById("mainDisplayDiv");
        // tabContainer.innerHTML=htmlContent;
        tabParent.innerHTML=htmlContent;
        tabContainer.appendChild(tabParent);
        // tabParent.appendChild(tabContainer);
        mainTabParent.appendChild(tabContainer);
        let dependentJsFiles=tab.scripts;
        for(let file of dependentJsFiles)
        {
          loadScriptFile(file);
        }
        tabContainer.style.display = "flex";
        navElem.style.backgroundColor = "#5b616e";
        //`<div class="displayDivChild" id="homeChild" style="padding-left: 0.25%;"></div>`
        navElem.setAttribute("loaded","true");
      }
    });
    navCount++;
    verNavigationBar.appendChild(navElem);
  }
}
var templateLocation=`/app/templates/`; //local 
templateLocation=`./templates/`; //UAT - Prod
function loadTemplate(href)
{
  var xmlhttp = new XMLHttpRequest();
  xmlhttp.open("GET", templateLocation+href, false);
  xmlhttp.send();
  return xmlhttp.responseText;
}
function loadScriptFile(url)
{
   let scriptElem=document.createElement("script");
   scriptElem.src=url;
   document.head.appendChild(scriptElem);
}
//

function calculate_maturity_amount(n, m) {
  return m + n * m;
}
function load_fields()
{
  let elems=document.getElementsByClassName('ldr');
  for(i=0;i<elems.length;i++)
  {
    elems[i].innerHTML=circular_loader_colorless;
  }
}
var cust_verified = false;
var dynamicDropCount=0;

let span_clk_2 = () => {
  modal.style.display = "none"; //No I18N
  $("#modalDataTable1 tr").remove(); //No I18N
};
let err2 = (error) => {
  //console.error('Cheque book API Error:', error);	//No I18N
  console.log("loading close 3");
  document.getElementById("loadingWrapper").style.display = "none"; //No I18N
  modal1.style.display = "block"; //No I18N
  document.getElementById("mdlbdytxt1").innerHTML =
    "Error! <br/>" + error + ". Please try again later."; //No I18N
  // document.getElementById("aadhaarOtpDiv").style.display = "none";	//No I18N
  span1.onclick = () => {
    modal1.style.display = "none"; //No I18N
  };
  // window.onclick = (event) => {
  //     if (event.target == modal1) {
  //         modal1.style.display = "none";	//No I18N
  //     }
  // }

  var recordData = {
    API_Name: "Cheque book API Error", //No I18N
    Error_Id: "36001215421", //No I18N
    Error_Source: "Customer 360 Widget", //No I18N
    Module_Name: "Contacts", //No I18N
    Module_Record_Id: rid, //No I18N
    Error_Description: error.toString(), //No I18N
  };
  ZOHO.CRM.API.insertRecord({
    Entity: "CRM_Error_Log",
    APIData: recordData,
    Trigger: ["workflow"],
  }); //No I18N
};
function redirect_to_cust_searh()
{
  window.open("https://ucrm.unionbankofindia.co.in/crm/org60009764661/tab/WebTab2","_top");
}
function get_appended_addresses(addr1,addr2,state,zip)
{
  let result="-";
  if((addr1!=null)&&(addr1!="-"))
  {
    result=addr1;
  }
  if((addr2!=null)&&(addr2!="-"))
  {
    result=result=="-"?addr2:(result+", "+addr2);
  }
  if((state!=null)&&(state!="-"))
  {
    result=result=="-"?state:(result+", "+state);
  }
  if((zip!=null)&&(zip!="-"))
  {
    result=result=="-"?zip:(result+", "+zip);
  }
  return result;
}
function block_mobiles()
{
  let details = navigator.userAgent;
  
let regexp = /android|iphone|kindle|ipad/i;
  
let isMobileDevice = regexp.test(details);
  
if (isMobileDevice) {
    document.getElementById('mobile_block').style.display='flex';
    console.log("You are using a Mobile Device");
} else {
    console.log("You are using Desktop");
}
}

function write_to_error_log_module(api_name,error)
{
  //Check if error is of type string
  //if it is a string, try json-parsing it
  //if it failed, just put the unconvertable string into the logs
  //if it succeeded, check if the parsed object has key 'details.userMessage'
  //store only the required req & resp
  //if it doesn't, stringify the entire object and trim the string to 2000 characters
  //if it is not a string, check if the object has key 'details.userMessage'
  //if it does, store only the req & resp
  //if it doesn't, store the enter stringified object
  let obj;
  let log_str="";
  /*
  if(api_name=="Debit card hotlisting API")
  {
    return;
  }
  */
  try
  {
    if(typeof error === "string")
    {
      try{
        obj=JSON.parse(error);
        if(obj.hasOwnProperty('details'))
        {
          if(obj.details.hasOwnProperty('userMessage'))
          {
            let log_obj=[{"req":obj.details.userMessage[2]},{"Resp":obj.details.userMessage[11]},{"URL":obj.details.userMessage[12]}];
            log_str=JSON.stringify(log_obj);
            log_str=log_str.slice(0,2000);
          }
          else
          {
            log_str=JSON.stringify(obj);
            log_str=log_str.slice(0,2000);
          }
        }
        else
        {
          log_str=JSON.stringify(obj);
          log_str=log_str.slice(0,2000);
        }
      }
      catch(e)
      {
        console.log("Error in parsing logs",e);
        //splice & store the string in error logs
        log_str=error.slice(0,2000);
      }
    }
    else if(Array.isArray(error))
    {
      //if the error object is array
      log_str=JSON.stringify(error);
      log_str=log_str.slice(0,2000);
    }
    else if(typeof error === "object")
    {
      if(error.hasOwnProperty('details')){
        if(error.details.hasOwnProperty('userMessage'))
        {
          let log_obj=[{"req":error.details.userMessage[2]},{"Resp":error.details.userMessage[11]}];
          log_str=JSON.stringify(log_obj);
          log_str=log_str.slice(0,2000);
        }
        else
        {
          log_str=JSON.stringify(error);
          log_str=log_str.slice(0,2000);
        }
      }
      else
      {
        log_str=JSON.stringify(error);
        log_str=log_str.slice(0,2000);
      }

    }
    
    if(log_str!="")
    {
      // let str_err = "";
      var recordData = {
        Layout:{id:"1068000001899076"},
        API_Name: api_name, //No I18N
        // Error_Id: "36001215421", //No I18N
        Error_Source: "Service 360", //No I18N
        Module_Name: "Contacts", //No I18N
        Module_Record_Id: rid[0], //No I18N
        connection: "zohocrm",
        Error_Description: log_str, //No I18N
        Session_User: logged_in_user_id
      };
      var reqData={
        parameters:{data:[recordData]},
        method:"POST",
        url:"https://ucrm.unionbankofindia.co.in/crm/v5/CRM_Error_Log",
        param_type:2
      };
      /*
      if (error.toString() == "[object Object]" || error.toString() == "[object Object],[object Object]") {
        recordData.Error_Description = JSON.stringify(error).slice(0,2000);
      }
      else
      {
        recordData.Error_Description = error.slice(0,2000);
      }
      */
      try {

        /*ZOHO.CRM.API.insertRecord({
          Entity: "CRM_Error_Log",
          APIData: recordData,
          Trigger: ["workflow"],
          connection: "zohocrm"
        })*/
        ZOHO.CRM.CONNECTION.invoke("zohocrm",reqData).then((data)=>{console.log("wrote error log", data);}); //No I18N
      } catch (error) {
        recordData.Error_Description = error;
        console.log("Error log failed",e);
      }
    }
  }
  catch(e)
  {
    console.log("error in parsing logs",e);
  }
}

async function write_to_error_log_module_async(api_name,error)
{
  //same as write_to_error_log_module(), except this function writes error log synchronously
  //makes the calling function wait & returns the log record ID
  //Check if error is of type string
  //if it is a string, try json-parsing it
  //if it failed, just put the unconvertable string into the logs
  //if it succeeded, check if the parsed object has key 'details.userMessage'
  //store only the required req & resp
  //if it doesn't, stringify the entire object and trim the string to 2000 characters
  //if it is not a string, check if the object has key 'details.userMessage'
  //if it does, store only the req & resp
  //if it doesn't, store the enter stringified object
  let obj;
  let log_str="";
  if(api_name=="Debit card hotlisting API")
  {
    return;
  }
  try
  {
    if(typeof error === "string")
    {
      try{
        obj=JSON.parse(error);
        if(obj.hasOwnProperty('details'))
        {
          if(obj.details.hasOwnProperty('userMessage'))
          {
            let log_obj=[{"req":obj.details.userMessage[2]},{"Resp":obj.details.userMessage[11]},{"URL":obj.details.userMessage[12]}];
            log_str=JSON.stringify(log_obj);
            log_str=log_str.slice(0,2000);
          }
          else
          {
            log_str=JSON.stringify(obj);
            log_str=log_str.slice(0,2000);
          }
        }
        else
        {
          log_str=JSON.stringify(obj);
          log_str=log_str.slice(0,2000);
        }
      }
      catch(e)
      {
        console.log("Error in parsing logs",e);
        //splice & store the string in error logs
        log_str=error.slice(0,2000);
      }
    }
    else if(Array.isArray(error))
    {
      //if the error object is array
      log_str=JSON.stringify(error);
      log_str=log_str.slice(0,2000);
    }
    else if(typeof error === "object")
    {
      if(error.hasOwnProperty('details')){
        if(error.details.hasOwnProperty('userMessage'))
        {
          let log_obj=[{"req":error.details.userMessage[2]},{"Resp":error.details.userMessage[11]}];
          log_str=JSON.stringify(log_obj);
          log_str=log_str.slice(0,2000);
        }
        else
        {
          log_str=JSON.stringify(error);
          log_str=log_str.slice(0,2000);
        }
      }
      else
      {
        log_str=JSON.stringify(error);
        log_str=log_str.slice(0,2000);
      }

    }
    
    if(log_str!="")
    {
      // let str_err = "";
      var recordData = {
        Layout:{id:"1068000001899076"},
        API_Name: api_name, //No I18N
        // Error_Id: "36001215421", //No I18N
        Error_Source: "Service 360", //No I18N
        Module_Name: "Contacts", //No I18N
        Module_Record_Id: rid[0], //No I18N
        connection: "zohocrm",
        Error_Description: log_str, //No I18N
        Session_User: logged_in_user_id
      };
      var reqData={
        parameters:{data:[recordData]},
        method:"POST",
        url:"https://ucrm.unionbankofindia.co.in/crm/v5/CRM_Error_Log",
        param_type:2
      };
      /*
      if (error.toString() == "[object Object]" || error.toString() == "[object Object],[object Object]") {
        recordData.Error_Description = JSON.stringify(error).slice(0,2000);
      }
      else
      {
        recordData.Error_Description = error.slice(0,2000);
      }
      */
     /*
     let data=await  ZOHO.CRM.API.insertRecord({
      Entity: "CRM_Error_Log",
      APIData: recordData,
      Trigger: ["workflow"],
      connection: "zohocrm"
        });
        */
      let data = await  ZOHO.CRM.CONNECTION.invoke("zohocrm",reqData)
      console.log("Response in async error write function",data);
      let rec_id=data.details.statusMessage.data[0].details.id;
      return rec_id;
    }
  }
  catch(e)
  {
    console.log("error in parsing logs",e);
    return;
  }
}

// account number table sample data
let debit_card_json = {
  566802070000735: [
    { debit_card: 1234567890, status: "active" },
    { debit_card: 2314567890, status: "inactive" },
  ], //No I18N
  566802010003165: [
    { debit_card: 4561237890, status: "inactive" },
    { debit_card: 4562317890, status: "active" },
  ], //No I18N
  644502010004464: [
    { debit_card: 8901234567, status: "active" },
    { debit_card: 7892314560, status: "inactive" },
  ], //No I18N
};
// lien account sample data
let lien_account_card_json = {
  91230912412: [
    { lien_amount: 1000, status: "active", lien_reason: "sample 1" },
    { lien_amount: 2000, status: "inactive", lien_reason: "sample 2" },
  ], //No I18N
  91230912422: [
    { lien_amount: 1090, status: "inactive", lien_reason: "sample 3" },
    { lien_amount: 2010, status: "active", lien_reason: "sample 4" },
  ], //No I18N
  91230912433: [
    { lien_amount: 1267, status: "active", lien_reason: "sample 5" },
    { lien_amount: 22000, status: "inactive", lien_reason: "sample 6" },
  ], //No I18N
};
function add_loader_to_table(table_ids) {
  for (i = 0; i < table_ids.length; i++) {
    document.getElementById(
      table_ids[i]
    ).innerHTML = `<tr style='positon:relative;'>${block_loader_html}</tr>`;
  }
}
//restricts user from performing an action
//shows not allowed
function show_not_allowed_action()
{
  show_notification_msg("alert","Not Allowed","You are not allowed to perform this action");
}
function load_fields() {
  let elems = document.getElementsByClassName("ldr");
  for (i = 0; i < elems.length; i++) {
    elems[i].innerHTML = circular_loader_colorless;
  }
}
function show_tabs_on_verification(flag) {
  let verified_classes = document.getElementsByClassName("vfd-tab");
  if (flag) {
    for (i = 0; i < verified_classes.length; i++) {
      verified_classes[i].classList.remove("hide");
    }
  } else {
    for (i = 0; i < verified_classes.length; i++) {
      verified_classes[i].classList.add("hide");
    }
  }
  //change to enforce verification-based access to tabs drop-down
  showVerifiedTabsInTabDropDown(flag);
}
//test comment
function populate_cb_dropdown(accounts, drop_id) {
  let select_ele = document.getElementById(drop_id);
  let st = "";
  let count = false;
  if (accounts.length == 0) {
    select_ele.innerHTML =
      '<option selected="selected">No account available</option>';
    return;
  }
  for (i = 0; i < accounts.length; i++) {
    if (accounts[i].Name != null) {
      if (drop_id == "c_s_acc_no") {
        if (accounts[i].hasOwnProperty("A_c_Type")) {
          if (accounts[i].ACCT_CLS_FLG == "N" &&
              (accounts[i].A_c_Type == "Current" ||
              accounts[i].A_c_Type == "Saving" ||
              accounts[i].A_c_Type == "CAA" ||
              accounts[i].A_c_Type == "SBA")) {
                if (!count) {
                  st += `<option selected="selected">${accounts[i].Name}</option>`;
                  count = true;
                } else {
                  st += `<option>${accounts[i].Name}</option>`;
                }
          }
        }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
          if (accounts[i].Account_Close_Flag == "N" && 
          (accounts[i].A_c_Type_Current_Saving == "CCA" ||
          accounts[i].A_c_Type_Current_Saving == "ODA")) {
            if (!count) {
              st += `<option selected="selected">${accounts[i].Name}</option>`;
              count = true;
            } else {
              st += `<option>${accounts[i].Name}</option>`;
            }
          }
        }
        
        
      }
      if (drop_id == "acct_no_dd") {
        if (accounts[i].hasOwnProperty("A_c_Type")) {
          if (accounts[i].ACCT_CLS_FLG == "N" &&
              (accounts[i].A_c_Type == "Current" ||
              accounts[i].A_c_Type == "Saving" ||
              accounts[i].A_c_Type == "CAA" ||
              accounts[i].A_c_Type == "SBA")) {
                if (!count) {
                  st += `<option selected="selected">${accounts[i].Name}</option>`;
                  count = true;
                } else {
                  st += `<option>${accounts[i].Name}</option>`;
                }
          }
        }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
          if (accounts[i].Account_Close_Flag == "N" && 
          (accounts[i].A_c_Type_Current_Saving == "CCA" ||
          accounts[i].A_c_Type_Current_Saving == "ODA")) {
            if (!count) {
              st += `<option selected="selected">${accounts[i].Name}</option>`;
              count = true;
            } else {
              st += `<option>${accounts[i].Name}</option>`;
            }
          }
        }
      }
      if (drop_id == "acct_no_ds") {
        if (accounts[i].hasOwnProperty("A_c_Type")) {
          if (accounts[i].ACCT_CLS_FLG == "N" &&
              (accounts[i].A_c_Type == "Current" ||
              accounts[i].A_c_Type == "Saving" ||
              accounts[i].A_c_Type == "CAA" ||
              accounts[i].A_c_Type == "SBA")) {
                if (!count) {
                  st += `<option selected="selected">${accounts[i].Name}</option>`;
                  count = true;
                } else {
                  st += `<option>${accounts[i].Name}</option>`;
                }
          }
        }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
          if (accounts[i].Account_Close_Flag == "N" && 
          (accounts[i].A_c_Type_Current_Saving == "CCA" ||
          accounts[i].A_c_Type_Current_Saving == "ODA")) {
            if (!count) {
              st += `<option selected="selected">${accounts[i].Name}</option>`;
              count = true;
            } else {
              st += `<option>${accounts[i].Name}</option>`;
            }
          }
        }
      }
      if (drop_id == "ms-verify-dropdown") {
        if (accounts[i].hasOwnProperty("A_c_Type") || accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if ((accounts[i].A_c_Type == "Current" ||
                accounts[i].A_c_Type == "Saving" ||
                accounts[i].A_c_Type == "CAA" ||
                accounts[i].A_c_Type == "SBA") &&
                accounts[i].ACCT_CLS_FLG == "N") {
                  if (!count) {
                    st += `<option selected="selected">${accounts[i].Name}</option>`;
                    count = true;
                  } else {
                    st += `<option>${accounts[i].Name}</option>`;
                  }
            }
          }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
            if (accounts[i].Account_Close_Flag == "N") {
              if (!count) {
                st += `<option selected="selected">${accounts[i].Name}</option>`;
                count = true;
              } else {
                st += `<option>${accounts[i].Name}</option>`;
              }
            }
          }
        }else{
          st += `<option selected="selected">No Accounts</option>`;
        }
        
      }
      // else
      // {
      //   if (!count) {
      //     st += `<option selected="selected">${accounts[i].Name}</option>`;
      //     count = true;
      //   } else {
      //     st += `<option>${accounts[i].Name}</option>`;
      //   }
      // }
    }
  }
  if (!count) {
    select_ele.innerHTML =
      '<option selected="selected">No account available</option>';
    return;
  }
  select_ele.innerHTML = st;
}

//Account statement search changes
function stopPropagation(evt)
{
  evt.stopPropagation();
}
function searchFilterPopulateAccounts(superset,searchCriteria,closeAcctFilter)
{
  let dropDownContainer=document.getElementById("accountStatementDropOptions");
  let selectId="acc-transaction-drop-select";
  // let dropOptions=dropDownContainer.querySelectorAll(".drop-line.dr");
  let dropOptions=document.getElementById("accountStatementDropOptions").children;
  console.log("conditions",searchCriteria,closeAcctFilter);
  let st=``;
  /*
  for(let i=0;i<dropOptions.length;i++)
  {
    dropOptions[i].remove();
  }
  */
  for(let accounts of superset)
  {
    if((!searchCriteria)||(searchCriteria==""))
    {
      //populate all accounts
      if(closeAcctFilter)
      {
        if ((accounts.hasOwnProperty("A_c_Type")&&accounts.ACCT_CLS_FLG == "N")||(accounts.hasOwnProperty("A_c_Type_Current_Saving")&&accounts.Account_Close_Flag == "N"))
        {
          //open account
          st += `<div class="drop-line dr" onclick="new_drop_select(this,'${selectId}','acc_transaction_drop_content')">
          ${accounts.Name}</div>`;
        } 
        else
        {
          //closed account 
          st += `<div class="drop-line dr closed-account" onclick="new_drop_select(this,'${selectId}','acc_transaction_drop_content')">
          ${accounts.Name}</div>`;
        }
        
      }
      else
      {
        if ((accounts.hasOwnProperty("A_c_Type")&&accounts.ACCT_CLS_FLG == "N")||(accounts.hasOwnProperty("A_c_Type_Current_Saving")&&accounts.Account_Close_Flag == "N")) 
        {
          st += `<div class="drop-line dr" onclick="new_drop_select(this,'${selectId}','acc_transaction_drop_content')">
          ${accounts.Name}</div>`;
        }
      }
      
    }
    else
    {
      //check the searchCritirea is in the account numbers
      if(accounts.Name.includes(searchCriteria))
      {
          if(closeAcctFilter)
        {

          if ((accounts.hasOwnProperty("A_c_Type")&&accounts.ACCT_CLS_FLG == "N")||(accounts.hasOwnProperty("A_c_Type_Current_Saving")&&accounts.Account_Close_Flag == "N"))
        {
          //open account
          st += `<div class="drop-line dr" onclick="new_drop_select(this,'${selectId}','acc_transaction_drop_content')">
          ${accounts.Name}</div>`;
        } 
        else
        {
          //closed account 
          st += `<div class="drop-line dr closed-account" onclick="new_drop_select(this,'${selectId}','acc_transaction_drop_content')">
          ${accounts.Name}</div>`;
        }

        }
        else
        {
          if ((accounts.hasOwnProperty("A_c_Type")&&accounts.ACCT_CLS_FLG == "N")||(accounts.hasOwnProperty("A_c_Type_Current_Saving")&&accounts.Account_Close_Flag == "N")) 
          {
            st += `<div class="drop-line dr" onclick="new_drop_select(this,'${selectId}','acc_transaction_drop_content')">
            ${accounts.Name}</div>`;
          }
        }
      }
    }
  }
  if(st.length==0)
  {
    st=`<div class="drop-line dr">No Account available</div>`;
  }
  dropDownContainer.innerHTML=st;
  clearContainer("acctStatementSearchLoader");
}
function filter_accts_in_acct_Statement(smoothLoad)
{
  loadBeads("acctStatementSearchLoader");
  if(smoothLoad)
  {
    //search smoothly with keyIn delays
    if(acctSearchTimer)
    {
      clearTimeout(acctSearchTimer);
      acctSearchTimer=setTimeout(()=>{
        //call the search-filter-populate function
        searchFilterPopulateAccounts(new_deposits.concat(new_advances),document.getElementById("acctStatementSearch").value,document.getElementById("acctStatementClosedAccts").checked);
        clearTimeout(acctSearchTimer);
        acctSearchTimer=null;
      },1000);
      return;
    }
    else
    {
      acctSearchTimer=setTimeout(()=>{
        //call the search-filter-populate function
        searchFilterPopulateAccounts(new_deposits.concat(new_advances),document.getElementById("acctStatementSearch").value,document.getElementById("acctStatementClosedAccts").checked);
        clearTimeout(acctSearchTimer);
        acctSearchTimer=null;
      },1000);
      return;
    }
  }
  else
  {
    //search immediately
    searchFilterPopulateAccounts(new_deposits.concat(new_advances),document.getElementById("acctStatementSearch").value,document.getElementById("acctStatementClosedAccts").checked);
  }
}
function loadBeads(containerId)
{
  let nBeads=4;
  let containerElem=document.getElementById(containerId);
  let beadSt=``;
  if(containerElem.innerHTML!=``)
  {
    return;
  }
  for(let i=0;i<nBeads;i++)
  {
    beadSt+=`<div class="load-beads"></div>`;
  }
  containerElem.innerHTML=beadSt;
}
function clearContainer(containerId)
{
  document.getElementById(containerId).innerHTML=``;
}
//

//ATM claim change
function populate_new_dropdowns(drop_down_array, accounts){
  new_node = createDynamicDropDown(["IMPS","UPI","AEPS","ATM","POS"]);
  document.getElementById("atmchannelcontainer").appendChild(new_node);
  for (j = 0; j < drop_down_array.length; j++) {

    if (drop_down_array[j]== "atmdropDownContainer")
    {
      
      let permittedValues= accounts.map(value => value.Name);
      atm_claim_accounts_array.push(...permittedValues);
      if (deposits_flg && advances_flg)
      {
        let isAtmClaimLoaded=document.getElementById("atmdropDownContainer").getAttribute("isLoaded");
        if(isAtmClaimLoaded=="true")
        {
          return;
        }
        let dropDownContainer = document.getElementById("atmdropDownContainer");
        let actionbtn = document.getElementById(drop_down_array[j] +"_action");
        let dynamicDropDown=createDynamicDropDown(atm_claim_accounts_array,(selectedVal)=>{
          console.log("selectedVal",selectedVal);
        },"Select Account");
        dropDownContainer.innerHTML="";
        dropDownContainer.appendChild(dynamicDropDown);
actionbtn.addEventListener("click",(evt)=>{
  //write the atm fetch logic here
  let table = document.getElementById("atm_claim_op_table");
  let selectedAccVal=dynamicDropDown.getAttribute("value");
  let atm_channel_name = new_node.getAttribute("value");
  let transaction_date = document.getElementById("date_text3").value || "";
  let converted_transaction_date = transaction_date.replaceAll("-","/");
  console.log("Selected Account Value",selectedAccVal);
    console.log("Selected Channel Value",atm_channel_name);
    console.log("Selected Transaction Date",transaction_date);
  document
    .getElementById("atm_claim_error_div")
    .classList.add("hide_tab_imp");
  document
      .getElementById("atm_claim_loader_table")
      .classList.remove("hide_tab_imp");
    document.getElementById("atm_claim_op_table").classList.add("hide");
    if (transaction_date == "") {
      table.style.display = "none";
      show_fallback(
        "Please Select Transaction Date",
        "atm_claim_loader_table",
        "atm_claim_error_div"
      );
      return;
    }
    if (selectedAccVal == "" || selectedAccVal == "select account" || selectedAccVal == null) {
      table.style.display = "none";
      show_fallback(
        "Please Select Account Number",
        "atm_claim_loader_table",
        "atm_claim_error_div"
      );
      return;
    }
    if (atm_channel_name == "" || atm_channel_name == "select account" || atm_channel_name == null) {
      table.style.display = "none";
      show_fallback(
        "Please Select Channel Name",
        "atm_claim_loader_table",
        "atm_claim_error_div"
      );
      return;
    }
    // Calling ATM Claim API

    let p = {InpTranDt: converted_transaction_date, 
      InpChannel: atm_channel_name,
      InpAcctNum: selectedAccVal};

      // let p = {
      //   InpTranDt: "30-01-2024",
      //   InpChannel: "UPI",
      //   InpAcctNum: "520101032743013"
      // };

    let apiName="ATM Claim API";
    document
        .getElementById("atm_claim_loader_table")
        .classList.remove("hide_tab_imp");

        if(isUatInstance)
          {
            apiName="uat_atmclaim_trandetails1";
          }
          else
          {
            apiName="All_Balance_Inq_UBI_DC_36021";
          }
        call_crm_function(apiName, p,null,true).then((response) => {
          
          response = JSON.parse(response.details.output);
         
          let table = document.getElementById("atm_claim_op_table");
          if (response.data.SuccessOrFailure === "N" && response.data.Message === "Invalid Request") {
            table.style.display = "none";
            show_fallback(
              "Transaction details not available for the given data",
              "atm_claim_loader_table",
              "atm_claim_error_div"
            );
            return;
          }
          if (response.data.SuccessOrFailure !== "Y") {
            table.style.display = "none";
            show_fallback(
              response.data.Error_1 ? "Error from Finacle: " + response.data.Error_1 : "Fetch failed",
              "atm_claim_loader_table",
              "atm_claim_error_div"
            );
            return;
          }
          table.innerHTML = `
            <tr class="crm-style-row">
              <th class="crm-style-header">Transaction ID</th>
              <th class="crm-style-header">Transaction Date</th>
              <th class="crm-style-header">Transaction Amount</th>
              <th class="crm-style-header">Particular</th>
              <th class="crm-style-header">RRN No</th>
              <th class="crm-style-header">Channel</th>
              <th class="crm-style-header">Action</th>
            </tr>`; 
          const transactionCount = parseInt(response.data.Tran_Count);
for (let i = 1; i <= transactionCount; i++) {
  const transactionId = response.data[`TransactionId_${i}`] || "";
  const transactionDate = response.data[`TransactionDate_${i}`] || "";
  const transactionAmount = response.data[`TransactionAmount_${i}`] || "";
  const transactionParticular = response.data[`TransactionParticular_${i}`] || "";
  const rrNumber = response.data[`RRNumber_${i}`] || "";
  const channel = atm_channel_name; //
  const new_tr_ele = document.createElement("tr");
  new_tr_ele.classList.add("crm-style-row");
  new_tr_ele.innerHTML = `
    <td class="crm-style-cell">${transactionId}</td>
    <td class="crm-style-cell">${transactionDate}</td>
    <td class="crm-style-cell">${transactionAmount}</td>
    <td class="crm-style-cell">${transactionParticular}</td>
    <td class="crm-style-cell">${rrNumber}</td>
    <td class="crm-style-cell">${channel}</td>
    <td class="crm-style-cell">
      <div class="crm-style-btn">Lodge Complaint</div>
    </td>`;
  table.appendChild(new_tr_ele);
  const lodgeComplaintBtn = new_tr_ele.querySelector(".crm-style-btn");

              //Change by Mintu regarding ATM lodge complaint
              lodgeComplaintBtn.addEventListener("click", () => {
                const lodge_json = {
                  transaction_id: transactionId,
                  transaction_date: transactionDate,
                  transaction_amount: transactionAmount,
                  transaction_particular: transactionParticular,
                  rr_number: rrNumber,
                  channel: channel
                };

                let areaSubAreaMap = {
                  UPI: {
                    area: "Failed Txn- (UPI)",
                    subAreas: [
                      "Account Debited but not credited in Merchant/Beneficiary",
                      "Amount credited to wrong Beneficiary",
                      "Suspected/Fradulent Transaction",
                      "Amount debited but Txn not successful"
                    ]
                  },
                  IMPS: {
                    area: "Failed Txn- (IMPS)",
                    subAreas: [
                      "Account Debited but not credited in Merchant/Beneficiary",
                      "Amount credited to wrong Beneficiary",
                      "Suspected/Fradulent Transaction",
                      "Amount debited but Txn not successful"
                    ]
                  },
                  POS: {
                    area: "Failed Txn- (POS)",
                    subAreas: [
                      "Account Debited but not credited in Merchant/Beneficiary",
                      "Account Debited Twice",
                      "Suspected/Fradulent Transaction",
                      "Amount debited but Txn not successful"
                    ]
                  },
                  ATM: {
                    area: "Failed Txn-(ATM/CRM/CDM)",
                    subAreas: [
                      "Account Debited Cash Not Dispensed",
                      "Account Debited but Less cash Dispensed",
                      "Suspected/Fradulent Transaction"
                    ]
                  },
                  AEPS: {
                    area: "Failed Txn- (AEPS)",
                    subAreas: [
                      "Account Debited but not credited in Merchant/Beneficiary",
                      "Amount credited to wrong Beneficiary",
                      "Suspected/Fradulent Transaction",
                      "Account Debited Cash Not Received",
                      "Amount debited but Txn not successful"
                    ]
                  }
                };

                document.querySelectorAll(".confirmation-popup").forEach(popup => popup.remove());

                // Create Sub Area dropdown using createDynamicDropDown
                let subAreaOptions = areaSubAreaMap[lodge_json.channel]?.subAreas || [];
                let subAreaDropdown = createDynamicDropDown(
                  subAreaOptions,
                  (selectedVal) => {
                    console.log("--Select--", selectedVal);
                  },
                  "--Select--"
                );

                // Create Sub Area selection popup
                const subAreaPopup = document.createElement("div");
                subAreaPopup.classList.add("confirmation-popup");
                subAreaPopup.innerHTML = `
                  <div class="popup-content" style="text-align: left;">
  <p>Please select a Sub Area before lodging the complaint:</p>
  
  <!-- Wrap the dropdown container in a block-level element with left alignment -->
  <div style="text-align: left;">
    <div id="sub-area-container" style="display: inline-block; max-width: 78%; max-height: 10%;">
      <!-- Dropdown will be appended here -->
    </div>
  </div>
  
  <p id="sub-area-error" style="color: red; font-size: 12px; display: none;">Please select the Sub Area</p>
  
  <div style="display: flex; flex-direction: row; justify-content: flex-end; margin-top: 10px;">
    <button id="sub-area-submit" class="active-status" style="margin-right: 5mm;">Proceed</button>
    <button id="sub-area-cancel" class="expired-status">Cancel</button>
  </div>
</div>
`;

                document.body.appendChild(subAreaPopup);
                document.getElementById("sub-area-container").appendChild(subAreaDropdown);  // Append dropdown inside popup

                document.getElementById("sub-area-cancel").addEventListener("click", () => {
                  subAreaPopup.remove();
                });

                document.getElementById("sub-area-submit").addEventListener("click", () => {
                  let selectedSubArea = subAreaDropdown.getAttribute("value");
                  if (!selectedSubArea || selectedSubArea === "Select Sub Area") {
                    document.getElementById("sub-area-error").style.display = "block";
                    return;
                  }

                  let selectedArea = areaSubAreaMap[lodge_json.channel]?.area || "Unknown Area";

                  subAreaPopup.remove();

                  // Create confirmation popup
                  const confirmationPopup = document.createElement("div");
                  confirmationPopup.classList.add("confirmation-popup");
                  confirmationPopup.innerHTML = `
                    <div class="popup-content">
                      <p>Are you sure you want to Lodge the complaint?</p>
                      <div style="display: flex; flex-direction: row; justify-content: flex-end;">
                        <button id="popup-yes" class="active-status">Yes</button>
                        <button id="popup-no" class="expired-status">No</button>
                      </div>
                    </div>`;
                  document.body.appendChild(confirmationPopup);

                  document.getElementById("popup-no").addEventListener("click", () => {
                    confirmationPopup.remove();
                  });

                  document.getElementById("popup-yes").addEventListener("click", () => {
                    let yesButton = document.getElementById("popup-yes");

                    yesButton.innerHTML = "Processing...";
                    yesButton.disabled = true;
                    console.log("Lodge complaint JSON:", lodge_json);


                    console.log("Lodge complaint JSON:", lodge_json);

                    let cl = {
                      InpChannel: lodge_json.channel,
                      InpTranDt: lodge_json.transaction_date,
                      Inprrn: lodge_json.rr_number,
                      InpTranAmt: lodge_json.transaction_amount,
                      InpTranID: lodge_json.transaction_id,
                      InpAcctNum : selectedAccVal,
                      ClaimMode: "CRM",
                      transaction_particular: lodge_json.transaction_particular,
                      SubArea: selectedSubArea
                    };

                    let parts = cl.InpTranDt.split("-");

                    // Reformat the date into YYYY-MM-DD
                    let formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;

                    console.log("formattedDate", formattedDate);

                    // let cl2 = {
                    //   InpChannel: "UPI",
                    //   InpTranDt: "29-01-2024",
                    //   InpAcctNum: "198110100033333",
                    //   InpTranAmt: "1300",
                    //   InpTranID: "S3897565",
                    //   ClaimMode: "CRM",
                    //   SubArea: selectedSubArea
                    // };


                    let apiName = "ATM Complaint Lodge API";
                    if(isUatInstance)
                      {
                        apiName="uat_atmclaim_neel11";
                      }
                      else
                      {
                        apiName="UAT_ATMCLAIM_Neel1";
                      }
                    call_crm_function(apiName, cl, null, true)
                      .then((response) => {
                        response = JSON.parse(response.details.output);
                        console.log("Complaint Log Response:", response);
                        const cf_atmclaim_complaint_no= response.data[`Ref_no`] || "";
                        console.log("cf_atmclaim_complaint_no",cf_atmclaim_complaint_no);
                        
                        if (response.data.SuccessOrFailure === "Y") {
                          create_ticket_in_desk(
                            cl.InpChannel + "/" + selectedSubArea + " - S360",
                            "Request for Lodge Complaint",
                            "Complaint",
                            selectedArea,
                            selectedSubArea,
                            selectedAccVal,
                            null,
                            mail_for_desk,
                            phone_for_desk,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            "Open",
                            cl.InpTranAmt,
                            formattedDate,
                            cl.transaction_particular,
                            cl.Inprrn,
                            cl.InpChannel,
                            cf_atmclaim_complaint_no
                          );

                          confirmationPopup.innerHTML = `
  <div class="popup-content">
    <p style="color: green;">Complaint lodged successfully.</p>
    <button id="popup-ok" class="active-status" >OK</button>
  </div>`;
                          document.getElementById("popup-ok").addEventListener("click", () => {
                            confirmationPopup.remove();
                          });
                        } else {
                          confirmationPopup.innerHTML = `
                            <div class="popup-content">
                              <p style="color: red;">Error: ${response.data.Error_1 || "Lodging complaint failed. Please try again."}</p>
                              <button id="popup-ok" class="expired-status">OK</button>
                            </div>`;
                          document.getElementById("popup-ok").addEventListener("click", () => {
                            confirmationPopup.remove();
                          });
                        }
                      })
                      .catch((err) => {
                        console.error("Error lodging complaint:", err);

                        confirmationPopup.innerHTML = `
                          <div class="popup-content">
                            <p style="color: red;">Something went wrong. Please try again.</p>
                            <button id="popup-ok" class="expired-status">OK</button>
                          </div>`;
                        document.getElementById("popup-ok").addEventListener("click", () => {
                          confirmationPopup.remove();
                        });
                      })
                      .finally(() => {
                        yesButton.innerHTML = "Yes";
                        yesButton.disabled = false;
                        // append_send_log("send_log_container_" + String((send_log_msg_ids[apiName] - 1)), apiName);
                      });
                  });
                });
              });
              //
}
          document.getElementById("atm_claim_loader_table").classList.add("hide_tab_imp");
          document.getElementById("atm_claim_op_table").classList.remove("hide");
          table.style.display = "table";
        }).catch((err) => {
          let table = document.getElementById("atm_claim_op_table");
          table.style.display = "none";
          show_fallback(
            "Something went wrong. Please try again",
            "atm_claim_loader_table",
            "atm_claim_error_div"
          );
          document.getElementById("atm_claim_loader_table").classList.add("hide_tab_imp");
          document.getElementById("atm_claim_op_table").classList.remove("hide");
          console.error("Error in ATM claim API", err);
        }).finally(()=>{
          append_send_log("send_log_container_"+String((send_log_msg_ids["ATM Claim API"]-1)),"ATM Claim API");
        });
});
actionbtn.classList.remove("crm-style-btn-2");
actionbtn.classList.remove("disable-btn");
actionbtn.classList.add("crm-style-btn");
document.getElementById("atmdropDownContainer").setAttribute("isLoaded","true");
      }
      ////
      
    }
  }

}
//
function populate_dropdowns(drop_down_array, accounts) {
  console.log("inside populate dropdowns", accounts);
  for (j = 0; j < drop_down_array.length; j++) {
    let drop_content = document.getElementById(drop_down_array[j]);
    let select_ele = document.getElementById(
      drop_content.getAttribute("select_id")
    );
    let loader_id = drop_content.getAttribute("select_id") + "-load-block";
    let st = "";
    let first_account_number = null;

    let count = false;
    console.log("Drop down Data",drop_down_array,accounts);
    //account search changes
    if(drop_down_array[j]=="acc_transaction_drop_content")
    {
      st+=`<div class="drop-line drop-line-border" style="position:sticky; top:0; background-color:white;text-wrap: nowrap;white-space:nowrap;min-width:max-content;width:100%;" onClick="stopPropagation(event)"><input class="search-bar" style="margin-right:5%;" id="acctStatementSearch" onKeyDown="filter_accts_in_acct_Statement(true)" placeholder="Search account"> Closed accounts<label class="switch" style="top:0px; margin-left:6px; min-width:33px;">
      <input type="checkbox" id="acctStatementClosedAccts" onclick="filter_accts_in_acct_Statement(false)">
      <span class="slider round"></span>
    </label></div>
    <div id="acctStatementSearchLoader" style="height:5px;width:100%;position:relative;overflow-x:clip; display:flex; flex-direction:row;"></div>
    <div id="accountStatementDropOptions">`;
    }
    //
    for (i = 0; i < accounts.length; i++) {
      //acct cls flag bug fix
      
      if (accounts[i].Name != null) {
        if (drop_down_array[j] == "mini_statement_drop_content" ) {
        
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if ((accounts[i].A_c_Type == "Current" ||
                accounts[i].A_c_Type == "Saving" ||
                accounts[i].A_c_Type == "CAA" ||
                accounts[i].A_c_Type == "SBA") &&
                accounts[i].ACCT_CLS_FLG == "N") {
                  st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                    "select_id"
                  )}','${drop_down_array[j]}')">
                  ${accounts[i].Name}</div>`;
                  if (!count) {
                    // select_ele.innerHTML = accounts[i].Name;
                    first_account_number = accounts[i].Name;
                  }
                  count = true;
            }
          }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
            if (accounts[i].Account_Close_Flag == "N") {
              st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                "select_id"
              )}','${drop_down_array[j]}')">
              ${accounts[i].Name}</div>`;
              if (!count) {
                // select_ele.innerHTML = accounts[i].Name;
                first_account_number = accounts[i].Name;
              }
              count = true;
            }
          }
          
          // mini_statements += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          
        }
        if (drop_down_array[j] == "lien_acc_drop_content") {
          // lien_acc +=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if (accounts[i].ACCT_CLS_FLG == "N") {
                  st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                    "select_id"
                  )}','${drop_down_array[j]}')">
                  ${accounts[i].Name}</div>`;
                  if (!count) {
                    // select_ele.innerHTML = accounts[i].Name;
                    first_account_number = accounts[i].Name;
                  }
                  count = true;
            }
          }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
            if (accounts[i].Account_Close_Flag == "N") {
              st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                "select_id"
              )}','${drop_down_array[j]}')">
              ${accounts[i].Name}</div>`;
              if (!count) {
                // select_ele.innerHTML = accounts[i].Name;
                first_account_number = accounts[i].Name;
              }
              count = true;
            }
          }
        }
        if (drop_down_array[j] == "cheque_book_drop_content") {
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if (accounts[i].ACCT_CLS_FLG == "N" &&
                (accounts[i].A_c_Type == "Current" ||
                accounts[i].A_c_Type == "Saving" ||
                accounts[i].A_c_Type == "CAA" ||
                accounts[i].A_c_Type == "SBA")) {
                  st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                    "select_id"
                  )}','${drop_down_array[j]}')">
                  ${accounts[i].Name}</div>`;
                  if (!count) {
                    // select_ele.innerHTML = accounts[i].Name;
                    first_account_number = accounts[i].Name;
                  }
                  count = true;
            }
          }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
            if (accounts[i].Account_Close_Flag == "N" && 
            (accounts[i].A_c_Type_Current_Saving == "CCA" ||
            accounts[i].A_c_Type_Current_Saving == "ODA")) {
              st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                "select_id"
              )}','${drop_down_array[j]}')">
              ${accounts[i].Name}</div>`;
              if (!count) {
                // select_ele.innerHTML = accounts[i].Name;
                first_account_number = accounts[i].Name;
              }
              count = true;
            }
          }
        }
        if (drop_down_array[j] == "acc_drop_content") {
          //     dbt_card+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if (accounts[i].ACCT_CLS_FLG == "N" &&
                (accounts[i].A_c_Type == "Current" ||
                accounts[i].A_c_Type == "Saving" ||
                accounts[i].A_c_Type == "CAA" ||
                accounts[i].A_c_Type == "SBA")) {
                  st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                    "select_id"
                  )}','${drop_down_array[j]}')">
                  ${accounts[i].Name}</div>`;
                  if (!count) {
                    // select_ele.innerHTML = accounts[i].Name;
                    first_account_number = accounts[i].Name;
                  }
                  count = true;
            }
          }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
            if (accounts[i].Account_Close_Flag == "N" && 
            (accounts[i].A_c_Type_Current_Saving == "CCA" ||
            accounts[i].A_c_Type_Current_Saving == "ODA")) {
              st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                "select_id"
              )}','${drop_down_array[j]}')">
              ${accounts[i].Name}</div>`;
              if (!count) {
                // select_ele.innerHTML = accounts[i].Name;
                first_account_number = accounts[i].Name;
              }
              count = true;
            }
          }
        }
        if (drop_down_array[j] == "standing_instructions_drop_content") {
          //     std_instn+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if (accounts[i].ACCT_CLS_FLG == "N") {
                  st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                    "select_id"
                  )}','${drop_down_array[j]}')">
                  ${accounts[i].Name}</div>`;
                  if (!count) {
                    // select_ele.innerHTML = accounts[i].Name;
                    first_account_number = accounts[i].Name;
                  }
                  count = true;
            }
          }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
            if (accounts[i].Account_Close_Flag == "N") {
              st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                "select_id"
              )}','${drop_down_array[j]}')">
              ${accounts[i].Name}</div>`;
              if (!count) {
                // select_ele.innerHTML = accounts[i].Name;
                first_account_number = accounts[i].Name;
              }
              count = true;
            }
          }
        }
        if (drop_down_array[j] == "freeze_acc_drop_content") {
          //     std_instn+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if (accounts[i].ACCT_CLS_FLG == "N"&&
            (accounts[i].A_c_Type == "Current" ||
            accounts[i].A_c_Type == "Saving" ||
            accounts[i].A_c_Type == "CAA" ||
            accounts[i].A_c_Type == "SBA")) {
                  st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                    "select_id"
                  )}','${drop_down_array[j]}')">
                  ${accounts[i].Name}</div>`;
                  if (!count) {
                    // select_ele.innerHTML = accounts[i].Name;
                    first_account_number = accounts[i].Name;
                  }
                  count = true;
            }
          }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
            if (accounts[i].Account_Close_Flag == "N" &&
             (accounts[i].A_c_Type_Current_Saving == "CCA" ||
            accounts[i].A_c_Type_Current_Saving == "ODA")) {
              st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                "select_id"
              )}','${drop_down_array[j]}')">
              ${accounts[i].Name}</div>`;
              if (!count) {
                // select_ele.innerHTML = accounts[i].Name;
                first_account_number = accounts[i].Name;
              }
              count = true;
            }
          }
        }
        if ((drop_down_array[j] == "acc_transaction_drop_content")&&((accounts[i].hasOwnProperty("A_c_Type")&&accounts[i].ACCT_CLS_FLG == "N")||(accounts[i].hasOwnProperty("A_c_Type_Current_Saving")&&accounts[i].Account_Close_Flag == "N"))) {
          //     std_instn+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;

          st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
            "select_id"
          )}','${drop_down_array[j]}')">
          ${accounts[i].Name}</div>`;
          if (!count) {
            // select_ele.innerHTML = accounts[i].Name;
            first_account_number = accounts[i].Name;
          }
          count = true;
          // if (accounts[i].hasOwnProperty("A_c_Type")) {
          //   if (accounts[i].ACCT_CLS_FLG == "N"&&
          //   (accounts[i].A_c_Type == "Current" ||
          //   accounts[i].A_c_Type == "Saving" ||
          //   accounts[i].A_c_Type == "CAA" ||
          //   accounts[i].A_c_Type == "SBA")) {
          //         st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
          //           "select_id"
          //         )}','${drop_down_array[j]}')">
          //         ${accounts[i].Name}</div>`;
          //         if (!count) {
          //           // select_ele.innerHTML = accounts[i].Name;
          //           first_account_number = accounts[i].Name;
          //         }
          //         count = true;
          //   }
          // }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
          //   if (accounts[i].Account_Close_Flag == "N" &&
          //    (accounts[i].A_c_Type_Current_Saving == "CCA" ||
          //   accounts[i].A_c_Type_Current_Saving == "ODA")) {
          //     st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
          //       "select_id"
          //     )}','${drop_down_array[j]}')">
          //     ${accounts[i].Name}</div>`;
          //     if (!count) {
          //       // select_ele.innerHTML = accounts[i].Name;
          //       first_account_number = accounts[i].Name;
          //     }
          //     count = true;
          //   }
          // }
        }
        if (
          drop_down_array[j] == "term_deposit_drop_content"
        ) {
          //     trm_dpt+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if (accounts[i].ACCT_CLS_FLG == "N" &&
                (accounts[i].A_c_Type == "TDA")) {
                  st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                    "select_id"
                  )}','${drop_down_array[j]}')">
                  ${accounts[i].Name}</div>`;
                  if (!count) {
                    // select_ele.innerHTML = accounts[i].Name;
                    first_account_number = accounts[i].Name;
                  }
                  count = true;
            }
          }
        }
        if (drop_down_array[j] == "balance_inquiry_drop_content") {
          // bal_inquiry+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if (accounts[i].ACCT_CLS_FLG == "N" &&
                (accounts[i].A_c_Type == "Current" ||
                accounts[i].A_c_Type == "Saving" ||
                accounts[i].A_c_Type == "CAA" ||
                accounts[i].A_c_Type == "SBA")) {
                  st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                    "select_id"
                  )}','${drop_down_array[j]}')">
                  ${accounts[i].Name}</div>`;
                  if (!count) {
                    // select_ele.innerHTML = accounts[i].Name;
                    first_account_number = accounts[i].Name;
                  }
                  count = true;
            }
          }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
            if (accounts[i].Account_Close_Flag == "N" && 
            (accounts[i].A_c_Type_Current_Saving == "CCA" ||
            accounts[i].A_c_Type_Current_Saving == "ODA")) {
              st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                "select_id"
              )}','${drop_down_array[j]}')">
              ${accounts[i].Name}</div>`;
              if (!count) {
                // select_ele.innerHTML = accounts[i].Name;
                first_account_number = accounts[i].Name;
              }
              count = true;
            }
          }
        }
        if (drop_down_array[j] == "loan_acc_drop_content"  &&
            accounts[i].Account_Close_Flag == "N" &&
            (accounts[i].A_c_Type_Current_Saving == "LAA" ||
            accounts[i].A_c_Type_Current_Saving == "CCA" ||
            accounts[i].A_c_Type_Current_Saving == "ODA")) {
          // bal_inquiry+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
            "select_id"
          )}','${drop_down_array[j]}')">
          ${accounts[i].Name}</div>`;
          if (!count) {
            // select_ele.innerHTML = accounts[i].Name;
            first_account_number = accounts[i].Name;
          }
          count = true;
        }
        if (drop_down_array[j] == "nominee_drop_content"  &&
            accounts[i].ACCT_CLS_FLG == "N") {
          // bal_inquiry+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
            "select_id"
          )}','${drop_down_array[j]}')">
          ${accounts[i].Name}</div>`;
          if (!count) {
            // select_ele.innerHTML = accounts[i].Name;
            first_account_number = accounts[i].Name;
          }
          count = true;
        }
        if (drop_down_array[j] == "cheque_book_tracking_drop_content") {
          // bal_inquiry+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          if (accounts[i].hasOwnProperty("A_c_Type")) {
            if (accounts[i].ACCT_CLS_FLG == "N") {
                  st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                    "select_id"
                  )}','${drop_down_array[j]}')">
                  ${accounts[i].Name}</div>`;
                  if (!count) {
                    // select_ele.innerHTML = accounts[i].Name;
                    first_account_number = accounts[i].Name;
                  }
                  count = true;
            }
          }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
            if (accounts[i].Account_Close_Flag == "N") {
              st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
                "select_id"
              )}','${drop_down_array[j]}')">
              ${accounts[i].Name}</div>`;
              if (!count) {
                // select_ele.innerHTML = accounts[i].Name;
                first_account_number = accounts[i].Name;
              }
              count = true;
            }
          }
        }
        if (drop_down_array[j] == "debit_card_tracking_drop_content"  &&
            accounts[i].ACCT_CLS_FLG == "N") {
          // bal_inquiry+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
          // ${accounts[i].Name}</div>`;
          st += `<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute(
            "select_id"
          )}','${drop_down_array[j]}')">
          ${accounts[i].Name}</div>`;
          if (!count) {
            // select_ele.innerHTML = accounts[i].Name;
            first_account_number = accounts[i].Name;
          }
          count = true;
        }

        //   st+=`<div class="drop-line dr" onclick="new_drop_select(this,'${drop_content.getAttribute('select_id')}','${drop_down_array[j]}')">
        // ${accounts[i].Name}</div>`;
        
      }
    }
    if(drop_down_array[j]=="acc_transaction_drop_content")
    {
      st+=`</div>`;
    }
    drop_content.innerHTML=st;
    select_ele.innerHTML = "select account";
    //switch to prepopulate data for service request tabs
    prepopulate=false;
    if (!count) {
      select_ele.innerHTML = "No Account";
      st += `<div class="drop-line dr">
      No Account</div>`;
      drop_content.innerHTML = st;
      if (drop_down_array[j] == "mini_statement_drop_content") {
        mini_statement_api_callback("");
      } else if (drop_down_array[j] == "lien_acc_drop_content") {
        lien_api_callback("");
      } else if (drop_down_array[j] == "cheque_book_drop_content") {
        cheque_book_api_callback("");
      } else if (drop_down_array[j] == "acc_drop_content") {
        fetch_debit_callback("");
      } else if (drop_down_array[j] == "standing_instructions_drop_content") {
        standing_instructions_api_callback("");
      } else if (drop_down_array[j] == "term_deposit_drop_content") {
        term_deposit_api_callback("");
      } else if (drop_down_array[j] == "balance_inquiry_drop_content") {
        balance_inquiry_api_callback("");
      } else if (drop_down_array[j] == "loan_acc_drop_content") {
        loan_account_api_callback("");
      } else if (drop_down_array[j] == "acc_transaction_drop_content") {
        fetch_transaction()
      } else if (drop_down_array[j] == "freeze_acc_drop_content") {
        freeze_account_api_callback("");
      } else if (drop_down_array[j] == "nominee_drop_content") {
        nominee_api_callback("");
      }else if (drop_down_array[j] == "cheque_book_tracking_drop_content") {
        cheque_book_tracking_api_callback("");
      }else if (drop_down_array[j] == "debit_card_tracking_drop_content") {
        debit_card_tracking_api_callback("");
      }
    }
    else if(prepopulate)
    {
      
      let p={accno:first_account_number};
      if(drop_down_array[j]=="mini_statement_drop_content")
      {  
        call_crm_function('Mini_Statement_API',p).then((data) => {
          console.log("data from mini statement api",data);
          mini_statement_api_callback(data);
        })
        .catch((err) => {
          show_fallback(
            err,
            "mini_statement_loader_table",
            "mini_statement_error_div"
          );
          write_to_error_log_module("Mini-statement API",err);
        });
      }
      else if(drop_down_array[j]=="lien_acc_drop_content")
      {
        call_crm_function('Lien_Inqury_API',{accno:first_account_number}).then((data)=>{ 
          console.log("data from lien inquiry api",data);
          lien_api_callback(data);
        }).catch((err)=>{
          api_fallback(err);
        });
      }  else if(drop_down_array[j]=="acc_transaction_drop_content")
      {

        // call_crm_function('fetch_debitcard_api',{Accn:first_account_number}).then((data)=>{ 
        //   console.log("data from fetch debit api",data);
        //   fetch_debit_callback(data);
        // }).catch((err)=>{
        //   api_fallback_debit_card("Error");
        // });
      }
      else if(drop_down_array[j]=="acc_drop_content")
      {
        call_crm_function('fetch_debitcard_api',{Accn:first_account_number}).then((data)=>{ 
          console.log("data from fetch debit api",data);
          fetch_debit_callback(data);
        }).catch((err)=>{
          api_fallback_debit_card("Error");
        });
      }
      else if(drop_down_array[j]=="cheque_book_drop_content")
      {
        curr_acc_no_for_cb=p.accno;
        call_crm_function('Chequebook_API',p).then((data)=>{ 
          console.log("data from cheque book api",data);
          cheque_book_api_callback(data);
        }).catch((err)=>{
          cheque_book_api_fallback(err)
        });
      }
      else if(drop_down_array[j]=="standing_instructions_drop_content")
      {
        call_crm_function('standing_instruction_api',{accn:first_account_number}).then((data)=>{ 
          console.log("data from standing instruction api",data);
          standing_instructions_api_callback(data);
        }).catch((err)=>{
          show_fallback(
            err,
            "standing_instructions_loader_table",
            "standing_instructions_error_div"
          );
        });
      }
      else if(drop_down_array[j]=="term_deposit_drop_content")
      {
        call_crm_function('deposit_inquiry_api',{accn:first_account_number}).then((data)=>{ 
          console.log("data from Term Deposit api",data);
          term_deposit_api_callback(data);
        }).catch((err)=>{
          show_fallback(
            err,
            "term_deposit_loader_table",
            "term_deposit_error_div"
          );
        });
      }
      else if(drop_down_array[j]=="balance_inquiry_drop_content")
      {
        call_crm_function('all_balance_inq_ubi_dc_360',{accno:first_account_number}).then((data)=>{ 
          console.log("data from Balance Inquiry api",data);
          balance_inquiry_api_callback(data);
        }).catch((err)=>{
          show_fallback(
            err,
            "balance_inquiry_loader_table",
            "balance_inquiry_error_div"
          );
        });
      }
      else if(drop_down_array[j]=="loan_acc_drop_content")
      {
        call_crm_function('loan_accounts_api',{accn:first_account_number}).then((data)=>{ 
          console.log("data from Loan Accounts api",data);
          loan_account_api_callback(data);
        }).catch((err)=>{
          show_fallback(
            err,
            "loan_account_loader_table",
            "loan_account_error_div"
          );
        });
      }
      else if(drop_down_array[j]=="nominee_drop_content")
      {
        // call_crm_function('Account_Transaction_API2',{accn:first_account_number}).then((data)=>{ 
          // console.log("data from Freeze Accounts api",data);
          nominee_api_callback(data);
        // }).catch((err)=>{
        //   show_fallback(
        //     err,
        //     "freeze_acc_loader_table",
        //     "freeze_acc_error_div"
        //   );
        // });
      }
      else if(drop_down_array[j]=="cheque_book_tracking_drop_content")
      {
        // call_crm_function('Account_Transaction_API2',{accn:first_account_number}).then((data)=>{ 
          // console.log("data from Freeze Accounts api",data);
          cheque_book_tracking_api_callback(data);
        // }).catch((err)=>{
        //   show_fallback(
        //     err,
        //     "freeze_acc_loader_table",
        //     "freeze_acc_error_div"
        //   );
        // });
      }
      else if(drop_down_array[j]=="debit_card_tracking_drop_content")
      {
        // call_crm_function('Account_Transaction_API2',{accn:first_account_number}).then((data)=>{ 
          // console.log("data from Freeze Accounts api",data);
          debit_card_tracking_api_callback(data);
        // }).catch((err)=>{
        //   show_fallback(
        //     err,
        //     "freeze_acc_loader_table",
        //     "freeze_acc_error_div"
        //   );
        // });
      }
      else if(drop_down_array[j]=="freeze_acc_drop_content")
      {
        // call_crm_function('Account_Transaction_API2',{accn:first_account_number}).then((data)=>{ 
          // console.log("data from Freeze Accounts api",data);
          freeze_account_api_callback(data);
        // }).catch((err)=>{
        //   show_fallback(
        //     err,
        //     "freeze_acc_loader_table",
        //     "freeze_acc_error_div"
        //   );
        // });
      }
    }
    document.getElementById(loader_id).style.display = "none";
  }
}
//
function fetch_transaction(){
  let table = document.getElementById("acc_transaction_op_table");
  let from_date = document.getElementById("date_text1").value;
  let to_date = document.getElementById("date_text2").value;
  let acc_num = document.getElementById("acc-transaction-drop-select").innerText;

  
  document
    .getElementById("acc_transaction_error_div")
    .classList.add("hide_tab_imp");
  document
      .getElementById("acc_transaction_loader_table")
      .classList.remove("hide_tab_imp");
    document.getElementById("acc_transaction_op_table").classList.add("hide");
  if (from_date == "") {
    table.style.display = "none";
    show_fallback(
      "Please Select From Date",
      "acc_transaction_loader_table",
      "acc_transaction_error_div"
    );
    return;
  }if (to_date == "") {
    table.style.display = "none";
    show_fallback(
      "Please Select To Date",
      "acc_transaction_loader_table",
      "acc_transaction_error_div"
    );
    return;
  }if (acc_num == "" || acc_num == "select account") {
    table.style.display = "none";
    show_fallback(
      "Please Select Account Number",
      "acc_transaction_loader_table",
      "acc_transaction_error_div"
    );
    return;
  }
  let p = {frmdt: from_date, 
    todt: to_date,
    accn: acc_num}
  console.log(p);
  document
      .getElementById("acc_transaction_loader_table")
      .classList.remove("hide_tab_imp");
  call_crm_function("Account_Transaction_API",p).then((response) => {
    console.log(response);

    if (response.code != "success") {
      table.style.display = "none";
      show_fallback(
        "Something went wrong. Please try again",
        "acc_transaction_loader_table",
        "acc_transaction_error_div"
      );
      //change for: 'sending logs' feature
      api_logs["Account statement API"]=response;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Account statement API"]-1)),"Account statement API");
      return;
    }
    let logs=response;
    response = JSON.parse(response.details.output);
    console.log(response);
    if (response.status != 00 || response.http_statusCode != 200) {
      table.style.display = "none";
      show_fallback(
        "Something went wrong. Please try again",
        "acc_transaction_loader_table",
        "acc_transaction_error_div"
      );
      //change for: 'sending logs' feature
      api_logs["Account statement API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Account statement API"]-1)),"Account statement API");
      return;
    }if(response.data.successorfailure == "N" && response.data.Message == "Invalid Request"){
      table.style.display = "none";
      show_fallback(
        "Account Transaction not available for date range",
        "acc_transaction_loader_table",
        "acc_transaction_error_div"
      );
      //change for: 'sending logs' feature
      api_logs["Account statement API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Account statement API"]-1)),"Account statement API")
      return;
    }
    if (response.data.SuccessOrFailure != "Transaction Details fetch successfully") {
      table.style.display = "none";
      show_fallback(
        response.data.Error_1?"Error from Finacle: "+response.data.Error_1:"Fetch failed",
        "acc_transaction_loader_table",
        "acc_transaction_error_div"
      );

      //change for: 'sending logs' feature
      api_logs["Account statement API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Account statement API"]-1)),"Account statement API")
      return;
    }
    table.innerHTML = "";
    let table_hdr = `
    <tr class="crm-style-row">
    <th class="crm-style-header">#</th>
    <th class="crm-style-header">Transaction ID</th>
    <th class="crm-style-header">Transaction Date</th>
    <th class="crm-style-header">Transaction Value Date</th>
    <th class="crm-style-header">withdrawal Amount</th>
    <th class="crm-style-header">Deposit Amount</th>
    <th class="crm-style-header">Instrument Number</th>
    
    <th class="crm-style-header">Particular</th>
    
                          </tr>`;
    table.innerHTML += table_hdr;
    if (response.data["AccountStatement:"].length == 0) {
      new_tr_ele = document.createElement("tr"); //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>`; //No I18N
      new_tr_ele.classList.add("crm-style-row"); //No I18N
      table.appendChild(new_tr_ele);
    }else{
      ind = 1;
      for (let i of response.data["AccountStatement:"]) {
        let dorc = "Debit";
        if (i.TransactionType == "C") dorc = "Credit";
        new_tr_ele = document.createElement("tr"); //No I18N
        new_tr_ele.innerHTML = `
            <td class="crm-style-cell">${ind++}</td>
            <td class="crm-style-cell">${i.TransactionId}</td>
            <td class="crm-style-cell">${i.TransactionDate}</td>
            <td class="crm-style-cell">${i.TransactionValueDate}</td>
            <td class="crm-style-cell">${dorc == "Debit"?i.TransactionAmount:""}</td>
            <td class="crm-style-cell">${dorc == "Credit"?i.TransactionAmount:""}</td>
            <td class="crm-style-cell">${i.TransactionInstrumentNo}</td>
            <td class="crm-style-cell">${i.TranParticular}</td>            
            `; //No I18N
        new_tr_ele.classList.add("crm-style-row"); //No I18N
        table.appendChild(new_tr_ele);
      }
      document
      .getElementById("acc_transaction_loader_table")
      .classList.add("hide_tab_imp");
      document.getElementById("acc_transaction_op_table").classList.remove("hide");
    table.style.display = "table";
    }

    //change for: 'sending logs' feature
    api_logs["Account statement API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Account statement API"]-1)),"Account statement API")
  }).catch((err) => {
    table.style.display = "none";
    show_fallback(
      "Something went wrong. Please try again",
      "acc_transaction_loader_table",
      "acc_transaction_error_div"
    );
    document
      .getElementById("acc_transaction_loader_table")
      .classList.add("hide_tab_imp");
    document.getElementById("acc_transaction_op_table").classList.remove("hide");
  });
  
}
function disable_chk_box(id) {
  document.getElementById(id).disabled = "true";
}
function enable_chk_box(id) {
  document.getElementById(id).disabled = "false";
}
function populate_lien_account_table(selected_account) {
  let table_id = "lien_account_op_table"; //No I18N
  let table_obj = document.getElementById(table_id);
  let table_body = table_obj.children[0];
  let table_rows = table_obj.children[0].children;
  //removing all the rows except header row
  //console.log('initial table is',table_obj,'table rows is',table_rows,"no of rows",table_rows.length);	//No I18N
  for (let i = 1; i < table_rows.length; i++) {
    //console.log('index',i,'table row',table_rows[i]);	//No I18N
    table_rows[i].remove();
    i--;
    //console.log("table after removing rows",table_obj);	//No I18N
  }
  //appending rows with elements from the json based on account selection
  let debit_cards = lien_account_card_json[`${selected_account}`];
  //console.log('debit cards',debit_cards,'selected account is',selected_account,'debit card json',lien_account_card_json);	//No I18N

  for (let i = 0; i < debit_cards.length; i++) {
    new_tr_ele = document.createElement("tr"); //No I18N
    if (debit_cards[i].status == "active") {
      //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${debit_cards[i].lien_amount}</td>
    <td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">Active</div></div></td>
    <td class="crm-style-cell">${debit_cards[i].lien_reason}</td>`; //No I18N
    } else {
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${debit_cards[i].lien_amount}</td>
    <td class="crm-style-cell"><div class="cell-elem-container"><div class="inactive-status">Inactive</div></div></td>
    <td class="crm-style-cell">${debit_cards[i].lien_reason}</td>`; //No I18N
    }
    new_tr_ele.classList.add("crm-style-row"); //No I18N
    table_body.appendChild(new_tr_ele);
  }
  //table_obj.insertAdjacentElement('beforeend',new_table_html);	//No I18N
}
function populate_lien_account_table2(selected_account) {
  let table_id = "lien_account_op_table"; //No I18N
  let table_obj = document.getElementById(table_id);
  let table_body = table_obj.children[0];
  let table_rows = table_obj.children[0].children;
  //removing all the rows except header row
  //console.log('initial table is',table_obj,'table rows is',table_rows,"no of rows",table_rows.length);	//No I18N
  for (let i = 1; i < table_rows.length; i++) {
    //console.log('index',i,'table row',table_rows[i]);	//No I18N
    table_rows[i].remove();
    i--;
    //console.log("table after removing rows",table_obj);	//No I18N
  }
  //appending rows with elements from the json based on account selection
  let debit_cards = lien_account_card_json[`${selected_account}`];
  //console.log('debit cards',debit_cards,'selected account is',selected_account,'debit card json',lien_account_card_json);	//No I18N

  for (let i = 0; i < debit_cards.length; i++) {
    new_tr_ele = document.createElement("tr"); //No I18N
    if (debit_cards[i].status == "active") {
      //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${debit_cards[i].lien_amount}</td>
    <td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">Active</div></div></td>
    <td class="crm-style-cell">${debit_cards[i].lien_reason}</td>`; //No I18N
    } else {
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${debit_cards[i].lien_amount}</td>
    <td class="crm-style-cell"><div class="cell-elem-container"><div class="inactive-status">Inactive</div></div></td>
    <td class="crm-style-cell">${debit_cards[i].lien_reason}</td>`; //No I18N
    }
    new_tr_ele.classList.add("crm-style-row"); //No I18N
    table_body.appendChild(new_tr_ele);
  }
  //table_obj.insertAdjacentElement('beforeend',new_table_html);	//No I18N
}
//
//debit card formatter
function format_debit_card(debit_card) {
  let new_str = ""; //No I18N
  let count = 0;
  for (i = 0; i < debit_card.length; i++) {
    if (count == 4) {
      new_str += " "; //No I18N
      count = 0;
    }
    new_str += debit_card[i];
    count++;
  }
  return new_str;
}
//new table population
function populate_account_table2(debit_cards) {
  let table_id = "debit_card_op_table"; //No I18N
  let table_obj = document.getElementById(table_id);
  let table_body = table_obj.children[0];
  let table_rows = table_obj.children[0].children;

  //removing all the rows except header row
  //console.log('initial table is',table_obj,'table rows is',table_rows,"no of rows",table_rows.length);	//No I18N
  // console.log(debit_cards);
  for (let i = 1; i < table_rows.length; i++) {
    //console.log('index',i,'table row',table_rows[i]);	//No I18N
    table_rows[i].remove();
    i--;
    //console.log("table after removing rows",table_obj);	//No I18N
  }
  //appending rows with elements from the json based on account selection
  //let debit_cards=debit_card_json[`${selected_account}`];	//No I18N
  //console.log('debit cards',debit_cards,'debit card json',debit_cards);	//No I18N
  let new_table_html = ``;
  for (let i = 0; i < debit_cards.length; i++) {
    new_tr_ele = document.createElement("tr"); //No I18N
    if (debit_cards[i].status == "ACTIVE_CARD") {
      //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${format_debit_card(
        debit_cards[i].debit_card
      )}</td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">Active</div></div></td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn debit-hotlist" onclick="confirm_blocking('${
        debit_cards[i].debit_card
      }')">Hotlist</div></div></td>`; //No I18N
    } else if (debit_cards[i].status == "INACTIVE_CARD") {
      //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${format_debit_card(
        debit_cards[i].debit_card
      )}</td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="inactive-status">Inactive</div></div></td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn debit-hotlist" onclick="confirm_blocking('${
        debit_cards[i].debit_card
      }')">Hotlist</div></div></td>`; //No I18N
    } else {
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${format_debit_card(
        debit_cards[i].debit_card
      )}</td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="expired-status">Expired</div></div></td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn debit-hotlist" onclick="confirm_blocking('${
        debit_cards[i].debit_card
      }')">Hotlist</div></div></td>`; //No I18N
    }
    new_tr_ele.classList.add("crm-style-row"); //No I18N
    table_body.appendChild(new_tr_ele);
  }
  //table_obj.insertAdjacentElement('beforeend',new_table_html);	//No I18N
}
//loan account table population
function populate_loan_account_table(loan_data) {
  let table_id = "loan_account_op_table"; //No I18N
  let table_obj = document.getElementById(table_id);
  let table_body = table_obj.children[0];
  let table_rows = table_obj.children[0].children;

  //removing all the rows except header row
  //console.log('initial table is',table_obj,'table rows is',table_rows,"no of rows",table_rows.length);	//No I18N
  for (let i = 1; i < table_rows.length; i++) {
    //console.log('index',i,'table row',table_rows[i]);	//No I18N
    table_rows[i].remove();
    i--;
    //console.log("table after removing rows",table_obj);	//No I18N
  }
  //appending rows with elements from the json based on account selection
  //let debit_cards=debit_card_json[`${selected_account}`];	//No I18N
  //console.log('debit cards',debit_cards,'debit card json',debit_cards);	//No I18N
  //new code for populating loan table
  let new_tr_ele = document.createElement("tr"); //No I18N
  let new_table_html = `<td class="crm-style-cell">${loan_data.Outstanding_balance}</td>
    <td class="crm-style-cell">${loan_data.Overdue_amount}</td>
    <td class="crm-style-cell">${loan_data.Asset_class}</td><td class="crm-style-cell">${loan_data.Interest_rate}</td>`; //No I18N
  new_tr_ele.innerHTML = new_table_html;
  new_tr_ele.classList.add("crm-style-row"); //No I18N
  table_body.appendChild(new_tr_ele);
  //

  //table_obj.insertAdjacentElement('beforeend',new_table_html);	//No I18N
}
//loan account table population end

//
function populate_account_table(selected_account) {
  let table_id = "debit_card_op_table"; //No I18N
  let table_obj = document.getElementById(table_id);
  let table_body = table_obj.children[0];
  let table_rows = table_obj.children[0].children;

  //removing all the rows except header row
  //console.log('initial table is',table_obj,'table rows is',table_rows,"no of rows",table_rows.length);	//No I18N
  for (let i = 1; i < table_rows.length; i++) {
    //console.log('index',i,'table row',table_rows[i]);	//No I18N
    table_rows[i].remove();
    i--;
    //console.log("table after removing rows",table_obj);	//No I18N
  }
  //appending rows with elements from the json based on account selection
  let debit_cards = debit_card_json[`${selected_account}`.match(/\d+/)[0]];
  //console.log('debit cards',debit_cards,'selected account is',selected_account,'debit card json',debit_card_json);	//No I18N
  let new_table_html = ``;
  console.log(
    debit_card_json,
    `${selected_account}`.match(/\d+/)[0],
    `${selected_account}`
  );
  for (let i = 0; i < debit_cards.length; i++) {
    new_tr_ele = document.createElement("tr"); //No I18N
    if (debit_cards[i].status == "active") {
      //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${debit_cards[i].debit_card}</td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">Active</div></div></td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn debit-hotlist" onclick="confirm_blocking('${debit_cards[i].debit_card}')">Hotlist</div></div></td>`; //No I18N
    } else {
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${debit_cards[i].debit_card}</td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="inactive-status">Inactive</div></div></td>
      <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn debit-hotlist" onclick="confirm_blocking('${debit_cards[i].debit_card}')">Hotlist</div></div></td>`; //No I18N
    }
    new_tr_ele.classList.add("crm-style-row"); //No I18N
    table_body.appendChild(new_tr_ele);
  }
  //table_obj.insertAdjacentElement('beforeend',new_table_html);	//No I18N

}
//drop_select - debit card table loader
//drop_select2 - lien account table loader
//drop_select5 - mini statement
//drop_select3 - Loan account table loader
//drop_select4 - cheque book
//drop_select6 - Balance Inquiry
//drop_select7 - Standing Instruction
//drop_select8 - Term Deposit
//drop_select9 - Account Debit Freeze
//drop_select10 - Account transaction
//drop_select11 - Nominee
//drop_select12 - Cheque book Tracking
//drop_select13 - Debit card Tracking
function new_drop_select(selected_element,drop_down_select_id,drop_down_content_id) 
{
  currently_selected_drop_elem=selected_element;
  console.log("DROP SELECT DAT",selected_element,drop_down_select_id,drop_down_content_id);
  if (drop_down_select_id == "drop-select") {
    drop_select(selected_element, drop_down_select_id, drop_down_content_id);
  } else if (drop_down_select_id == "cb-drop-select") {
    drop_select4(selected_element, drop_down_select_id, drop_down_content_id);
  } else if (drop_down_select_id == "lien-drop-select") {
    console.log("lien drop down selected");
    drop_select2(selected_element, drop_down_select_id, drop_down_content_id);
  } else if (drop_down_select_id == "loan-drop-select") {
    drop_select3(selected_element, drop_down_select_id, drop_down_content_id);
  } else if (drop_down_select_id == "ms-drop-select") {
    drop_select5(selected_element, drop_down_select_id, drop_down_content_id);
  } else if (drop_down_select_id == "bi-drop-select") {
    drop_select6(selected_element, drop_down_select_id, drop_down_content_id);
  } else if (drop_down_select_id == "si-drop-select") {
    drop_select7(selected_element, drop_down_select_id, drop_down_content_id);
  } else if (drop_down_select_id == "td-drop-select") {
    drop_select8(selected_element, drop_down_select_id, drop_down_content_id);
  }else if (drop_down_select_id == "freeze-drop-select") {
    drop_select9(selected_element, drop_down_select_id, drop_down_content_id);
  }else if (drop_down_select_id == "acc-transaction-drop-select") {
    drop_select10(selected_element, drop_down_select_id, drop_down_content_id);
  }else if (drop_down_select_id == "nominee-drop-select") {
    drop_select11(selected_element, drop_down_select_id, drop_down_content_id);
  }else if (drop_down_select_id == "cheque_book_tracking-drop-select") {
    drop_select12(selected_element, drop_down_select_id, drop_down_content_id);
  }else if (drop_down_select_id == "debit_card_tracking-drop-select") {
    drop_select13(selected_element, drop_down_select_id, drop_down_content_id);
  }
}

function date_formatter(date_str) {
  return date_str.replace(/-/g, "/");
}
function acc_transaction_api_callback(data) {
  if (data == "") {
    show_fallback(
      "No Data Found",
      "acc_transaction_loader_table",
      "acc_transaction_error_div"
    );
    return;
  }
}
function cheque_book_api_callback(data) {
  console.log("inside cheque book api call back ", data);
  // data = JSON.parse(data);
  if (data == "") {
    show_fallback(
      "No data found in Finacle",
      "cheque_book_loader_table",
      "cheque_book_error_div"
    );

    //change for: 'sending logs' feature
    api_logs["cheque book inquiry API"]=data;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["cheque book inquiry API"]-1)),"cheque book inquiry API");
    return;
  }
  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "cheque_book_loader_table",
      "cheque_book_error_div"
    );
    // write error log module
    write_to_error_log_module("cheque book API",error);
    //change for: 'sending logs' feature
    api_logs["cheque book inquiry API"]=data;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["cheque book inquiry API"]-1)),"cheque book inquiry API");  
    return;
  }
  let logs=data;
  data = data.details.output;
  data = JSON.parse(data);
  console.log("inside API call back", data);

  let status = data.status;
  if (data.data.SuccessOrFailure == "N") {
    show_fallback(
      "Error from Finacle: "+data.data.Error_1,
      "cheque_book_loader_table",
      "cheque_book_error_div"
    );
    //change for: 'sending logs' feature
    api_logs["cheque book inquiry API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["cheque book inquiry API"]-1)),"cheque book inquiry API");
    return;
  }
  if (status == "00") {
    //success
    //let d=data.data;
    let lien_data = data.data;
    let check_details = [];
    if (lien_data.hasOwnProperty("ChqDetails")) {
      check_details = lien_data.ChqDetails;
    }
    let success = lien_data.SuccessOrFailure;
    if (success != "Y") {
      cheque_book_api_fallback("error");
      console.log("error in cheque book API callback", data);
    
      //change for: 'sending logs' feature
      api_logs["cheque book inquiry API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["cheque book inquiry API"]-1)),"cheque book inquiry API");
    // write error log module
    write_to_error_log_module("Cheque Book API",logs);
      return;
    }
    // let lien_total = lien_data.totalLienAmount;

    //
    if (!lien_data.hasOwnProperty("ChqDetails")) {
      show_fallback(
        "No Data Found",
        "cheque_book_loader_table",
        "cheque_book_error_div"
      );
      //change for: 'sending logs' feature
      api_logs["cheque book inquiry API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["cheque book inquiry API"]-1)),"cheque book inquiry API");
      return;
    }
    let table_id = "cheque_book_op_table"; //No I18N
    let table_obj = document.getElementById(table_id);
    let table_body = table_obj.children[0];
    let table_rows = table_body.children;
    //removing all the rows except header row
    for (let i = 1; i < table_rows.length; i++) {
      table_rows[i].remove();
      i--;
    }
    let ind = 0;
    console.log("CHQ DATA FOR DROP SELECT",lien_data);
    //create table rows for each element in check_details variable
    if (check_details.hasOwnProperty("BEGIN_CHQ_NUM")) {
      new_tr_ele = document.createElement("tr"); //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${1}</td>
      <td class="crm-style-cell  blue-font clickable" onclick="cheque_status_on_click('${lien_data.ChqDetails.BEGIN_CHQ_NUM}','${lien_data.ChqDetails.CHQ_NUM_OF_LVS}')">${lien_data.ChqDetails.BEGIN_CHQ_NUM}</td>
      <td class="crm-style-cell">${lien_data.ChqDetails.CHQ_NUM_OF_LVS}</td>
      <td class="crm-style-cell">${date_formatter(lien_data.ChqDetails.CHQ_ISSU_DATE)}</td>
      <td class="crm-style-cell">${lien_data.ChqDetails.PASSED}</td>
      <td class="crm-style-cell">${lien_data.ChqDetails.ISSUED}</td>
      <td class="crm-style-cell">${lien_data.ChqDetails.UNUSED}</td>
      <td class="crm-style-cell">${lien_data.ChqDetails.STOPPED}</td>
      <td class="crm-style-cell">${lien_data.ChqDetails.DESTROYED}</td>
      <td class="crm-style-cell">${lien_data.ChqDetails.RETURNED}</td>`; //No I18N
      new_tr_ele.classList.add("crm-style-row"); //No I18N
      table_body.appendChild(new_tr_ele);
    }
    else if (check_details.length == 0) {
      new_tr_ele = document.createElement("tr"); //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>`; //No I18N
      new_tr_ele.classList.add("crm-style-row"); //No I18N
      table_body.appendChild(new_tr_ele);
    }else{
    for (let d of check_details) {
      new_tr_ele = document.createElement("tr"); //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${++ind}</td>
          <td class="crm-style-cell  blue-font clickable" onclick="cheque_status_on_click('${d.BEGIN_CHQ_NUM}','${d.CHQ_NUM_OF_LVS}')">${d.BEGIN_CHQ_NUM}</td>
          <td class="crm-style-cell">${d.CHQ_NUM_OF_LVS}</td>
          <td class="crm-style-cell">${date_formatter(d.CHQ_ISSU_DATE)}</td>
          <td class="crm-style-cell">${d.PASSED}</td>
          <td class="crm-style-cell">${d.ISSUED}</td>
          <td class="crm-style-cell">${d.UNUSED}</td>
          <td class="crm-style-cell">${d.STOPPED}</td>
          <td class="crm-style-cell">${d.DESTROYED}</td>
          <td class="crm-style-cell">${d.RETURNED}</td>`; //No I18N
      new_tr_ele.classList.add("crm-style-row"); //No I18N
      table_body.appendChild(new_tr_ele);
    }
  }
    

    //populate_lien_account_table2(d);
    document
      .getElementById("cheque_book_loader_table")
      .classList.add("hide_tab_imp");
    document.getElementById("cheque_book_op_table").classList.remove("hide");
    
    //change for: 'sending logs' feature
    api_logs["cheque book inquiry API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["cheque book inquiry API"]-1)),"cheque book inquiry API");
  } else {
    //show error msg on the screen

    // write error log module
    write_to_error_log_module("Cheque Book API",logs);
    cheque_book_api_fallback("error");

    //change for: 'sending logs' feature
    api_logs["cheque book inquiry API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["cheque book inquiry API"]-1)),"cheque book inquiry API");
  }
}

function cheque_book_api_fallback(err) {
  //Show error msg on the screen
  console.log(err);
  document
    .getElementById("cheque_book_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("cheque_book_error_div").innerHTML = err;
  document
    .getElementById("cheque_book_error_div")
    .classList.remove("hide_tab_imp");
}

function standing_instructions_api_callback(data) {
  console.log("STANDING INST :: ", data);
  // data = JSON.parse(data);
  // console.log(data);

  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "standing_instructions_loader_table",
      "standing_instructions_error_div"
    );

    // write error log module
    write_to_error_log_module("Standing Instructions API",data);

    //change for: 'sending logs' feature
    api_logs["Standing instructions API"]=data;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Standing instructions API"]-1)),"Standing instructions API");
    return;
  }
  if (data == "" || data == null) {
    show_fallback(
      "No data Found in Finacle",
      "standing_instructions_loader_table",
      "standing_instructions_error_div"
    );

    // write error log module
    write_to_error_log_module("Standing Instructions API",data);

    //change for: 'sending logs' feature
    api_logs["Standing instructions API"]=data;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Standing instructions API"]-1)),"Standing instructions API");
    return;
  }
  let logs=data;
  data = data.details.output;
  // console.log(data);
  data = JSON.parse(data);
  console.log(data);
  if (data.data.StandingInstructionsInquiryList.SuccessOrFailure == "N") {
    show_fallback(
      "Error from Finacle: "+data.data.StandingInstructionsInquiryList.replyMessage ||
        "Error from Finacle: "+data.data.StandingInstructionsInquiryList.Error_1,
      "standing_instructions_loader_table",
      "standing_instructions_error_div"
    );

    // write error log module
    write_to_error_log_module("Standing Instructions API",logs);

    //change for: 'sending logs' feature
    api_logs["Standing instructions API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Standing instructions API"]-1)),"Standing instructions API");
    return;
    
  }
  console.log(data);

  data =
    data.data.StandingInstructionsInquiryList.SubStandingInstructionDetails ||
    "";

  console.log("inside standing instruction API call back", data);
  // let status = data.status;
  // if (status == "00") {

  // let d = data.data;
  //remove existing table rows
  let table_id = "standing_instructions_op_table"; //No I18N
  let table_obj = document.getElementById(table_id);
  let table_body = table_obj.children[0];
  let table_rows = table_body.children;
  //removing all the rows except header row
  for (let i = 1; i < table_rows.length; i++) {
    table_rows[i].remove();
    i--;
  }
  if (data == "") {
    show_fallback(
      "No Data Found",
      "standing_instructions_loader_table",
      "standing_instructions_error_div"
    );
    //change for: 'sending logs' feature
    api_logs["Standing instructions API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Standing instructions API"]-1)),"Standing instructions API");
    return;
  }
  for (let index = 0; index < data.length; index++) {
    const d = data[index];
    console.log(d);
    new_tr_ele = document.createElement("tr"); //No I18N
    new_tr_ele.innerHTML = `
            <td class="crm-style-cell">${d.AccountName}</td>
            <td class="crm-style-cell">${d.AccountNumber}</td>
            <td class="crm-style-cell">${d.TransactionAmount}</td>
            <td class="crm-style-cell">${d.TransactionType}</td>
            <td class="crm-style-cell">${d.SINUM}</td>
            `;
    new_tr_ele.classList.add("crm-style-row"); //No I18N
    table_body.appendChild(new_tr_ele);
  }
  // new_tr_ele = document.createElement("tr"); //No I18N
  // new_tr_ele.innerHTML = `
  //       <td class="crm-style-cell">${d.AccountName}</td>
  //       <td class="crm-style-cell">${d.AccountNumber}</td>
  //       <td class="crm-style-cell">${d.TransactionAmount}</td>
  //       <td class="crm-style-cell">${d.TransactionType}</td>
  //       <td class="crm-style-cell">${d.SINUM}</td>
  //       `;
  // new_tr_ele.classList.add("crm-style-row"); //No I18N
  // table_body.appendChild(new_tr_ele);

  

  document
    .getElementById("standing_instructions_loader_table")
    .classList.add("hide_tab_imp");
  document
    .getElementById("standing_instructions_op_table")
    .classList.remove("hide");
  // }

  //change for: 'sending logs' feature
  api_logs["Standing instructions API"]=logs;
  //send log prompt trigger
  append_send_log("send_log_container_"+String((send_log_msg_ids["Standing instructions API"]-1)),"Standing instructions API");
}
function term_deposit_api_callback(data) {
  console.log(data);
  // data = JSON.parse(data);
  
  console.log(data);
  if (data == "" || data == null) {
    show_fallback(
      "No data found in Finacle",
      "term_deposit_loader_table",
      "term_deposit_error_div"
    );

    //change for: 'sending logs' feature
    api_logs["Term deposit API"]=data;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Term deposit API"]-1)),"Term deposit API");
    return;
  }
  let logs=data;
  data = data.details.output;
  data = JSON.parse(data);
  if (data.data.SuccessOrFailure == "N") {
    show_fallback(
      "Error from Finacle: "+data.data.Error_1,
      "term_deposit_loader_table",
      "term_deposit_error_div"
    );

    // write error log module
    write_to_error_log_module("Term Deposit API",logs);
    //change for: 'sending logs' feature
    api_logs["Term deposit API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Term deposit API"]-1)),"Term deposit API");
    return;
  }
  console.log("inside term deposit API call back", data);
  let status = data.status;
  if (status == "00") {
    let d = data.data;
    //remove existing table rows
    let table_id = "term_deposit_op_table"; //No I18N
    let table_obj = document.getElementById(table_id);
    let table_body = table_obj.children[0];
    let table_rows = table_body.children;
    //removing all the rows except header row
    for (let i = 1; i < table_rows.length; i++) {
      table_rows[i].remove();
      i--;
    }
    new_tr_ele = document.createElement("tr"); //No I18N
    new_tr_ele.innerHTML = `
          <td class="crm-style-cell">${d.RateOfInterest}</td>
          <td class="crm-style-cell">${d.Balance}</td>
          <td class="crm-style-cell">${d.AccountNumber}</td>
          `;
    new_tr_ele.classList.add("crm-style-row"); //No I18N
    table_body.appendChild(new_tr_ele);
    document
      .getElementById("term_deposit_loader_table")
      .classList.add("hide_tab_imp");
    document.getElementById("term_deposit_op_table").classList.remove("hide");
    
    //change for: 'sending logs' feature
    api_logs["Term deposit API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Term deposit API"]-1)),"Term deposit API");
  }
}
function balance_inquiry_api_callback(data) {
  // data = JSON.parse(data);
  if (data == null || data == "") {
    show_fallback(
      "No data Found",
      "balance_inquiry_loader_table",
      "balance_inquiry_error_div"
    );
    
    //change for: 'sending logs' feature
    api_logs["Balance inquiry API"]=data;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Balance inquiry API"]-1)),"Balance inquiry API");
    return;
  }
  let logs=data;
  data = data.details.output;
  // console.log(data);
  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "balance_inquiry_loader_table",
      "balance_inquiry_error_div"
    );

    // write error log module
    write_to_error_log_module("Balance Inquiry API",logs);

    //change for: 'sending logs' feature
    api_logs["Balance inquiry API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Balance inquiry API"]-1)),"Balance inquiry API");

    return;
  }
  
  data = JSON.parse(data);
  if (data.data.SuccessOrFailure == "N") {
    show_fallback(
      "Error from Finacle: "+data.data.Error_1,
      "balance_inquiry_loader_table",
      "balance_inquiry_error_div"
    );

    // write error log module
    write_to_error_log_module("Balance Inquiry API",logs);

    //change for: 'sending logs' feature
    api_logs["Balance inquiry API"]=logs;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Balance inquiry API"]-1)),"Balance inquiry API");

    return;
  }
  console.log("inside balance inquiry API call back", data);
  let status = data.status;
  if (status == "00") {
    let d = data.data;
    //remove existing table rows
    let table_id = "balance_inquiry_op_table"; //No I18N
    let table_obj = document.getElementById(table_id);
    let table_body = table_obj.children[0];
    let table_rows = table_body.children;
    //removing all the rows except header row
    for (let i = 1; i < table_rows.length; i++) {
      table_rows[i].remove();
      i--;
    }
    new_tr_ele = document.createElement("tr"); //No I18N
    new_tr_ele.innerHTML = `
          <td class="crm-style-cell">${d.ACCOUNT_BALANCE}</td>
          <td class="crm-style-cell">${d.CLEAR_BALANCE}</td>
          <td class="crm-style-cell">${d.EFFECTIVE_AVAILABLE_BALANCE}</td>
          <td class="crm-style-cell">${d.LIEN_AMOUNT}</td>
          <td class="crm-style-cell">${d.UNCLEAR_BALANCE}</td>
          `;
    new_tr_ele.classList.add("crm-style-row"); //No I18N
    table_body.appendChild(new_tr_ele);
    document
      .getElementById("balance_inquiry_loader_table")
      .classList.add("hide_tab_imp");
    document
      .getElementById("balance_inquiry_op_table")
      .classList.remove("hide");

      //change for: 'sending logs' feature
      api_logs["Balance inquiry API"]=logs;
      //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Balance inquiry API"]-1)),"Balance inquiry API");
  }

  /*

    //remove existing table rows
    let table_id='mini_statement_op_table';	//No I18N
      let table_obj=document.getElementById(table_id);
      let table_body=table_obj.children[0];
      let table_rows=table_body.children;
      //removing all the rows except header row
      for(let i=1;i<table_rows.length;i++)
      {
        table_rows[i].remove();
        i--;
      }
    //populating table
    let lien_json=data.data;
    for(let d of lien_json)
        {
          let dorc='Credit';
          if(d.drCRIndicator=='D')
          {
            dorc='Debit';
          }
          new_tr_ele=document.createElement("tr");	//No I18N
          new_tr_ele.innerHTML=`<td class="crm-style-cell">${d.tranId}</td>
          <td class="crm-style-cell">${d.tranDate}</td>
          <td class="crm-style-cell">${d.serialNo}</td>
          <td class="crm-style-cell">${d.tranType}</td>
          <td class="crm-style-cell">${d.tranSubType}</td>
          <td class="crm-style-cell">${dorc}</td>
          <td class="crm-style-cell">${d.tranAmount}</td>
          <td class="crm-style-cell">${d.tranParticulars}</td>
          <td class="crm-style-cell">${d.balAfterTran}</td>
          `;	
          new_tr_ele.classList.add('crm-style-row');	//No I18N
          table_body.appendChild(new_tr_ele);
        }
      //
      document.getElementById('mini_statement_loader_table').classList.add('hide_tab_imp');
      document.getElementById('mini_statement_op_table').classList.remove('hide');
     */
}

function show_fallback(err, loader_id, msg_id) {
  //function for showing the API error
  console.log("inside show fallback", err);

  document.getElementById(loader_id).classList.add("hide_tab_imp"); //No I18N

  let error =
    "There was an error while executing the action. Please check the Account Number & Cheque Number and try again."; //No I18N
  if (err == "") {
    err = error;
  }
  document.getElementById(msg_id).style.display = "flex"; //No I18N
  if (err == "CARD_NOT_AVAILABLE") {
    document.getElementById(msg_id).innerHTML = "CARD NOT AVAILABLE";
  } else if (err != "Technical Error") {
    document.getElementById(msg_id).innerHTML = err;
  }else{
    document.getElementById(msg_id).innerHTML = err;
  }
  // document.getElementById(msg_id).innerHTML = err;
  document.getElementById(msg_id).classList.remove("hide_tab_imp"); //No I18N
  document.getElementById(msg_id).classList.remove("hide"); //No I18N
}

function mini_statement_api_callback(data) {
  // data = JSON.parse(data);
  console.log("Mini-statement response",data);
  try
  {
    if (data == "" || data == null) {
      show_fallback(
        "No data Found",
        "mini_statement_loader_table",
        "mini_statement_error_div"
      );
      write_to_error_log_module("Mini-statement API",data);
      //change for: 'sending logs' feature
      api_logs["Mini-Statement API"]=data;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Mini-Statement API"]-1)),"Mini-Statement API");
      return;
    }
    let logs="";
    logs=data;
    data = data.details.output;
    if (data.code == "114") {
      show_fallback(
        "Error from Finacle: "+data.status,
        "mini_statement_loader_table",
        "mini_statement_error_div"
      );
      write_to_error_log_module("Mini-statement API",logs);
      //change for: 'sending logs' feature
      api_logs["Mini-Statement API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Mini-Statement API"]-1)),"Mini-Statement API");

      return;
    }
    
    data = JSON.parse(data);
    if (data.responseCode == "114") {
      show_fallback(
        "Error from Finacle: "+data.status,
        "mini_statement_loader_table",
        "mini_statement_error_div"
      );
      write_to_error_log_module("Mini-statement API",logs);
      //change for: 'sending logs' feature
      api_logs["Mini-Statement API"]=logs;
      //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Mini-Statement API"]-1)),"Mini-Statement API");
      return;
    }
    if (data.responseCode == "908") {
      show_fallback(
        "Technical Error",
        "mini_statement_loader_table",
        "mini_statement_error_div"
      );
      write_to_error_log_module("Mini-statement API",logs);
      //change for: 'sending logs' feature
      api_logs["Mini-Statement API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Mini-Statement API"]-1)),"Mini-Statement API");

      return;
    }
    if (data.responseCode == "904") {
      show_fallback(
        "No Transaction found",
        "mini_statement_loader_table",
        "mini_statement_error_div"
      );
        write_to_error_log_module("Mini-statement API",logs);
      //change for: 'sending logs' feature
      api_logs["Mini-Statement API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Mini-Statement API"]-1)),"Mini-Statement API");
      return;
    }
    if (data.responseCode == "119") {
      show_fallback(
        `Technical Error from Finacle: ${data.status}`,
        "mini_statement_loader_table",
        "mini_statement_error_div"
      );
      write_to_error_log_module("Mini-statement API",logs);
      //change for: 'sending logs' feature
      api_logs["Mini-Statement API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Mini-Statement API"]-1)),"Mini-Statement API");
      return;
    }
    console.log("inside mini statement API call back", data);
    let status = data.status;
    //remove existing table rows
    let table_id = "mini_statement_op_table"; //No I18N
    let table_obj = document.getElementById(table_id);
    let table_body = table_obj.children[0];
    let table_rows = table_body.children;
    //removing all the rows except header row
    for (let i = 1; i < table_rows.length; i++) {
      table_rows[i].remove();
      i--;
    }
    //populating table
    let lien_json = data.data;
  
    console.log("lien json inside mini statement call back", lien_json);
    if (lien_json.length == 0) {
      new_tr_ele = document.createElement("tr"); //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">-</td>
            <td class="crm-style-cell">-</td>
            <td class="crm-style-cell">-</td>
            <td class="crm-style-cell">-</td>
            <td class="crm-style-cell">-</td>
            <td class="crm-style-cell">-</td>
            <td class="crm-style-cell">-</td>
            <td class="crm-style-cell">-</td>
            <td class="crm-style-cell">-</td>
            `;
      new_tr_ele.classList.add("crm-style-row"); //No I18N
      table_body.appendChild(new_tr_ele);
    }
    for (let d of lien_json) {
      let dorc = "Credit";
      if (d.drCRIndicator == "D") {
        dorc = "Debit";
      }
      new_tr_ele = document.createElement("tr"); //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${d.tranId}</td>
            <td class="crm-style-cell">${d.tranDate}</td>
            <td class="crm-style-cell">${d.tranType}/${d.tranSubType}</td>
            <td class="crm-style-cell">${dorc == "Debit"?d.tranAmount:""}</td>
            <td class="crm-style-cell">${dorc == "Credit"?d.tranAmount:""}</td>
            <td class="crm-style-cell">${d.tranParticulars}</td>
            <td class="crm-style-cell">${d.balAfterTran}</td>
            `;
      new_tr_ele.classList.add("crm-style-row"); //No I18N
      table_body.appendChild(new_tr_ele);
    }
    //
    document
      .getElementById("mini_statement_loader_table")
      .classList.add("hide_tab_imp");
    document.getElementById("mini_statement_op_table").classList.remove("hide");
    
    //change for: 'sending logs' feature
    api_logs["Mini-Statement API"]=logs;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Mini-Statement API"]-1)),"Mini-Statement API");

  }
  catch(e)
  {
    show_fallback(
      "Oops, something went wrong!",
      "mini_statement_loader_table",
      "mini_statement_error_div"
    );
    try
      {
        write_to_error_log_module("Mini-statement API",logs);
      }
      catch(e)
      {
        write_to_error_log_module("Mini-statement API",data);
      }
    //change for: 'sending logs' feature
    api_logs["Mini-Statement API"]=logs||data;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Mini-Statement API"]-1)),"Mini-Statement API");
  }
}
function loan_account_api_callback(data) {
  document
    .getElementById("loan_account_error_div")
    .classList.add("hide_tab_imp"); //No I18N
  if (data == "") {
    show_fallback(
      "No associated Account.",
      "loan_account_loader_table",
      "loan_account_error_div"
    );

    //change for: 'sending logs' feature
    api_logs["Loan Inquiry API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Loan Inquiry API"]-1)),"Loan Inquiry API");

    return;
  }
  // data = JSON.parse(data);
  console.log("LOAN ACCOUNT ::", data);
  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "loan_account_loader_table",
      "loan_account_error_div"
    );

    // write error log module
    write_to_error_log_module("Loan Account API",data);

    //change for: 'sending logs' feature
    api_logs["Loan Inquiry API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Loan Inquiry API"]-1)),"Loan Inquiry API");

    return;
  }

  let status = JSON.parse(data.details.output);
  console.log(status);
  if (status.data.APIStatus == "F") {
    show_fallback(
      "Error from Finacle: "+status.data.StatusDesc,
      "loan_account_loader_table",
      "loan_account_error_div"
    );

    // write error log module
    write_to_error_log_module("Loan Account API",data);

    //change for: 'sending logs' feature
    api_logs["Loan Inquiry API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Loan Inquiry API"]-1)),"Loan Inquiry API");
    return;
  }
  if (status.data.CRMLoanAcctDetails.successorfailure == "F") {
    show_fallback(
      "Error from Finacle: "+status.data.CRMLoanAcctDetails.Message.slice(
        7,
        status.data.CRMLoanAcctDetails.Message.length
      ),
      "loan_account_loader_table",
      "loan_account_error_div"
    );

    // write error log module
    write_to_error_log_module("Loan Account API",data);

    //change for: 'sending logs' feature
    api_logs["Loan Inquiry API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Loan Inquiry API"]-1)),"Loan Inquiry API");

    return;
  }
  if (status.data.hasOwnProperty("Error")) {
    //No I18N
    document
      .getElementById("loan_account_loader_table")
      .classList.add("hide_tab_imp"); //No I18N
    document
      .getElementById("loan_account_error_table")
      .classList.remove("hide_tab_imp"); //No I18N

    // write error log module
    write_to_error_log_module("Loan Account API",data);

    //change for: 'sending logs' feature
    api_logs["Loan Inquiry API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Loan Inquiry API"]-1)),"Loan Inquiry API");

    return;
  }
  d = parse_loan_acc_js(data);
  populate_loan_account_table(
    d
  ); /*let d_c=parse_debit_Card_API(data);/*d_c=parse_debit_card_status(d_c);*/ /*populate_account_table2(d_c);*/
  
  
  document
    .getElementById("loan_account_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("loan_account_op_table").classList.remove("hide");
  document
    .getElementById("loan_account_error_div")
    .classList.add("hide_tab_imp");

    //change for: 'sending logs' feature
    api_logs["Loan Inquiry API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Loan Inquiry API"]-1)),"Loan Inquiry API");
}
function freeze_account_api_callback(data) {
  document
    .getElementById("freeze_acc_error_div")
    .classList.add("hide_tab_imp"); //No I18N
  if (data == "") {
    show_fallback(
      "No associated Account.",
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");

    return;
  }
  // data = JSON.parse(data);
  console.log("Freeze Acc ::", data);
  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );

    // write error log module
    // write_to_error_log_module("Account freeze API",data);

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");

    return;
  }

  let status = JSON.parse(data.details.output);
  console.log(status);
  if (status.data.APIStatus == "F") {
    show_fallback(
      status.data.StatusDesc,
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );

    // write error log module
    // write_to_error_log_module("Account freeze API",data);

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
    return;
  }
  d = parse_loan_acc_js(data);
  populate_loan_account_table(
    d
  ); /*let d_c=parse_debit_Card_API(data);/*d_c=parse_debit_card_status(d_c);*/ /*populate_account_table2(d_c);*/
  
  
  document
    .getElementById("freeze_acc_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("freeze_acc_op_table").classList.remove("hide");
  document
    .getElementById("freeze_acc_error_div")
    .classList.add("hide_tab_imp");

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
}
function cheque_book_tracking_api_callback(data) {
  document
    .getElementById("cheque_book_tracking_error_div")
    .classList.add("hide_tab_imp"); //No I18N
  if (data == "") {
    show_fallback(
      "No associated Account.",
      "cheque_book_tracking_loader_table",
      "cheque_book_tracking_error_div"
    );

    //change for: 'sending logs' feature
    // api_logs["Cheque Book Tracking API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Cheque Book Tracking API"]-1)),"Cheque Book Tracking API");

    return;
  }
  // data = JSON.parse(data);
  console.log("cheque_book_tracking ::", data);
  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "cheque_book_tracking_loader_table",
      "cheque_book_tracking_error_div"
    );

    // write error log module
    // write_to_error_log_module("Account freeze API",data);

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");

    return;
  }

  let status = JSON.parse(data.details.output);
  console.log(status);
  if (status.data.SuccessOrFailure == "N") {
    show_fallback(
      status.data.Error_1,
      "cheque_book_tracking_loader_table",
      "cheque_book_tracking_error_div"
    );

    // write error log module
    // write_to_error_log_module("Account freeze API",data);

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
    return;
  }
  d = parse_loan_acc_js(data);
  populate_loan_account_table(
    d
  ); /*let d_c=parse_debit_Card_API(data);/*d_c=parse_debit_card_status(d_c);*/ /*populate_account_table2(d_c);*/
  
  
  document
    .getElementById("cheque_book_tracking_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("cheque_book_tracking_op_table").classList.remove("hide");
  document
    .getElementById("cheque_book_tracking_error_div")
    .classList.add("hide_tab_imp");

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
}
function debit_card_tracking_api_callback(data) {
  document
    .getElementById("debit_card_tracking_error_div")
    .classList.add("hide_tab_imp"); //No I18N
  if (data == "") {
    show_fallback(
      "No associated Account.",
      "debit_card_tracking_loader_table",
      "debit_card_tracking_error_div"
    );

    //change for: 'sending logs' feature
    // api_logs["Debit Card Tracking API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Debit Card Tracking API"]-1)),"Debit Card Tracking API");

    return;
  }
  // data = JSON.parse(data);
  console.log("debit_card_tracking ::", data);
  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "debit_card_tracking_loader_table",
      "debit_card_tracking_error_div"
    );

    // write error log module
    // write_to_error_log_module("Account freeze API",data);

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");

    return;
  }

  let status = JSON.parse(data.details.output);
  console.log(status);
  if (status.data.SuccessOrFailure == "N") {
    show_fallback(
      status.data.Error_1,
      "debit_card_tracking_loader_table",
      "debit_card_tracking_error_div"
    );

    // write error log module
    // write_to_error_log_module("Account freeze API",data);

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
    return;
  }
  d = parse_loan_acc_js(data);
  // populate_loan_account_table(d); /*let d_c=parse_debit_Card_API(data);/*d_c=parse_debit_card_status(d_c);*/ /*populate_account_table2(d_c);*/
  
  
  document
    .getElementById("debit_card_tracking_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("debit_card_tracking_op_table").classList.remove("hide");
  document
    .getElementById("debit_card_tracking_error_div")
    .classList.add("hide_tab_imp");

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
}
function nominee_api_callback(data) {
  document
    .getElementById("nominee_error_div")
    .classList.add("hide_tab_imp"); //No I18N
  if (data == "") {
    show_fallback(
      "No associated Account.",
      "nominee_loader_table",
      "nominee_error_div"
    );

    //change for: 'sending logs' feature
    // api_logs["Nominee API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Nominee API"]-1)),"Nominee API");

    return;
  }
  // data = JSON.parse(data);
  console.log("Nominee ::", data);
  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "nominee_loader_table",
      "nominee_error_div"
    );

    // write error log module
    // write_to_error_log_module("Account freeze API",data);

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");

    return;
  }

  let status = JSON.parse(data.details.output);
  console.log(status);
  if (status.data.SuccessOrFailure == "N") {
    show_fallback(
      status.data.Error_1,
      "nominee_loader_table",
      "nominee_error_div"
    );

    // write error log module
    // write_to_error_log_module("Account freeze API",data);

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
    return;
  }
  d = parse_loan_acc_js(data);
  populate_loan_account_table(
    d
  ); /*let d_c=parse_debit_Card_API(data);/*d_c=parse_debit_card_status(d_c);*/ /*populate_account_table2(d_c);*/
  
  
  document
    .getElementById("nominee_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("nominee_op_table").classList.remove("hide");
  document
    .getElementById("nominee_error_div")
    .classList.add("hide_tab_imp");

    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
}
function format_Card_status(d){
  if (d == "Lost card") 
  {
    return "Blocked";
  }
  else if (d == "Open")
  {
    return "Active";
  }
  else
  {
    return d;
  }
}
function lien_api_callback(data) {
  // data = JSON.parse(data);
  if (data == "") {
    api_fallback("No associated Account.");

    //change for: 'sending logs' feature
    // api_logs["Lien API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Lien API"]-1)),"Lien Inquiry API");

    return;
  }
  if (data.code != "success") {
    api_fallback("Oops! Something went wrong.");

    // write error log module
    write_to_error_log_module("Lien API",data);

    //change for: 'sending logs' feature
    // api_logs["Lien API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Lien API"]-1)),"Lien Inquiry API");

    return;
  }
  let logs=data;
  data = data.details.output;
  // data=JSON.parse(data);
  try {
    if (data == undefined || data.code == "INVALID_DATA" ) {
      throw Error("INVALID_DATA");
    }
    else if(typeof data === 'string' && data.includes("exception"))
    {
      show_fallback(
        "API Connection timed-out",
        "lien_amount_loader_table",
        "lien_amount_error_div"
      );
      console.error("Error in Lien Inquiry API",data);
  
      // write error log module
      write_to_error_log_module("Lien API",logs);
  
      //change for: 'sending logs' feature
      // api_logs["Lien API"]=logs;
      //send log prompt trigger
  append_send_log("send_log_container_"+String((send_log_msg_ids["Lien API"]-1)),"Lien Inquiry API");
      
      return;
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "lien_amount_loader_table",
      "lien_amount_error_div"
    );

    // write error log module
    write_to_error_log_module("Lien API",logs);

    //change for: 'sending logs' feature
    // api_logs["Lien API"]=logs;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Lien API"]-1)),"Lien Inquiry API");
    
    return;
  }
  data = JSON.parse(data);
  console.log("inside API call back", data);

  let status = data.status;
  if (status == "00") {
    //success
    //let d=data.data;
    let lien_data = data.data;

    if(!Object.keys(lien_data).includes("lienDetails"))
    {
      api_fallback("No Lien Found.");


      //change for: 'sending logs' feature
      // api_logs["Lien API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Lien API"]-1)),"Lien Inquiry API");
      return;
    }

    if (lien_data.lienDetails.successorfailure == "F") {
      api_fallback(lien_data.lienDetails.StatusDesc==""?"Oops! Something went wrong. Please try again":"Error from Finacle: "+lien_data.lienDetails.StatusDesc);

    // write error log module
    write_to_error_log_module("Lien API",logs);

    //change for: 'sending logs' feature
    // api_logs["Lien API"]=logs;
    //send log prompt trigger
    append_send_log("send_log_container_"+String((send_log_msg_ids["Lien API"]-1)),"Lien Inquiry API");

      return;
    }
    //check for lien amount 0 condition
    if(Object.keys(lien_data).includes("lienAmt")&&(lien_data.lienAmt==0 || lien_data.lienAmt=="0"))
    {
      let lienAmt=lien_data.lienAmt;
      api_fallback("Lien Amount:"+lienAmt);
      //change for: 'sending logs' feature
      // api_logs["Lien API"]=logs;
      //send log prompt trigger
      append_send_log("send_log_container_"+String((send_log_msg_ids["Lien API"]-1)),"Lien Inquiry API");
    }
    else
    {
      let lien_total = lien_data.lienAmt;

    //
    let table_id = "lien_account_op_table"; //No I18N
    let table_obj = document.getElementById(table_id);
    let table_body = table_obj.children[0];
    let table_rows = table_body.children;
    //removing all the rows except header row
    for (let i = 1; i < table_rows.length; i++) {
      table_rows[i].remove();
      i--;
    }
    let lienDetails=lien_data.lienDetails;
    if(Array.isArray(lienDetails))
    {
      let lien_json = lienDetails;
        console.log(lien_data.lienDetails,"LEN ETAILS");
        for (let d of lien_json) {
          new_tr_ele = document.createElement("tr"); //No I18N
          new_tr_ele.innerHTML = `<td class="crm-style-cell">${d.lienamt}</td>
          <td class="crm-style-cell"><div class="cell-elem-container">${d.lienReasonCode}</div></td>
          <td class="crm-style-cell">${d.lienReasonDescription}</td>`; //No I18N
          new_tr_ele.classList.add("crm-style-row"); //No I18N
          table_body.appendChild(new_tr_ele);
        }
    }
    else
    {
      lien_total=lienDetails.lienamt;
      let lienReasonCode=lienDetails.lienReasonCode;
      let lienReasonDescription=lienDetails.lienReasonDescription;
      new_tr_ele = document.createElement("tr"); //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${lien_total}</td>
      <td class="crm-style-cell"><div class="cell-elem-container">${lienReasonCode}</div></td>
      <td class="crm-style-cell">${lienReasonDescription}</td>`; //No I18N
      new_tr_ele.classList.add("crm-style-row"); //No I18N
      table_body.appendChild(new_tr_ele);
    }
    
    }
    /*
    if (
      lien_data.lienDetails != null &&
      lien_data.lienDetails.SuccessOrFailure == "N"
    ) {
      api_fallback("Error from Finacle: "+lien_data.lienDetails.Error_1);

    // write error log module
    write_to_error_log_module("Lien API",logs);

    //change for: 'sending logs' feature
    api_logs["Lien API"]=logs;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Lien API"]-1)),"Lien API");

      return;
    }
    */
    

    /*
    if (lien_total == 0) {
      //populate 0 in the lien amount table

      //appending rows with elements from the json based on account selection
      //console.log('debit cards',debit_cards,'selected account is',selected_account,'debit card json',lien_account_card_json);	//No I18N
      new_tr_ele = document.createElement("tr"); //No I18N
      new_tr_ele.innerHTML = `<td class="crm-style-cell">${lien_total}</td>
    <td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">Active</div></div></td>
    <td class="crm-style-cell">-</td>`; //No I18N
      new_tr_ele.classList.add("crm-style-row"); //No I18N
      table_body.appendChild(new_tr_ele);
      //
    } else {
      //populate the lien amounts one by one in the lien amount table
      if(lien_data.hasOwnProperty("lienDetails"))
      {
        let lien_json = [lien_data.lienDetails.lienDetails];
        console.log(lien_data.lienDetails,"LEN ETAILS");
        for (let d of lien_json) {
          new_tr_ele = document.createElement("tr"); //No I18N
          new_tr_ele.innerHTML = `<td class="crm-style-cell">${d.LienAmount}</td>
          <td class="crm-style-cell"><div class="cell-elem-container">${d.LienReasonCode}</div></td>
          <td class="crm-style-cell">${d.LienRemarks}</td>`; //No I18N
          new_tr_ele.classList.add("crm-style-row"); //No I18N
          table_body.appendChild(new_tr_ele);
      }
      }
      else
      {
          new_tr_ele = document.createElement("tr"); //No I18N
          new_tr_ele.innerHTML = `<td class="crm-style-cell">${lien_total}</td>
          <td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">Active</div></div></td>
          <td class="crm-style-cell">-</td>`; //No I18N
          new_tr_ele.classList.add("crm-style-row"); //No I18N
          table_body.appendChild(new_tr_ele);
      }
      
    }
    */
    //populate_lien_account_table2(d);

    


    document
      .getElementById("lien_amount_loader_table")
      .classList.add("hide_tab_imp");
    document.getElementById("lien_account_op_table").classList.remove("hide");
  } else {
    //show error msg on the screen
    api_fallback(data.errorMsg?data.errorMsg:"error");

    // write error log module
    write_to_error_log_module("Lien API",logs);
  }
  //change for: 'sending logs' feature
  // api_logs["Lien API"]=logs;
  //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Lien API"]-1)),"Lien Inquiry API");
}
function fetch_debit_callback(data) {
  // data = JSON.parse(data);
  if (data == "") {
    show_fallback(
      "No data found in Finacle",
      "debit_card_loader_table",
      "debit_card_error_div"
    );

    //change for: 'sending logs' feature
    api_logs["Fetch debit card API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Fetch debit card API"]-1)),"Fetch debit card API");

    return;
  }

  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "debit_card_loader_table",
      "debit_card_error_div"
    );
    // write error log module
    write_to_error_log_module("Fetch debit card API",data);

    //change for: 'sending logs' feature
    api_logs["Fetch debit card API"]=data;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Fetch debit card API"]-1)),"Fetch debit card API");

    return;
  }

  let logs=data;
  data = data.details.output;
  data = JSON.parse(data);
  console.log("FETCH DEBIT DATA ::", data);
  try {
    if (data.data.statusCode == "F") {
      show_fallback(
        "Error from Finacle: "+data.data.statusDesc,
        "debit_card_loader_table",
        "debit_card_error_div"
      );
    //change for: 'sending logs' feature
    api_logs["Fetch debit card API"]=logs;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Fetch debit card API"]-1)),"Fetch debit card API");

    return;
    }
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "debit_card_loader_table",
      "debit_card_error_div"
    );

    //change for: 'sending logs' feature
    api_logs["Fetch debit card API"]=logs;
    //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Fetch debit card API"]-1)),"Fetch debit card API");

    return;
  }
  // data = JSON.parse(data);
  // console.log("inside API call back", data);

  let status = data.status;
  if (status == "00") {
    //success
    //let d=data.data;
    let lien_data = data.data;

    if (lien_data.statusCode != "0000") {
      api_fallback_debit_card(lien_data.statusDesc);
      //change for: 'sending logs' feature
      api_logs["Fetch debit card API"]=logs;
      //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Fetch debit card API"]-1)),"Fetch debit card API");

      return;
    }
    // if((lien_data.cardDetails!=null))
    // {
    //   api_fallback(lien_data.lienDetails.Error_1);
    //   return;
    // }
    let lien_total = lien_data.noOfCards;

    //
    let table_id = "debit_card_op_table"; //No I18N
    let table_obj = document.getElementById(table_id);
    let table_body = table_obj.children[0];
    let table_rows = table_body.children;
    //removing all the rows except header row
    for (let i = 1; i < table_rows.length; i++) {
      table_rows[i].remove();
      i--;
    }
    if (lien_total == 0) {
      // No Card found
      show_fallback(
        "No Debit Cards Associated",
        "debit_card_loader_table",
        "debit_card_op_table"
      );
      //change for: 'sending logs' feature
      api_logs["Fetch debit card API"]=logs;
      //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Fetch debit card API"]-1)),"Fetch debit card API");
      return;
      //
    } else {
      //populate the lien amounts one by one in the lien amount table
      console.log(lien_data.cardDetails);
      let lien_json = lien_data.cardDetails;
      for (let d of lien_json) {
        new_tr_ele = document.createElement("tr"); //No I18N
        let row = `<td class="crm-style-cell">${mask_str(d.cardNumber,"card")}</td>`;
        if (d.cardStatus == "Open") {
          row += `<td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">Active</div></div></td>
          <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn debit-hotlist" onclick="confirm_blocking('${d.cardNumber}',${d.a})">Hotlist</div></div></td>`;
        }
        else if(d.cardStatus == "Issued but not active")
        {
          row += `<td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">${d.cardStatus}</div></div></td>
          <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn debit-hotlist" onclick="confirm_blocking('${d.cardNumber}',${d.a})">Hotlist</div></div></td>`;          
        } 
        else {
          row +=
            `<td class="crm-style-cell"><div class="cell-elem-container"><div class="inactive-status">` +
            format_Card_status(d.cardStatus) +
            `</div></div></td>
            <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn-2">Hotlist</div></div></td>`;
        }

        // row += `<td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn" onclick="confirm_blocking(${d.cardNumber})">Hotlist</div></div></td>`;
        new_tr_ele.innerHTML = row;
        new_tr_ele.classList.add("crm-style-row"); //No I18N
        table_body.appendChild(new_tr_ele);
      }
    }
    //populate_lien_account_table2(d);

    

    document
      .getElementById("debit_card_loader_table")
      .classList.add("hide_tab_imp");
    document.getElementById("debit_card_op_table").classList.remove("hide");
  } else {
    //show error msg on the screen
    api_fallback_debit_card("Error");

    // write error log module
    write_to_error_log_module("Fetch debit card API",logs);
  }
  //change for: 'sending logs' feature
  api_logs["Fetch debit card API"]=logs;
  //send log prompt trigger
append_send_log("send_log_container_"+String((send_log_msg_ids["Fetch debit card API"]-1)),"Fetch debit card API");

}

function freeze_populate_data(data){
  let lien_data = [];

  // FILTER ACCOUNTS WITH SCHEME CODE CCA, ODA, SBA, CAA
  for (let i = 0; i < data.length; i++) {
    // const element = data[i];
    if (data[i].hasOwnProperty("A_c_Type")) {
      if (data[i].ACCT_CLS_FLG == "N"&&
      (data[i].A_c_Type == "Current" ||
      data[i].A_c_Type == "Saving" ||
      data[i].A_c_Type == "CAA" ||
      data[i].A_c_Type == "SBA")) {
        lien_data.push(data[i]);
      }
    }if (data[i].hasOwnProperty("A_c_Type_Current_Saving")) {
      if (data[i].Account_Close_Flag == "N" &&
       (data[i].A_c_Type_Current_Saving == "CCA" ||
      data[i].A_c_Type_Current_Saving == "ODA")) {
        lien_data.push(data[i]);
      }
    }
  }
  
  let lien_total = lien_data.length;
  console.log("FILTERED data", lien_data, lien_total);

  let table_id = "freeze_acc_op_table"; //No I18N
  let table_obj = document.getElementById(table_id);
  let table_body=null;
  if(table_obj.children.length>0)
  {
    table_body = table_obj.children[0];
    if(table_body.children.length>0)
    {
      let table_rows = table_body.children;
      console.log("TABLE ::",table_body, table_rows);
      //removing all the rows except header row
      for (let i = 1; i < table_rows.length; i++) {
        table_rows[i].remove();
        i--;
      }
    }
    
  }
  
  console.log("HERE");
  if (lien_total == 0) {
    // No Account found
    show_fallback(
      "No Accounts Found",
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );
    return;
    //
  } else {
    //populate the lien amounts one by one in the lien amount table
    console.log(lien_data);
    let lien_json = lien_data;
    for (let d of lien_json) {
      new_tr_ele = document.createElement("tr"); //No I18N
      //btn temporarily disabled
      let row = `<td class="crm-style-cell">${d.Name}</td>
      <td class="crm-style-cell">
      <div class="cell-elem-container">
      <div class="crm-style-btn acc-freeze-btn" style="padding:2%;" onclick="confirm_blocking_acc('${d.Name}')">Freeze</div>
      </div>
      </td>`;
      // if (d.Status == "S") {
      //   row += `<td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">Active</div></div></td>
      //   <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn" onclick="confirm_blocking(${d.cardNumber},${d.a})">Hotlist</div></div></td>`;
      // } else {
      //   row +=
      //     `<td class="crm-style-cell"><div class="cell-elem-container"><div class="inactive-status">` +
      //     format_Card_status(d.cardStatus) +
      //     `</div></div></td>
      //     <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn-2">Hotlist</div></div></td>`;
      // }

      // row += `<td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn" onclick="confirm_blocking(${d.cardNumber})">Hotlist</div></div></td>`;
      new_tr_ele.innerHTML = row;
      new_tr_ele.classList.add("crm-style-row"); //No I18N
      table_body.appendChild(new_tr_ele);
    }
  }
  //populate_lien_account_table2(d);
  document
    .getElementById("freeze_acc_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("freeze_acc_op_table").classList.remove("hide");
}

function api_fallback(err) {
  //Show error msg on the screen
  console.log("inside API call back", err);
  document
    .getElementById("lien_amount_loader_table")
    .classList.add("hide_tab_imp");
  document
    .getElementById("lien_amount_error_div")
    .classList.remove("hide_tab_imp");
  document.getElementById("lien_amount_error_div").innerHTML = err;
}

// drop select for cheque book
function drop_select4(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  selected_account = selected_element.textContent;
  //populate_lien_account_table(selected_element.textContent);
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  drop_down_count = drop_down_elements.length;
  //Start of API call
  document
    .getElementById("cheque_book_error_div")
    .classList.add("hide_tab_imp");
  document
    .getElementById("cheque_book_loader_table")
    .classList.remove("hide_tab_imp");
  document.getElementById("cheque_book_op_table").classList.add("hide");
  let lien_amt_url =
    "https://sandbox.zohoapis.in/crm/v2/functions/cheque_book_api/actions/execute?auth_type=apikey&zapikey=1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e&Acctno=" +
    selected_element.textContent.toString();
  var request = {
    url: lien_amt_url,
    // params: {
    //   Acctno: selected_element.textContent,
    // },
  };
  /*
  ZOHO.CRM.HTTP.get(request).then(
    (data) => {
      cheque_book_api_callback(data);
    },
    (err) => {
      cheque_book_api_fallback(err);
    }
  );
  */
  let p = {
    accno: selected_element.textContent.replace("\n", "").replaceAll(" ", ""),
  };
  curr_acc_no_for_cb=p.accno;
  console.log("p object for chequebook api call", p);
  call_crm_function("Chequebook_API", p)
    .then((data) => {
      console.log("data from cheque book api", data);
      cheque_book_api_callback(data);
    })
    .catch((err) => {
      cheque_book_api_fallback(err);

    // write error log module
    write_to_error_log_module("Cheque Book API",err);
    });
  //End of API call
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
function drop_select10(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  selected_account = selected_element.textContent;
  //populate_lien_account_table(selected_element.textContent);
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  drop_down_count = drop_down_elements.length;
  //Start of API call
  // document
  //   .getElementById("acc_transaction_error_div")
  //   .classList.add("hide_tab_imp");
  // document
  //   .getElementById("acc_transaction_loader_table")
  //   .classList.remove("hide_tab_imp");
  // document.getElementById("acc_transaction_op_table").classList.add("hide");
  // let p = {
  //   accno: selected_element.textContent.replace("\n", "").replaceAll(" ", ""),
  // };
  // console.log("p object for chequebook api call", p);
  // call_crm_function("Chequebook_API", p)
  //   .then((data) => {
  //     console.log("data from cheque book api", data);
  //     cheque_book_api_callback(data);
  //   })
  //   .catch((err) => {
  //     cheque_book_api_fallback(err);

    // write error log module
    // write_to_error_log_module("Cheque Book API",err);
    // });
  //End of API call
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
// end of Acc Transaction drop select
// drop select for mini statement
function drop_select5(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  //populate_lien_account_table(selected_element.textContent);
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  drop_down_count = drop_down_elements.length;
  //Start of API call
  document
    .getElementById("mini_statement_error_div")
    .classList.add("hide_tab_imp");
  document
    .getElementById("mini_statement_loader_table")
    .classList.remove("hide_tab_imp");
  document.getElementById("mini_statement_op_table").classList.add("hide");
  let lien_amt_url =
    "https://sandbox.zohoapis.in/crm/v2/functions/mini_statement_api/actions/execute?auth_type=apikey&zapikey=1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e&accountNumber=" +
    selected_element.textContent.toString();
  var request = {
    url: lien_amt_url,
    // params: {
    //   accountNumber: selected_element.textContent.toString(),
    // },
  };
  let acc_number = selected_element.textContent;
  acc_number = acc_number.replaceAll("\n", "").replaceAll(" ", "");
  let p = { accno: acc_number };
  console.log("selected account number is", p.accno);
  call_crm_function("Mini_Statement_API", p)
    .then((data) => {
      console.log("data from mini statement api", data);
      mini_statement_api_callback(data);
    })
    .catch((err) => {
      show_fallback(
        err,
        "mini_statement_loader_table",
        "mini_statement_error_div"
      );

    // write error log module
    write_to_error_log_module("Mini-statement API",err);
    });
  /*
  ZOHO.CRM.HTTP.get(request)
    .then((data) => {
      mini_statement_api_callback(data);
    })
    .catch((err) => {
      show_fallback(
        err,
        "mini_statement_loader_table",
        "mini_statement_error_div"
      );
    });
    */
  //End of API call
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
// end of mini statement drop select

//drop select for standing instructions
function drop_select7(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  //populate_lien_account_table(selected_element.textContent);
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  drop_down_count = drop_down_elements.length;
  //Start of API call
  document
    .getElementById("standing_instructions_error_div")
    .classList.add("hide_tab_imp");
  document
    .getElementById("standing_instructions_loader_table")
    .classList.remove("hide_tab_imp");
  document
    .getElementById("standing_instructions_op_table")
    .classList.add("hide");
  console.log("herer");
  let p = { accn: selected_element.textContent.match(/\d+/)[0] };
  call_crm_function("standing_instruction_api", p)
    .then((data) => {
      console.log("data from standing instruction api", data);
      standing_instructions_api_callback(data);
    })
    .catch((err) => {
      show_fallback(
        err,
        "standing_instructions_loader_table",
        "standing_instructions_error_div"
      );

    // write error log module
    write_to_error_log_module("Standing Instructions API",err);
    });

  // let standing_instr_url =
  //   "https://sandbox.zohoapis.in/crm/v2/functions/standing_instruction_api/actions/execute?auth_type=apikey&zapikey=1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e&Acctno=" +
  //   selected_element.textContent.toString();
  // var request = {
  //   url: standing_instr_url,
  //   // params: {
  //   //   Acctno: selected_element.textContent,
  //   // },
  // };
  // ZOHO.CRM.HTTP.get(request)
  //   .then((data) => {
  //     // standing instruction
  //     standing_instructions_api_callback(data);
  //   })
  //   .catch((err) => {
  //     show_fallback(
  //       err,
  //       "standing_instructions_loader_table",
  //       "standing_instructions_error_div"
  //     );
  //   });
  //End of API call
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
//end of standing instructions drop select

//drop select for term deposit
function drop_select8(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  console.log("TERM DEPOSIT ", );
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  //populate_lien_account_table(selected_element.textContent);
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  drop_down_count = drop_down_elements.length;
  //Start of API call
  document
    .getElementById("term_deposit_error_div")
    .classList.add("hide_tab_imp");
  document
    .getElementById("term_deposit_loader_table")
    .classList.remove("hide_tab_imp");
  document.getElementById("term_deposit_op_table").classList.add("hide");
  console.log(selected_element.textContent);
  // let term_deposit_url =
  //   "https://sandbox.zohoapis.in/crm/v2/functions/deposit_details_inquiry/actions/execute?auth_type=apikey&zapikey=1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e&Acctno=" +
  //   selected_element.textContent.toString();
  // console.log(term_deposit_url);
  // var request = {
  //   url: term_deposit_url,
  //   // params: {
  //   //   Acctno: selected_element.textContent,
  //   // },
  // };
  // ZOHO.CRM.HTTP.get(request)
  //   .then((data) => {
  //     // term deposit
  //     term_deposit_api_callback(data);
  //   })
  //   .catch((err) => {
  //     show_fallback(err, "term_deposit_loader_table", "term_deposit_error_div");
  //   });
  call_crm_function("deposit_inquiry_api", {
    accn: selected_element.textContent.match(/\d+/)[0],
  })
    .then((data) => {
      console.log("data from Term Deposit api", data);
      term_deposit_api_callback(data);
    })
    .catch((err) => {
      show_fallback(
        err,
        "standing_instructions_loader_table",
        "standing_instructions_error_div"
      );

    // write error log module
    write_to_error_log_module("Standing Instructions API",data);
    });
  //End of API call
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
// drop select for balance inquiry
function drop_select6(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  //populate_lien_account_table(selected_element.textContent);
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  drop_down_count = drop_down_elements.length;
  //Start of API call
  document
    .getElementById("balance_inquiry_error_div")
    .classList.add("hide_tab_imp");
  document
    .getElementById("balance_inquiry_loader_table")
    .classList.remove("hide_tab_imp");
  document.getElementById("balance_inquiry_op_table").classList.add("hide");
  // let lien_amt_url =
  //   "https://sandbox.zohoapis.in/crm/v2/functions/all_balance_api/actions/execute?auth_type=apikey&zapikey=1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e&Acctno=" +
  //   selected_element.textContent.toString();
  // var request = {
  //   url: lien_amt_url,
  //   // params: {
  //   //   Acctno: selected_element.textContent,
  //   // },
  // };
  // ZOHO.CRM.HTTP.get(request)
  //   .then((data) => {
  //     // balance inquiry
  //     balance_inquiry_api_callback(data);
  //   })
  //   .catch((err) => {
  //     show_fallback(
  //       err,
  //       "balance_inquiry_loader_table",
  //       "balance_inquiry_error_div"
  //     );
  //   });
  //End of API call

  console.log("inside balance inquiry",selected_element.textContent.match(/\d+/)[0]);
  call_crm_function('all_balance_inq_ubi_dc_360',{accno:selected_element.textContent.match(/\d+/)[0]})
  .then((data)=>{ 
    console.log("data from Balance Inquiry api",data);
    balance_inquiry_api_callback(data);
  }).catch((err)=>{
    show_fallback(
      err,
      "balance_inquiry_loader_table",
      "balance_inquiry_error_div"
    );
    // write error log module
    write_to_error_log_module("All Balance Inquiry API",err);
  });

    
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
function drop_select9(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  // populate_account_table(selected_element.textContent);
  console.log("Freeze Data");
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  document.getElementById("freeze_acc_error_div").classList.add("hide_tab_imp");
  document.getElementById("freeze_acc_op_table").classList.add("hide");
  document
    .getElementById("freeze_acc_loader_table")
    .classList.remove("hide_tab_imp");
  //API call
  // let request = {
  //   url: "https://sandbox.zohoapis.in/crm/v2/functions/customer360services/actions/execute", //No I18N
  //   params: {
  //     auth_type: "apikey", //No I18N
  //     zapikey:
  //       "1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e", //No I18N
  //     sat: "debitcard", //No I18N
  //     accountNumber: selected_element.textContent,
  //   },
  // };
  // document
  //   .getElementById("freeze_acc_loader_table")
  //   .classList.remove("hide_tab_imp"); //No I18N
  // document.getElementById("freeze_acc_op_table").classList.add("hide"); //No I18N

//   let request = {
// url: "https://ucrmapi.unionbankofindia.co.in/crm/v2/functions/debit_card_status_api/actions/execute?auth_type=apikey&zapikey=1003.446aab4478d33b36c8adb42a13894738.9e8fe0b1aa213ecb37f4e472ca4392ba", //No I18N
//     params: {
//       accn: selected_element.textContent,
//     }
//   };
//   // ZOHO.CRM.FUNCTIONS.get(request).then(function (data) {
// console.log(selected_element.textContent.match(/\d+/));
let p = {accn:selected_element.textContent.match(/\d+/)[0]};
let accno = selected_element.textContent.match(/\d+/)[0];

// let account_data = [];
// for (let i = 0; i < data[0].length; i++) {
//   // const element = array[i];
//   if(data[0][i].Name == accno) {
//     account_data = data[0][i];
//   }
// }

  // new_tr_ele.classList.add("crm-style-row"); //No I18N
  // table_obj.appendChild(new_tr_ele);


let apiName;
if(isUatInstance)
{
  apiName="Account_Transaction_API22";
}
else
{
  apiName="Account_Transaction_API2";
}
call_crm_function(apiName,p).then((data)=>{ 
  console.log("data from fetch account status api",data);
  // freeze_acc_callback(data);
  // freeze_populate_data({
  //   "Name":selected_element.textContent.match(/\d+/)[0],
  //   "Status":data
  // });

  console.log("Data in Freeze",data);
  if (JSON.parse(data.details.output).data.hasOwnProperty("Error")) {
    // api_fallback_freeze_acc(data);
    let table_id = "freeze_acc_trans_table";
    let table_obj = document.getElementById(table_id);
    let hdr = `
  <tr class="crm-style-row">
  <th class="crm-style-header">Account No.</th>
  <th class="crm-style-header">Status</th>
  <th class="crm-style-header">Action</th>
  </tr>
  `;
  table_obj.innerHTML = hdr;
    let row = `
    <td class="crm-style-cell">${accno}</td>
    <td class="crm-style-cell" style="color:#0296f8;" id="FinacleError">Error from Finacle</td>
    <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn acc-freeze-btn" style="padding:2%;" onclick="confirm_blocking_acc('${accno}')">Freeze</div></div></td>
  `;
  table_obj.innerHTML += row;
  document
    .getElementById("freeze_acc_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("freeze_acc_op_table").classList.remove("hide");
  document.getElementById("FinacleError").addEventListener("click",(evt)=>{api_fallback_freeze_acc(data);});

  // Changes made for Debit Freeze Error Excepotion End
  }else{
    data = JSON.parse(data.details.output).data;
    let table_id = "freeze_acc_trans_table"; //No I18N
let table_obj = document.getElementById(table_id);
console.log("inside fetch debit card",p);
//Change for freeze reason fetch feature
let freezeRemarksList;
let genericPopUpzIndex=1;
try{

  freezeRemarksList = sortAccountFreezeDetails(data)

  freezeRemarksList = JSON.stringify(freezeRemarksList);
  genericPopUpzIndex= 1;
}
catch(err)
{
  //siltently discard error
  console.error("Error in sorting freeze details for debit freeze reason fetch",err);
}
//
// new_tr_ele = document.createElement("tr"); //No I18N
  let hdr = `
  <tr class="crm-style-row">
  <th class="crm-style-header">Account Number</th>
  <th class="crm-style-header">Status</th>
  <th class="crm-style-header">Action</th>
  </tr>
  `;
  table_obj.innerHTML = hdr;
  let row = `
    <td class="crm-style-cell">${accno}</td>
  `;
  if (data.AccountFreezeCode == "DUMMY") {
    row+= `
    <td class="crm-style-cell">${format_acc_status(data.AccountFreezeCode)}</td>
    <td class="crm-style-cell"><div class="cell-elem-container">
      <div class="crm-style-btn acc-freeze-btn" onclick="confirm_blocking_acc('${accno}')">Freeze</div>
      <div class="crm-style-btn fetch-reason-btn" onclick='fetch_reason(${freezeRemarksList},${genericPopUpzIndex})'>Fetch Reason</div>
      </div>
    </td>
    `;
  }else{
    row+= `
    <td class="crm-style-cell">${format_acc_status(data.AccountFreezeCode)}</td>
    <td class="crm-style-cell"><div class="cell-elem-container">
    <div class="crm-style-btn-2 acc-freeze-btn" style="padding:2%;">Freeze</div>
    <div class="crm-style-btn fetch-reason-btn" onclick='fetch_reason(${freezeRemarksList},${genericPopUpzIndex})'>Fetch Reason</div>
    </td>
    `;
  }

  table_obj.innerHTML += row;
  
  document
    .getElementById("freeze_acc_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("freeze_acc_op_table").classList.remove("hide");
  }
  
}).catch((err)=>{
  let table_id = "freeze_acc_trans_table";
    let table_obj = document.getElementById(table_id);
    let hdr = `
  <tr class="crm-style-row">
  <th class="crm-style-header">Account No.</th>
  <th class="crm-style-header">Status</th>
  <th class="crm-style-header">Action</th>
  </tr>
  `;
  table_obj.innerHTML = hdr;
    let row = `
    <td class="crm-style-cell">${accno}</td>
    <td class="crm-style-cell" style="color:#0296f8;" id="FinacleError">Error</td>
    <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn acc-freeze-btn" style="padding:2%;" onclick="confirm_blocking_acc('${accno}')">Freeze</div></div></td>
  `;
  table_obj.innerHTML += row;
  document
    .getElementById("freeze_acc_loader_table")
    .classList.add("hide_tab_imp");
  document.getElementById("freeze_acc_op_table").classList.remove("hide");
  // api_fallback_freeze_acc(err);
  // write error log module
  write_to_error_log_module("Freeze acc status",err);
});

  //     var func_name = "fetch_debitcard_api";
  // var req_data ={
  //   "arguments": JSON.stringify({
  //       "accn" : selected_element.textContent,
  //   })
  // };
  // ZOHO.CRM.FUNCTIONS.execute(func_name, req_data).then(function (data){
  //     // console.log("DEBIT CARD API::",data);
  //     // let d_c = parse_debit_Card_API(data);

  //     data = JSON.parse(data);
  //     try {
  //       if (data.code == "INVALID_DATA") {
  //         throw Error("INVALID DATA");
  //       }
  //     } catch (error) {
  //       api_fallback_debit_card("No Data Found");
  //     }

  //     if (d_c.length == 0) {
  //       api_fallback_debit_card("No Data Found");
  //     } else {
  //       console.log(d_c);
  //       console.log("Debit Card Details");
  //       /*d_c=parse_debit_card_status(d_c);*/ populate_account_table2(d_c);
  //       document
  //         .getElementById("debit_card_loader_table")
  //         .classList.add("hide_tab_imp");
  //       document.getElementById("debit_card_op_table").classList.remove("hide");
  //     }
  //   }); //No I18N
  //End of API call
  drop_down_count = drop_down_elements.length;
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
function drop_select11(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  // populate_account_table(selected_element.textContent);
  console.log("Nominee Data");
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  document.getElementById("nominee_error_div").classList.add("hide_tab_imp");
  document.getElementById("nominee_op_table").classList.add("hide");
  document
    .getElementById("nominee_loader_table")
    .classList.remove("hide_tab_imp");
  //API call
  // let request = {
  //   url: "https://sandbox.zohoapis.in/crm/v2/functions/customer360services/actions/execute", //No I18N
  //   params: {
  //     auth_type: "apikey", //No I18N
  //     zapikey:
  //       "1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e", //No I18N
  //     sat: "debitcard", //No I18N
  //     accountNumber: selected_element.textContent,
  //   },
  // };
  // document
  //   .getElementById("nominee_loader_table")
  //   .classList.remove("hide_tab_imp"); //No I18N
  // document.getElementById("nominee_op_table").classList.add("hide"); //No I18N

//   let request = {
// url: "https://ucrmapi.unionbankofindia.co.in/crm/v2/functions/debit_card_status_api/actions/execute?auth_type=apikey&zapikey=1003.446aab4478d33b36c8adb42a13894738.9e8fe0b1aa213ecb37f4e472ca4392ba", //No I18N
//     params: {
//       accn: selected_element.textContent,
//     }
//   };
//   // ZOHO.CRM.FUNCTIONS.get(request).then(function (data) {
// console.log(selected_element.textContent.match(/\d+/));
let p = {accn:selected_element.textContent.match(/\d+/)[0]};
let accno = selected_element.textContent.match(/\d+/)[0];

// let account_data = [];
// for (let i = 0; i < data[0].length; i++) {
//   // const element = array[i];
//   if(data[0][i].Name == accno) {
//     account_data = data[0][i];
//   }
// }

  // new_tr_ele.classList.add("crm-style-row"); //No I18N
  // table_obj.appendChild(new_tr_ele);

call_crm_function('Account_Transaction_API21',p).then((data)=>{ 
  console.log("data from fetch nominee api",data);
  // nominee_callback(data);
  // freeze_populate_data({
  //   "Name":selected_element.textContent.match(/\d+/)[0],
  //   "Status":data
  // });
  
  if(JSON.parse(data.details.output).data.SuccessOrFailure == "N"){
    nominee_api_callback(data)
  }else{
    data = JSON.parse(data.details.output).data;
    let table_id = "nominee_trans_table"; //No I18N
    let table_obj = document.getElementById(table_id);
    console.log("inside fetch nominee",p);
    // new_tr_ele = document.createElement("tr"); //No I18N
      let hdr = `
      <tr class="crm-style-row">
        <th class="crm-style-header">Name</th>
        <th class="crm-style-header">Relation</th>
        <th class="crm-style-header">Nominee's Guardian Name</th>
        <th class="crm-style-header">Nominee's Guardian Code</th>
      </tr>
      `;
      table_obj.innerHTML = hdr;
      let row = `
        <td class="crm-style-cell">${data.NomineeName_1}</td>
        <td class="crm-style-cell">${data.NomineeRelation_1}</td>
        <td class="crm-style-cell">${data.NomineeGuardName_1 == "DUMMY"?"-":data.NomineeGuardName_1}</td>
        <td class="crm-style-cell">${data.NomineeGuardCode_1 == "DUMMY"?"-":data.NomineeGuardCode_1}</td>
      `;
    
      table_obj.innerHTML += row;
      
      document
        .getElementById("nominee_loader_table")
        .classList.add("hide_tab_imp");
      document.getElementById("nominee_op_table").classList.remove("hide");
  }
  
}).catch((err)=>{
  // api_fallback_debit_card(err);
  api_fallback_nominee(err);
  // write error log module
  write_to_error_log_module("Fetch Nominee Details",err);
});

  //     var func_name = "fetch_debitcard_api";
  // var req_data ={
  //   "arguments": JSON.stringify({
  //       "accn" : selected_element.textContent,
  //   })
  // };
  // ZOHO.CRM.FUNCTIONS.execute(func_name, req_data).then(function (data){
  //     // console.log("DEBIT CARD API::",data);
  //     // let d_c = parse_debit_Card_API(data);

  //     data = JSON.parse(data);
  //     try {
  //       if (data.code == "INVALID_DATA") {
  //         throw Error("INVALID DATA");
  //       }
  //     } catch (error) {
  //       api_fallback_debit_card("No Data Found");
  //     }

  //     if (d_c.length == 0) {
  //       api_fallback_debit_card("No Data Found");
  //     } else {
  //       console.log(d_c);
  //       console.log("Debit Card Details");
  //       /*d_c=parse_debit_card_status(d_c);*/ populate_account_table2(d_c);
  //       document
  //         .getElementById("debit_card_loader_table")
  //         .classList.add("hide_tab_imp");
  //       document.getElementById("debit_card_op_table").classList.remove("hide");
  //     }
  //   }); //No I18N
  //End of API call
  drop_down_count = drop_down_elements.length;
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
function drop_select12(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  // populate_account_table(selected_element.textContent);
  console.log("cheque_book_tracking Data");
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  document.getElementById("cheque_book_tracking_error_div").classList.add("hide_tab_imp");
  document.getElementById("cheque_book_tracking_op_table").classList.add("hide");
  document
    .getElementById("cheque_book_tracking_loader_table")
    .classList.remove("hide_tab_imp");
  //API call
  // let request = {
  //   url: "https://sandbox.zohoapis.in/crm/v2/functions/customer360services/actions/execute", //No I18N
  //   params: {
  //     auth_type: "apikey", //No I18N
  //     zapikey:
  //       "1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e", //No I18N
  //     sat: "debitcard", //No I18N
  //     accountNumber: selected_element.textContent,
  //   },
  // };
  // document
  //   .getElementById("cheque_book_tracking_loader_table")
  //   .classList.remove("hide_tab_imp"); //No I18N
  // document.getElementById("cheque_book_tracking_op_table").classList.add("hide"); //No I18N

//   let request = {
// url: "https://ucrmapi.unionbankofindia.co.in/crm/v2/functions/debit_card_status_api/actions/execute?auth_type=apikey&zapikey=1003.446aab4478d33b36c8adb42a13894738.9e8fe0b1aa213ecb37f4e472ca4392ba", //No I18N
//     params: {
//       accn: selected_element.textContent,
//     }
//   };
//   // ZOHO.CRM.FUNCTIONS.get(request).then(function (data) {
// console.log(selected_element.textContent.match(/\d+/));
let p = {custId:custid};
// let accno = selected_element.textContent.match(/\d+/)[0];

// let account_data = [];
// for (let i = 0; i < data[0].length; i++) {
//   // const element = array[i];
//   if(data[0][i].Name == accno) {
//     account_data = data[0][i];
//   }
// }

  // new_tr_ele.classList.add("crm-style-row"); //No I18N
  // table_obj.appendChild(new_tr_ele);

call_crm_function('debit_card_tracking1',p).then((data)=>{ 
  console.log("data from fetch Cheque Book Tracking API",data);
  // cheque_book_tracking_callback(data);
  // freeze_populate_data({
  //   "Name":selected_element.textContent.match(/\d+/)[0],
  //   "Status":data
  // });
  if(data.details.output == "" ){
    // no data template
    show_fallback(
      "No Details Found",
      "cheque_book_tracking_loader_table",
      "cheque_book_tracking_error_div"
    );
    console.log("Cheque book API failed",data);
      document.getElementById("cheque_book_tracking_op_table").classList.remove("hide");
  }else if(JSON.parse(data.details.output).data.SuccessOrFailure == "N"){
    console.log("Cheque book API failed",data);
    cheque_book_tracking_api_callback(data)
  }else{
    data = JSON.parse(data.details.output).data;
    let table_id = "cheque_book_tracking_trans_table"; //No I18N
    let table_obj = document.getElementById(table_id);
    console.log("inside fetch cheque_book_tracking",p);
    // new_tr_ele = document.createElement("tr"); //No I18N
      let hdr = `
      <tr class="crm-style-row">
        <th class="crm-style-header">Beginning Cheque Number</th>
        <th class="crm-style-header">Dispatched Date</th>
        <th class="crm-style-header">Courier Name</th>
        <th class="crm-style-header">Tracking Number</th>
        <th class="crm-style-header">Account Number</th>
      </tr>
      `;
      table_obj.innerHTML = hdr;
      // console.log(selected_element.innerHTML.trim());
      data_filtered = data.filter((ele) => {return ele.CHEQUE_BOOK_Account_Name == selected_element.innerHTML.trim()});
      console.log("Filtered Cheque book details : ", data_filtered);
      if(data_filtered.length > 0){
        for (let i = 0; i < data_filtered.length; i++) {
          const element = data_filtered[i];
          
          let row = `
          <td class="crm-style-cell">${element.BEGIN_CHQ_NUM || ""}</td>
          <td class="crm-style-cell">${format_date(element.CHEQUE_BOOK_DISPATCHED_DATE)}</td>
          <td class="crm-style-cell">${element.CHEQUE_BOOK_COURIER_NAME || ""}</td>
          <td class="crm-style-cell">${element.TRACKING_NUMBER || ""}</td>
          <td class="crm-style-cell">${element.CHEQUE_BOOK_Account_Name || ""}</td>
          `;
          table_obj.innerHTML += row;
          
        }
        document
          .getElementById("cheque_book_tracking_loader_table")
          .classList.add("hide_tab_imp");
        document.getElementById("cheque_book_tracking_op_table").classList.remove("hide");
      }else{
        show_fallback(
          "No Details Found",
          "cheque_book_tracking_loader_table",
          "cheque_book_tracking_error_div"
        );
      }
  }
  
}).catch((err)=>{
  // api_fallback_debit_card(err);
  api_fallback_cheque_book_tracking(err);
  console.error("Error in cheque book tracking API",err);
  // write error log module
  write_to_error_log_module("Fetch cheque_book_tracking Details",err);
});

  //     var func_name = "fetch_debitcard_api";
  // var req_data ={
  //   "arguments": JSON.stringify({
  //       "accn" : selected_element.textContent,
  //   })
  // };
  // ZOHO.CRM.FUNCTIONS.execute(func_name, req_data).then(function (data){
  //     // console.log("DEBIT CARD API::",data);
  //     // let d_c = parse_debit_Card_API(data);

  //     data = JSON.parse(data);
  //     try {
  //       if (data.code == "INVALID_DATA") {
  //         throw Error("INVALID DATA");
  //       }
  //     } catch (error) {
  //       api_fallback_debit_card("No Data Found");
  //     }

  //     if (d_c.length == 0) {
  //       api_fallback_debit_card("No Data Found");
  //     } else {
  //       console.log(d_c);
  //       console.log("Debit Card Details");
  //       /*d_c=parse_debit_card_status(d_c);*/ populate_account_table2(d_c);
  //       document
  //         .getElementById("debit_card_loader_table")
  //         .classList.add("hide_tab_imp");
  //       document.getElementById("debit_card_op_table").classList.remove("hide");
  //     }
  //   }); //No I18N
  //End of API call
  drop_down_count = drop_down_elements.length;
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
function drop_select13(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  // populate_account_table(selected_element.textContent);
  console.log("debit_card_tracking Data");
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  document.getElementById("debit_card_tracking_error_div").classList.add("hide_tab_imp");
  document.getElementById("debit_card_tracking_op_table").classList.add("hide");
  document
    .getElementById("debit_card_tracking_loader_table")
    .classList.remove("hide_tab_imp");
  
    //
    if(debitCardTrackingDetails || debitCardTrackingDetails == "")
    {
              let table_id = "debit_card_tracking_trans_table"; //No I18N
              let table_obj = document.getElementById(table_id);
              // new_tr_ele = document.createElement("tr"); //No I18N
              let hdr = `
              <tr class="crm-style-row">
                <th class="crm-style-header">Courier Name</th>
                <th class="crm-style-header">UD Card Number</th>
                <th class="crm-style-header">Dispatched Date</th>
                <th class="crm-style-header">Account Name</th>
                <th class="crm-style-header">Barcode</th>
                <th class="crm-style-header">Name</th>
                <th class="crm-style-header">Reference/SOL ID</th>
                <th class="crm-style-header">Contact Number</th>
              </tr>
              `;
              table_obj.innerHTML = hdr;
              data_filtered = debitCardTrackingDetails.filter((ele) => {return ele.DEBIT_CARD_Account_Name == selected_element.innerHTML.trim()});
              console.log("Filtered Cheque book details : ", data_filtered);
              if(data_filtered.length > 0){
                for (let i = 0; i < data_filtered.length; i++) {
                  const element = data_filtered[i];

                  let row = `
                  <td class="crm-style-cell">${element.DEBIT_CARD_COURIER_NAME	 || "-"}</td>
                  <td class="crm-style-cell">${element.DEBIT_CARD_UD_CARD_NO	 || "-"}</td>
                  <td class="crm-style-cell">${format_date(element.DEBIT_CARD_DISPATCHED_DATE) || "-"}</td>
                  <td class="crm-style-cell">${element.DEBIT_CARD_Account_Name	 || "-"}</td>
                  <td class="crm-style-cell">${element.BARCODE || "-"}</td>
                  <td class="crm-style-cell">${element.Name1	 || "-"}</td>
                  <td class="crm-style-cell">${element.REF_Sole	 || "-"}</td>
                  <td class="crm-style-cell">${element.Contact_No	 || "-"}</td>
                  `;
                  table_obj.innerHTML += row;

                }
                document
                  .getElementById("debit_card_tracking_loader_table")
                  .classList.add("hide_tab_imp");
                document.getElementById("debit_card_tracking_op_table").classList.remove("hide");
                }
              else
              {
                show_fallback(
                  "No Details Found",
                  "debit_card_tracking_loader_table",
                  "debit_card_tracking_error_div"
                );
              }
    }
    else
    {
      //Searching debit card tracking details
    base_url = "https://ucrmapi.unionbankofindia.co.in/crm/v6/DebitCard_Details/search?criteria=(Customer:equals:"+rid[0]+")"; //No I18N
    var req_data = {
      method: "GET", //No I18N
      url: base_url, //No I18N
    };
    ZOHO.CRM.CONNECTION.invoke("zohocrm", req_data).then((data)=>{
      console.log("Result from debit card tracking search API",data);
      if(data.code=="SUCCESS")
      {
        if(data.details.status=="true")
        {
          let debitCardDetails=data.details.statusMessage;
          if((debitCardDetails=="")||(debitCardDetails.length==0))
          {
            debitCardTrackingDetails=[];
            show_fallback(
              "No Details Found",
              "debit_card_tracking_loader_table",
              "debit_card_tracking_error_div"
            );
          }
          else
          {
            debitCardDetails=debitCardDetails.data;
            debitCardTrackingDetails=debitCardDetails;
            //debit card Details present
            let table_id = "debit_card_tracking_trans_table"; //No I18N
            let table_obj = document.getElementById(table_id);
            // new_tr_ele = document.createElement("tr"); //No I18N
            let hdr = `
            <tr class="crm-style-row">
              <th class="crm-style-header">Courier Name</th>
              <th class="crm-style-header">UD Card Number</th>
              <th class="crm-style-header">Dispatched Date</th>
              <th class="crm-style-header">Account Name</th>
              <th class="crm-style-header">Barcode</th>
              <th class="crm-style-header">Name</th>
              <th class="crm-style-header">Reference/SOL ID</th>
              <th class="crm-style-header">Contact Number</th>
            </tr>
            `;
            table_obj.innerHTML = hdr;
            // console.log(selected_element.innerHTML.trim());
            if(debitCardDetails.length>0)
            {
              data_filtered = debitCardDetails.filter((ele) => {return ele.DEBIT_CARD_Account_Name == selected_element.innerHTML.trim()});
              console.log("Filtered Cheque book details : ", data_filtered);
              if(data_filtered.length > 0){
                for (let i = 0; i < data_filtered.length; i++) {
                  const element = data_filtered[i];

                  let row = `
                  <td class="crm-style-cell">${element.DEBIT_CARD_COURIER_NAME	 || "-"}</td>
                  <td class="crm-style-cell">${element.DEBIT_CARD_UD_CARD_NO	 || "-"}</td>
                  <td class="crm-style-cell">${format_date(element.DEBIT_CARD_DISPATCHED_DATE) || "-"}</td>
                  <td class="crm-style-cell">${element.DEBIT_CARD_Account_Name	 || "-"}</td>
                  <td class="crm-style-cell">${element.BARCODE || "-"}</td>
                  <td class="crm-style-cell">${element.Name1	 || "-"}</td>
                  <td class="crm-style-cell">${element.REF_Sole	 || "-"}</td>
                  <td class="crm-style-cell">${element.Contact_No	 || "-"}</td>
                  `;
                  table_obj.innerHTML += row;

                }
                document
                  .getElementById("debit_card_tracking_loader_table")
                  .classList.add("hide_tab_imp");
                document.getElementById("debit_card_tracking_op_table").classList.remove("hide");
                }
              else
              {
                show_fallback(
                  "No Details Found",
                  "debit_card_tracking_loader_table",
                  "debit_card_tracking_error_div"
                );
              }
            }
            else
            {
              show_fallback(
                "No Details Found",
                "debit_card_tracking_loader_table",
                "debit_card_tracking_error_div"
              );
            }
            
          }
        }
        else
        {
          api_fallback_debit_card_tracking("Couldn't fetch details");
          console.error("Error in debit card tracking API",data);
        }
      }
      else
      {
        api_fallback_debit_card_tracking("Couldn't fetch details");
        console.error("Error in debit card tracking API",data);
      }
    }).catch((err) =>{
       api_fallback_debit_card_tracking(err);
        console.error("Error in debit card tracking API",err);
    });
    //
    }
    

/*
let p = {custId:custid};

call_crm_function('debit_card_tracking',p).then((data)=>{ 
  console.log("data from fetch Debit Card Tracking API",data);

  if(data.code=="success")
  {
    //success case
    if(data.details.output == "" ){
      // no data template
      show_fallback(
        "No Details Found",
        "debit_card_tracking_loader_table",
        "debit_card_tracking_error_div"
      );
      console.log("Debit Card API failed",data);
        document.getElementById("debit_card_tracking_op_table").classList.remove("hide");
    }else if(JSON.parse(data.details.output).data.SuccessOrFailure == "N"){
      console.log("Debit Card API failed",data);
      debit_card_tracking_api_callback(data)
      console.log("Debit card tracking API failed",data);
    }else{
      data = JSON.parse(data.details.output).data;
      let table_id = "debit_card_tracking_trans_table"; //No I18N
      let table_obj = document.getElementById(table_id);
      console.log("inside fetch debit_card_tracking",p);
      // new_tr_ele = document.createElement("tr"); //No I18N
        let hdr = `
        <tr class="crm-style-row">
          <th class="crm-style-header">Courier Name</th>
          <th class="crm-style-header">UD Card Number</th>
          <th class="crm-style-header">Dispatched Date</th>
          <th class="crm-style-header">Account Name</th>
          <th class="crm-style-header">Barcode</th>
          <th class="crm-style-header">Name</th>
          <th class="crm-style-header">Reference/SOL ID</th>
          <th class="crm-style-header">Contact Number</th>
        </tr>
        `;
        table_obj.innerHTML = hdr;
        // console.log(selected_element.innerHTML.trim());
        data_filtered = data.filter((ele) => {return ele.DEBIT_CARD_Account_Name == selected_element.innerHTML.trim()});
        console.log("Filtered Cheque book details : ", data_filtered);
        if(data_filtered.length > 0){
          for (let i = 0; i < data_filtered.length; i++) {
            const element = data_filtered[i];
            
            let row = `
            <td class="crm-style-cell">${element.DEBIT_CARD_COURIER_NAME	 || "-"}</td>
            <td class="crm-style-cell">${element.DEBIT_CARD_UD_CARD_NO	 || "-"}</td>
            <td class="crm-style-cell">${format_date(element.DEBIT_CARD_DISPATCHED_DATE) || "-"}</td>
            <td class="crm-style-cell">${element.DEBIT_CARD_Account_Name	 || "-"}</td>
            <td class="crm-style-cell">${element.BARCODE || "-"}</td>
            <td class="crm-style-cell">${element.Name1	 || "-"}</td>
            <td class="crm-style-cell">${element.REF_Sole	 || "-"}</td>
            <td class="crm-style-cell">${element.Contact_No	 || "-"}</td>
            `;
            table_obj.innerHTML += row;
            
          }
          document
            .getElementById("debit_card_tracking_loader_table")
            .classList.add("hide_tab_imp");
          document.getElementById("debit_card_tracking_op_table").classList.remove("hide");
        }else{
          show_fallback(
            "No Details Found",
            "debit_card_tracking_loader_table",
            "debit_card_tracking_error_div"
          );
        }
    }
    //
  }
  else
  {
    //show error
    show_fallback(
      "Debit card tracking data couldn't be loaded.",
      "debit_card_tracking_loader_table",
      "debit_card_tracking_error_div"
    );
    console.log("Debit Card tracking API failed",data);
      // document.getElementById("debit_card_tracking_op_table").classList.remove("hide");
  }
  
  
}).catch((err)=>{
  // api_fallback_debit_card(err);
  api_fallback_debit_card_tracking(err);
  console.error("Error in debit card tracking API",err);
  // write error log module
  write_to_error_log_module("Fetch debit_card_tracking Details",err);
});
*/

  drop_down_count = drop_down_elements.length;
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
// end of debit card tracking drop select

//Changes for MB deregistration
// Fetch mobile andd populate the dropdown
function populateMobileDropdown(mobileNumbers) {
  const dropdownContentId = "MobDeregister_drop_content";
  const dropdownContentElement = document.getElementById(dropdownContentId);
  const svcDropContainer=document.getElementById("MbUpiSvcDropContainer");
  //Chage svcOptions to include UPI Block also when UPI Block prod sign-off is provided
  // const svcOptions=["MB Deregister","UPI Block"];
  const svcOptions=["MB Deregister"];
  const actionBtn=document.getElementById("add_mobile_deregister");
  dropdownContentElement.innerHTML = "";

  // Populate the dropdown
  mobileNumbers.forEach((mobileNumber) => {
    const dropLine = document.createElement("div");
    dropLine.className = "drop-line dr";
    dropLine.textContent = mobileNumber;
    if((mobileNumber)&&(mobileNumber!="-"))
    {
      dropLine.setAttribute("onclick", `drop_select14(this, 'MobDeregister-drop-select', '${dropdownContentId}')`);
    }
    
    dropdownContentElement.appendChild(dropLine);
  });

  //Changes for UPI blocking
  if(svcDropContainer && actionBtn)
  {
    svcDropContainer.innerHTML=``;
    svcDropContainer.appendChild(createDynamicDropDown(svcOptions,(selectedVal)=>{
      let hiddenItems=document.querySelectorAll(".hide.mb-hidden-menu");
      if(hiddenItems)
      {
        hiddenItems.forEach((elem)=>{elem.classList.remove("hide")});
      }
      actionBtn.innerHTML=selectedVal;
      let selectedInd=svcOptions.indexOf(selectedVal);
      actionBtn.setAttribute("svcOption",selectedInd);

      const apiOut = document.querySelector("#apiOutContainer");
      const errorDiv = document.getElementById("mobilederegister_error_div");
      apiOut.innerHTML="";
      errorDiv.innerHTML="";
    }));
    dynamicSpecialPermissionsCheckHook(userSpecialPermissions);
  }
}
function drop_select14(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
    enablederegister(selected_element.textContent);
  console.log("Selected Mobile Number inside drop_select14:", selected_element.textContent);
  const dropDownElements = document.getElementById(drop_down_content_id).children;
  Array.from(dropDownElements).forEach((element) =>
    element.classList.remove("drop-line-selected")
  );
  selected_element.classList.add("drop-line-selected");

}




// End of mobile number populate
//

function format_acc_status(n){
  if(n == "D") return "Debit Freeze";
  if(n == "C") return "Credit Freeze";
  if(n == "T") return "Total Freeze";
  if(n == "DUMMY") return "Not Frozen";
}

// drop select for lien account
function drop_select2(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  //change for lien remarks
  let lienRemarksBtn=document.getElementById("add_lien_remarks");
  enableLienRemarks(selected_element.textContent);
  //
  //populate_lien_account_table(selected_element.textContent);
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  drop_down_count = drop_down_elements.length;
  //Start of API call
  document
    .getElementById("lien_amount_error_div")
    .classList.add("hide_tab_imp");
  document
    .getElementById("lien_amount_loader_table")
    .classList.remove("hide_tab_imp");
  document.getElementById("lien_account_op_table").classList.add("hide");
  let lien_amt_url =
    "https://sandbox.zohoapis.in/crm/v2/functions/lien_integration/actions/execute?auth_type=apikey&zapikey=1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e&acctNum=" +
    selected_element.textContent.toString();
  var request = {
    url: lien_amt_url,
    // params: {
    //   acctNum: selected_element.textContent,
    // },
  };
  let p={accno:selected_element.textContent.replace("\n","").replaceAll(" ","")};
  console.log("inside lien account API",p);
  let apiFnName;
  if(isUatInstance)
  {
    apiFnName="Lien_Details_Inquiry_API"; //change for new Lien UAT API
  }
  else
  {
    apiFnName="Lien_Inqury_API1"; //old function Lien_Inqury_API
  }
  call_crm_function(apiFnName,p,null,true).then((data)=>{ 
    console.log("data from lien inquiry api",data);
    lien_api_callback(data);
  }).catch((err)=>{
    api_fallback(
      err
    );
    // write error log module
    write_to_error_log_module("Lien Inquiry API",err);
  });
  //End of API call
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
// end of lien account drop select

function parse_loan_acc_js(data) {
  //da=JSON.parse(data);
  let d = data.details.output;
  let d_js = JSON.parse(d);
  //console.log("while parsing loan account json, value is",d_js);	//No I18N
  let loan_data = d_js.data.CRMLoanAcctDetails;
  let loan_js = {};
  loan_js.Outstanding_balance = loan_data.Outstanding;
  loan_js.Overdue_amount = loan_data.OverDue;
  loan_js.Asset_class = loan_data.AssetClass;
  loan_js.Interest_rate = loan_data.IntRate;
  return loan_js;
}
//loan drop selection
function drop_select3(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  //populate_lien_account_table(selected_element.textContent);
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  drop_down_count = drop_down_elements.length;
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N

  //Here code the logic to call API and populate loan account table
  //API call
  let request = {
    url: "https://sandbox.zohoapis.in/crm/v2/functions/customer360services/actions/execute", //No I18N
    params: {
      auth_type: "apikey", //No I18N
      zapikey:
        "1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e", //No I18N
      sat: "loanaccountinquiry", //No I18N
      AccountNumber: selected_element.textContent,
    },
  };
  document
    .getElementById("loan_account_loader_table")
    .classList.remove("hide_tab_imp"); //No I18N
  document
    .getElementById("loan_account_error_div")
    .classList.add("hide_tab_imp"); //No I18N
  document.getElementById("loan_account_op_table").classList.add("hide"); //No I18N
  let p = { accn: selected_element.textContent.match(/\d+/)[0] };
  call_crm_function("loan_accounts_api", p)
    .then((data) => {
      console.log("data from Loan Accounts api", data);
      loan_account_api_callback(data);
    })
    .catch((err) => {
      show_fallback(err, "loan_account_loader_table", "loan_account_error_div");

    // write error log module
    write_to_error_log_module("Loan Account API",err);
    });
  // ZOHO.CRM.HTTP.get(request).then(function (data) {
  //   loan_account_api_callback(data);
  // }).catch(e=>{console.log("error in calling http get",e);}); //No I18N
  //End of API call
}
function parse_debit_Card_API(data) {
  //console.log('inside API parser, data is',data);	//No I18N
  console.log(data);
  let res = JSON.parse(data);
  //console.log('inside API parser, res is',res);	//No I18N
  let debit_cards_array = [];
  if (res.code == "success") {
    //No I18N
    stadat = ""; //No I18N
    console.log(res.details.output);
    if (res.details.output == null || res.details.output == "") {
      return debit_cards_array;
    }
    stadat = JSON.parse(res.details.output);
    //console.log("stadat is",stadat);	//No I18N
    stadat = stadat.data;
    let resp = stadat.statusDesc || ""; //No I18N
    let obj = {};
    if (resp == "SUCCESS") {
      //No I18N
      for (let i = 0; i < stadat.cardDetails.length; i++) {
        //Object.assign();
        obj.debit_card = ""; //No I18N
        let card_details = {};
        Object.assign(card_details, stadat.cardDetails[i]);
        //stadat.cardDetails[i];
        obj.debit_card = `${card_details.cardNumber}`;
        //Object.assign(obj['debit_card'],JSON.stringify(stadat.cardDetails[i].cardNumber));	//No I18N
        obj.status = stadat.cardDetails[i].cardStatus;
        //console.log("parsed obj is",obj);	//No I18N
        debit_cards_array.push(obj);
      }
    }
    //console.log('after parsing API. debit cards is',debit_cards_array);	//No I18N
    return debit_cards_array;
  }
}
var global_debit_cards = [];
var i = 0;
async function parse_debit_card_status(debit_cards) {
  //global_debit_cards=debit_cards;
  Object.assign(global_debit_cards, debit_cards);
  //console.log("global debit cards are set ",debit_cards);	//No I18N
  debitcardno = debit_cards.length;
  no_of_responses = 0;
  function debit_card_setter(ind, data) {
    //console.log("inside debit card setter. Data",data," index is ",ind,"global debit cards is ",global_debit_cards,"debit card is",debit_cards[ind]);	//No I18N
    no_of_responses += 1;
    let d = JSON.parse(data);
    d = d.details.output;
    d = JSON.parse(d);
    c_status = d.cardStatus;
    //console.log('global debit cards is',global_debit_cards,'ind is',ind);	//No I18N
    global_debit_cards[ind].status = c_status;
    //console.log("global debit cards are set, with ind",ind," oBj is ",global_debit_cards[ind]['debit_card'],global_debit_cards[ind]['status']); 	//No I18N
    if (ind == debitcardno - 1) {
      //console.log("populating table. No of responses:",no_of_responses,"index is ",ind);	//No I18N
      populate_account_table2(global_debit_cards);
    }
  }
  for (i = 0; i < debitcardno; i++) {
    //API call
    //console.log('passing card no:',debit_cards[i].debit_card);	//No I18N
    let request = {
      url: "https://sandbox.zohoapis.in/crm/v2/functions/customer360services/actions/execute", //No I18N
      params: {
        auth_type: "apikey", //No I18N
        zapikey:
          "1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e", //No I18N
        sat: "debitcardstatus", //No I18N
        cardNo: debit_cards[i].debit_card,
      },
    };

    await ZOHO.CRM.HTTP.get(request).then((data) => debit_card_setter(i, data));
    //
  }
}
function fetch_debit_cards(acc_no)
{
  let p = {Accn:acc_no};
console.log("inside fetch debit card",p);
document.getElementById("debit_card_loader_table").classList.remove("hide_tab_imp"); //No I18N
document.getElementById("debit_card_op_table").classList.add("hide"); //No I18N

call_crm_function('fetch_debitcard_api',p).then((data)=>{ 
  console.log("data from fetch debit api",data);
  fetch_debit_callback(data);
}).catch((err)=>{
  api_fallback_debit_card(err);
  // write error log module
  write_to_error_log_module("Fetch debit card API",err);
});
}
function drop_select(
  selected_element,
  drop_down_select_id,
  drop_down_content_id
) {
  document.getElementById(drop_down_select_id).textContent =
    selected_element.textContent;
  // parentAccount=selected_element.textContent.match(/\d+/)[0];
  // populate_account_table(selected_element.textContent);
  drop_down_elements = document.getElementById(drop_down_content_id).children;
  document.getElementById("debit_card_error_div").classList.add("hide_tab_imp");
  document
    .getElementById("debit_card_loader_table")
    .classList.remove("hide_tab_imp");
  //API call
  // let request = {
  //   url: "https://sandbox.zohoapis.in/crm/v2/functions/customer360services/actions/execute", //No I18N
  //   params: {
  //     auth_type: "apikey", //No I18N
  //     zapikey:
  //       "1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e", //No I18N
  //     sat: "debitcard", //No I18N
  //     accountNumber: selected_element.textContent,
  //   },
  // };
  document
    .getElementById("debit_card_loader_table")
    .classList.remove("hide_tab_imp"); //No I18N
  document.getElementById("debit_card_op_table").classList.add("hide"); //No I18N

//   let request = {
// url: "https://ucrmapi.unionbankofindia.co.in/crm/v2/functions/debit_card_status_api/actions/execute?auth_type=apikey&zapikey=1003.446aab4478d33b36c8adb42a13894738.9e8fe0b1aa213ecb37f4e472ca4392ba", //No I18N
//     params: {
//       accn: selected_element.textContent,
//     }
//   };
//   // ZOHO.CRM.FUNCTIONS.get(request).then(function (data) {
// console.log(selected_element.textContent.match(/\d+/));
let p = {Accn:selected_element.textContent.match(/\d+/)[0]};
console.log("inside fetch debit card",p);
call_crm_function('fetch_debitcard_api',p).then((data)=>{ 
  console.log("data from fetch debit api",data);
  fetch_debit_callback(data);
}).catch((err)=>{
  api_fallback_debit_card(err);
  // write error log module
  write_to_error_log_module("Fetch debit card API",err);
});

  //     var func_name = "fetch_debitcard_api";
  // var req_data ={
  //   "arguments": JSON.stringify({
  //       "accn" : selected_element.textContent,
  //   })
  // };
  // ZOHO.CRM.FUNCTIONS.execute(func_name, req_data).then(function (data){
  //     // console.log("DEBIT CARD API::",data);
  //     // let d_c = parse_debit_Card_API(data);

  //     data = JSON.parse(data);
  //     try {
  //       if (data.code == "INVALID_DATA") {
  //         throw Error("INVALID DATA");
  //       }
  //     } catch (error) {
  //       api_fallback_debit_card("No Data Found");
  //     }

  //     if (d_c.length == 0) {
  //       api_fallback_debit_card("No Data Found");
  //     } else {
  //       console.log(d_c);
  //       console.log("Debit Card Details");
  //       /*d_c=parse_debit_card_status(d_c);*/ populate_account_table2(d_c);
  //       document
  //         .getElementById("debit_card_loader_table")
  //         .classList.add("hide_tab_imp");
  //       document.getElementById("debit_card_op_table").classList.remove("hide");
  //     }
  //   }); //No I18N
  //End of API call
  drop_down_count = drop_down_elements.length;
  for (i = 0; i < drop_down_count; i++) {
    drop_down_elements[i].classList.remove("drop-line-selected"); //No I18N
  }
  selected_element.classList.add("drop-line-selected"); //No I18N
}
function api_fallback_debit_card(err) {
  console.log(err);
  document
    .getElementById("debit_card_loader_table")
    .classList.add("hide_tab_imp");
  document
    .getElementById("debit_card_error_div")
    .classList.remove("hide_tab_imp");
}
function api_fallback_nominee(data) {
  console.log(data);

  try {
    if (data == undefined || data.code == "") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "nominee_loader_table",
      "nominee_error_div"
    );

     // write error log module
    //  write_to_error_log_module("Nominee API",data);
     return;
  }
  if (data == "" || data == null) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "nominee_loader_table",
      "nominee_error_div"
    );

     // write error log module
    //  write_to_error_log_module("Nominee API",data);
     return
  }
  let logs=data;
  data = data.details.output;
  console.log(data);
  data = JSON.parse(data);
  console.log(data);

  if (data.data.hasOwnProperty("Error")) {

    show_fallback(
      "Error from Finacle: "+Object.keys(data.data.Error)[0] || 
        "Error from Finacle: "+data.data.Error,
      "nominee_loader_table",
      "nominee_error_div"
    );

    // write error log module
    // write_to_error_log_module("Nominee API",logs);

    // //change for: 'sending logs' feature
    // api_logs["Nominee API"]=logs;
    // //send log prompt trigger
    // append_send_log("send_log_container_"+String((send_log_msg_ids["Nominee API"]-1)),"Nominee API");
    return;
    
  }
  console.log(data);

  document
    .getElementById("nominee_loader_table")
    .classList.add("hide_tab_imp");
  document
    .getElementById("nominee_error_div")
    .classList.remove("hide_tab_imp");
}
function api_fallback_cheque_book_tracking(data) {
  console.log(data);

  try {
    if (data == undefined || data.code == "") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "cheque_book_tracking_loader_table",
      "cheque_book_tracking_error_div"
    );

     // write error log module
    //  write_to_error_log_module("Cheque Book Tracking API",data);
     return;
  }
  if (data == "" || data == null) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "cheque_book_tracking_loader_table",
      "cheque_book_tracking_error_div"
    );

     // write error log module
    //  write_to_error_log_module("Cheque Book Tracking API",data);
     return
  }
  let logs=data;
  data = data.details.output;
  console.log(data);
  data = JSON.parse(data);
  console.log(data);

  if (data.data.hasOwnProperty("Error")) {

    show_fallback(
      "Error from Finacle: "+Object.keys(data.data.Error)[0] || 
        "Error from Finacle: "+data.data.Error,
      "cheque_book_tracking_loader_table",
      "cheque_book_tracking_error_div"
    );

    // write error log module
    // write_to_error_log_module("Cheque Book Tracking API",logs);

    // //change for: 'sending logs' feature
    // api_logs["Cheque Book Tracking API"]=logs;
    // //send log prompt trigger
    // append_send_log("send_log_container_"+String((send_log_msg_ids["Cheque Book Tracking API"]-1)),"Cheque Book Tracking API");
    return;
    
  }
  console.log(data);

  document
    .getElementById("cheque_book_tracking_loader_table")
    .classList.add("hide_tab_imp");
  document
    .getElementById("cheque_book_tracking_error_div")
    .classList.remove("hide_tab_imp");
}
function api_fallback_debit_card_tracking(data) {
  console.log(data);

  try {
    if (data == undefined || data.code == "") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "debit_card_tracking_loader_table",
      "debit_card_tracking_error_div"
    );

     // write error log module
    //  write_to_error_log_module("Debit Card Tracking API",data);
     return;
  }
  if (data == "" || data == null) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "debit_card_tracking_loader_table",
      "debit_card_tracking_error_div"
    );

     // write error log module
    //  write_to_error_log_module("Debit Card Tracking API",data);
     return
  }
  let logs=data;
  data = data.details.output;
  console.log(data);
  data = JSON.parse(data);
  console.log(data);

  if (data.data.hasOwnProperty("Error")) {

    show_fallback(
      "Error from Finacle: "+Object.keys(data.data.Error)[0] || 
        "Error from Finacle: "+data.data.Error,
      "debit_card_tracking_loader_table",
      "debit_card_tracking_error_div"
    );

    // write error log module
    // write_to_error_log_module("Debit Card Tracking API",logs);

    // //change for: 'sending logs' feature
    // api_logs["Debit Card Tracking API"]=logs;
    // //send log prompt trigger
    // append_send_log("send_log_container_"+String((send_log_msg_ids["Debit Card Tracking API"]-1)),"Debit Card Tracking API");
    return;
    
  }
  console.log(data);

  document
    .getElementById("debit_card_tracking_loader_table")
    .classList.add("hide_tab_imp");
  document
    .getElementById("debit_card_tracking_error_div")
    .classList.remove("hide_tab_imp");
}
function api_fallback_freeze_acc(data) {
  // console.log(err);

  console.log(data);

  try {
    if (data == undefined || data.code == "") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );

     // write error log module
    //  write_to_error_log_module("Account freeze API",data);

      // //change for: 'sending logs' feature
      // api_logs["Account freeze API"]=logs;
      // //send log prompt trigger
      // append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
     return;
  }
  if (data == "" || data == null) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );

     // write error log module
    //  write_to_error_log_module("Account freeze API",data);
      // //change for: 'sending logs' feature
      // api_logs["Account freeze API"]=logs;
      // //send log prompt trigger
      // append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
     return
  }
  let logs=data;
  data = data.details.output;
  console.log(data);
  data = JSON.parse(data);
  console.log(data);

  if (data.data.hasOwnProperty("Error")) {

    show_fallback(
      "Error from Finacle: "+Object.keys(data.data.Error)[0] || 
        "Error from Finacle: "+data.data.Error,
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );

    // write error log module
    // write_to_error_log_module("Account freeze API",logs);

    // //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=logs;
    // //send log prompt trigger
    // append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
    return;
    
  }
  console.log(data);
  document
    .getElementById("freeze_acc_loader_table")
    .classList.add("hide_tab_imp");
  document
    .getElementById("freeze_acc_error_div")
    .classList.remove("hide_tab_imp");
}
function show_another_pop(close_pop_id, open_pop_id, message_id, message) {
  document.getElementById(close_pop_id).classList.remove("flex-row"); //No I18N
  document.getElementById(close_pop_id).classList.add("hide"); //No I18N
  document.getElementById(open_pop_id).classList.remove("hide"); //No I18N
  document.getElementById(open_pop_id).classList.add("flex-row"); //No I18N
  document.getElementById(message_id).textContent = message;
}
function freeze_acc_callback(data) {
  // data = JSON.parse(data);
  if (data == "") {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );
    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
    return;
  }

  try {
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );
    // write error log module
    // write_to_error_log_module("Fetch debit card API",data);
    
    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=data;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
    return;
  }

  let logs=data;
  data = data.details.output;
  data = JSON.parse(data);
  console.log("FETCH DEBIT DATA ::", data);
  try {
    if (data.data.statusCode == "F") {
      show_fallback(
        data.data.statusDesc,
        "freeze_acc_loader_table",
        "freeze_acc_error_div"
      );
      //change for: 'sending logs' feature
      // api_logs["Account freeze API"]=logs;
      //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
    return;
    }
    if (data == undefined || data.code == "INVALID_DATA") {
      throw Error("INVALID_DATA");
    }
  } catch (error) {
    show_fallback(
      "Oops! Something went wrong. Please try again",
      "freeze_acc_loader_table",
      "freeze_acc_error_div"
    );
    //change for: 'sending logs' feature
    // api_logs["Account freeze API"]=logs;
    //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
    return;
  }
  // data = JSON.parse(data);
  // console.log("inside API call back", data);

  let status = data.status;
  if (status == "00") {
    //success
    //let d=data.data;
    let lien_data = data.data;

    if (lien_data.statusCode != "0000") {
      api_fallback_debit_card(lien_data.statusDesc);
      //change for: 'sending logs' feature
      // api_logs["Account freeze API"]=logs;
      //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");

      return;
    }
    // if((lien_data.cardDetails!=null))
    // {
    //   api_fallback(lien_data.lienDetails.Error_1);
    //   return;
    // }
    let lien_total = lien_data.noOfCards;

    //
    let table_id = "freeze_acc_op_table"; //No I18N
    let table_obj = document.getElementById(table_id);
    let table_body = table_obj.children[0];
    let table_rows = table_body.children;
    //removing all the rows except header row
    for (let i = 1; i < table_rows.length; i++) {
      table_rows[i].remove();
      i--;
    }
    if (lien_total == 0) {
      // No Card found
      show_fallback(
        "No Debit Cards Associated",
        "freeze_acc_loader_table",
        "freeze_acc_op_table"
      );
      //change for: 'sending logs' feature
      // api_logs["Account freeze API"]=logs;
      //send log prompt trigger
// append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
      return;
      //
    } else {
      //populate the lien amounts one by one in the lien amount table
      console.log(lien_data.cardDetails);
      let lien_json = lien_data.cardDetails;
      for (let d of lien_json) {
        new_tr_ele = document.createElement("tr"); //No I18N
        let row = `<td class="crm-style-cell">${mask_str(d.cardNumber,"card")}</td>`;
        if (d.Status == "S") {
          row += `<td class="crm-style-cell"><div class="cell-elem-container"><div class="active-status">Active</div></div></td>
          <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn debit-hotlist" onclick="confirm_blocking('${d.cardNumber}',${d.a})">Hotlist</div></div></td>`;
        } else {
          row +=
            `<td class="crm-style-cell"><div class="cell-elem-container"><div class="inactive-status">` +
            format_Card_status(d.cardStatus) +
            `</div></div></td>
            <td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn-2">Hotlist</div></div></td>`;
        }

        // row += `<td class="crm-style-cell"><div class="cell-elem-container"><div class="crm-style-btn" onclick="confirm_blocking(${d.cardNumber})">Hotlist</div></div></td>`;
        new_tr_ele.innerHTML = row;
        new_tr_ele.classList.add("crm-style-row"); //No I18N
        table_body.appendChild(new_tr_ele);
      }
    }
    

    //populate_lien_account_table2(d);
    document
      .getElementById("debit_card_loader_table")
      .classList.add("hide_tab_imp");
    document.getElementById("debit_card_op_table").classList.remove("hide");
  } else {
    //show error msg on the screen
    api_fallback_debit_card("Error");

    // write error log module
    write_to_error_log_module("Fetch debit card API",logs);
  }
  //change for: 'sending logs' feature
  api_logs["Account freeze API"]=logs;
  //send log prompt trigger
  append_send_log("send_log_container_"+String((send_log_msg_ids["Account freeze API"]-1)),"Account freeze API");
}
//change to bypass new freeze account logic with old one
// CONFIRM FREEZE ACCOUNT
function freeze_acc_old(btnRef){
  let c_acc = acc_reading_in_pro;
  console.log("Acc Number::", c_acc);

  let remarks_prefix="";
  let remarks_input="";
  remarks_input=document.getElementById("freeze_remarks_old").value;
  try{
  remarks_prefix=(logged_in_user_mail||" @ ").split("@")[0];
  }
  catch(e)
  {
    remarks_prefix="";
    // save the remarks as it is 
    console.error("Error in Debit Freeze Remarks", e);
  }
  
  let ip = { accn: c_acc, remarks:remarks_prefix+" Call Centre CRM "+remarks_input, refno:1234567898765};
  //
  hotlist_json={
    acc_no:c_acc,
  };
  let actionBtns=btnRef.parentNode.children;
  let yesBtn=actionBtns[0];
  let noBtn=actionBtns[1];
  let yesBtnContent=disableBtn(yesBtn);
  let noBtnContent=disableBtn(noBtn);
  // create_ticket_in_desk("Automated Account Freezing - S360","Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,remarks_input);
  // CALL FREEZE API
  let funcName;
  if(isUatInstance)
  {
    funcName="debit_freeze_api1";
  }
  else
  {
    funcName="Debit_Freeze_API";
  }
  call_crm_function(funcName, ip)
    .then(function (data) {
      // });
      // CHECK DATA FROZE
      console.log("DATA FROOZE",data);
      // write_to_error_log_module("Debit Freeze API",JSON.stringify(data.details.userMessage));
      // data = JSON.parse(data);
      let success_msg = JSON.parse(data.details.output);
      if(success_msg.hasOwnProperty('data') && success_msg.data.hasOwnProperty('DEBITFREEZE'))
      {
        if ((success_msg.data.DEBITFREEZE.SuccessOrFailure != "N")) {
          console.log("data is ", success_msg.data.DEBITFREEZE.RESULT_MSG);
          document.getElementById("pop_actions").style.display = "flex";
          document.getElementById("pop_loader").style.display = "none";
          show_another_pop(
            "block_confirmation_pop_up_2_old",
            "success_notification_pop_up",
            "success_message",
            success_msg.data.DEBITFREEZE.RESULT_MSG
          );
          // call reload function
          acc_ele_list = document.getElementById("freeze_acc_drop_content").children;
          selected_acc = "";
          for (let index = 0; index < acc_ele_list.length; index++) {
            if(acc_ele_list[index].classList.contains("drop-line-selected")) selected_acc = acc_ele_list[index];
          }
          drop_select9(selected_acc,"freeze-drop-select","freeze_acc_drop_content");
          //
          let apiLog;
          try{
            apiLog=JSON.stringify(data).slice(0,4990);
          }
          catch(err)
          {
            console.error("Exception in Stringifying API log",err,data);
            apiLog=String(data).slice(0,4990) || "";
          }
          //
          create_ticket_in_desk("Automated Account Freezing - S360","Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,remarks_input,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,apiLog,null);
          //change for: debit freeze logging
          api_logs["Debit freeze api"]=data
          // append_send_log("debit_hotlist_success_container","Debit freeze API");
        } else {
          // console.log(err);
          document.getElementById("pop_actions").style.display = "flex";
          document.getElementById("pop_loader").style.display = "none";
          if (success_msg.data.DEBITFREEZE.hasOwnProperty("Error_1")) {
            show_another_pop(
              "block_confirmation_pop_up_2_old",
              "failure_notification_pop_up",
              "failure_message",
              "Error from Finacle: "+success_msg.data.DEBITFREEZE.Error_1
            );
          }
          else{
          show_another_pop(
            "block_confirmation_pop_up_2_old",
            "failure_notification_pop_up",
            "failure_message",
            "Something went wrong. Please try again later."
          );
          }
          write_to_error_log_module("Debit Freeze API",data);
          //change for: debit freeze logging
          api_logs["Debit freeze API"]=data;
          // append_send_log("debit_hotlist_fail_container","Debit freeze API");
        }
      }
      else
      {
        show_another_pop(
          "block_confirmation_pop_up_2_old",
          "failure_notification_pop_up",
          "failure_message",
          "Something went wrong. Please try again later."
        );
        api_logs["Debit freeze API"]=data;
        // append_send_log("debit_hotlist_fail_container","Debit freeze API");
        write_to_error_log_module("Debit Freeze API",data);
        //
        let apiLog;
          try{
            apiLog=JSON.stringify(data).slice(0,4990);
          }
          catch(err)
          {
            console.error("Exception in Stringifying API log",err,data);
            apiLog=String(data).slice(0,4990) || "";
          }
          //
          create_ticket_in_desk("Automated Account Freezing - S360","Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,remarks_input,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null);
        //
      }
      
    }).catch((err) => {
      show_another_pop(
        "block_confirmation_pop_up_2_old",
        "failure_notification_pop_up",
        "failure_message",
        "Something went wrong. Please try again later."
      );
      write_to_error_log_module("Debit Freeze API",err);
      //
      let apiLog;
      try{
        apiLog=JSON.stringify(err).slice(0,4990);
      }
      catch(er)
      {
        console.error("Exception in Stringifying API log",er);
        apiLog=String(err).slice(0,4990) || "";
      }
      //
      create_ticket_in_desk("Automated Account Freezing - S360","Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,remarks_input,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null);
      //
    }).finally(()=>{
      enableBtn(yesBtn,yesBtnContent);
      enableBtn(noBtn,noBtnContent);
    });
}
//
// CONFIRM FREEZE ACCOUNT

function freeze_acc(btnRef){
  //change for freeze reason code
  /*
  Freeze reason code - CCP for the below remarks
  Customer req due to fraud txn
  L0 complaint in NCR Portal
  L1 & above cmplnt in NCR prtl
  */
  let reasonCodeMap={
    "Customer req due to fraud txn":"CCP",
    "L0 complaint in NCR portal":"CCP",
    "L1 & above cmplnt in NCR prtl":"CCP"
  };
  let c_acc = acc_reading_in_pro;
  let freezeRemarksContainer=document.getElementById("freezeRemarksDropDownContainer");
  let freezeRemarksFTInputContainer=document.getElementById("freeze_ft_remarks");
  let freezeRemarksFtVal=freezeRemarksFTInputContainer.value;
  if(!freezeRemarks)
  {
    freezeRemarksContainer.classList.remove("shake");
    setTimeout(()=>{freezeRemarksContainer.classList.add("shake")},100);
    return;
  }
  else
  {
    freezeRemarks=freezeRemarks.trim();
  }
  if(!freezeRemarksFtVal)
  {
    freezeRemarksFTInputContainer.classList.remove("shake");
    setTimeout(()=>{freezeRemarksFTInputContainer.classList.add("shake")},100);
    return;
  }
  else
  {
    freezeRemarksFtVal=freezeRemarksFtVal.trim();
  }
  console.log("Acc Number::", c_acc);

  let remarks_prefix="";
  let remarks_input="";
  //change for debit freeze remarks
  // remarks_input=document.getElementById("freeze_remarks").value;
  remarks_input=freezeRemarks;
  try{
  remarks_prefix=(logged_in_user_mail||" @ ").split("@")[0];
  }
  catch(e)
  {
    remarks_prefix="";
    // save the remarks as it is 
    console.error("Error in Debit Freeze Remarks", e);
  }
  
  let ip = { accn: c_acc, remarks:remarks_prefix+" "+logged_in_user_profile+" "+remarks_input, refno:freezeRemarksFtVal}; //1234567898765
  //
  hotlist_json={
    acc_no:c_acc,
  };
  let actionBtns=btnRef.parentNode.children;
  let yesBtn=actionBtns[0];
  let noBtn=actionBtns[1];
  let yesBtnContent=disableBtn(yesBtn);
  let noBtnContent=disableBtn(noBtn);
  // CALL FREEZE API
  // create_ticket_in_desk("Automated Account Freezing - S360","Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,remarks_input);
  if(isUatInstance)
  {
    freezeFnName="Debit_Freeze_API1";
    
  }
  else
  {
    freezeFnName="Debit_Freeze_API";
  }
  let freezeReasonCode=reasonCodeMap[freezeRemarks];
  if(!freezeReasonCode)
  {
    freezeReasonCode="D";
  }
  ip["reasoncode"]=freezeReasonCode;

  let acctDetails=fetchAccountDetails(c_acc);
  //
  let solId;
  if(acctDetails && acctDetails.hasOwnProperty("A_c_Type"))
  {
    //savings Accounter
    solId=acctDetails.Branch;
  }
  else if(acctDetails && acctDetails.hasOwnProperty("A_c_Type_Current_Saving"))
  {
    //loan account
    solId=acctDetails.Branch_Name;
  }
  //
  call_crm_function(freezeFnName, ip)
    .then(function (data) {
      // });
      // CHECK DATA FROZE
      console.log("DATA FROOZE",data);
      // write_to_error_log_module("Debit Freeze API",JSON.stringify(data.details.userMessage));
      // data = JSON.parse(data);
      let success_msg = JSON.parse(data.details.output);
      
      if(success_msg.hasOwnProperty('data') && success_msg.data.hasOwnProperty('DEBITFREEZE'))
      {
        if ((success_msg.data.DEBITFREEZE.SuccessOrFailure == "Y")||(success_msg.data.DEBITFREEZE.SuccessOrFailure == "y")) {
          console.log("data is ", success_msg.data.DEBITFREEZE.RESULT_MSG);
          document.getElementById("pop_actions").style.display = "flex";
          document.getElementById("pop_loader").style.display = "none";
          show_another_pop(
            "block_confirmation_pop_up_2",
            "success_notification_pop_up",
            "success_message",
            success_msg.data.DEBITFREEZE.RESULT_MSG
          );
          // call reload function
          acc_ele_list = document.getElementById("freeze_acc_drop_content").children;
          selected_acc = "";
          for (let index = 0; index < acc_ele_list.length; index++) {
            if(acc_ele_list[index].classList.contains("drop-line-selected")) selected_acc = acc_ele_list[index];
          }
          drop_select9(selected_acc,"freeze-drop-select","freeze_acc_drop_content");
          // Change for Debit Freeze - 310724
          // Change for debit freeze remarks
          //
          let apiLog;
          try{
            apiLog=JSON.stringify(data).slice(0,4990);
          }
          catch(err)
          {
            console.error("Exception in Stringifying API log",err,data);
            apiLog=String(data).slice(0,4990) || "";
          }
          //
          create_ticket_in_desk("Debit Freeze S360 - "+freezeRemarks,"Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,freezeRemarks+" :: "+freezeRemarksFtVal,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
          //create_ticket_in_desk("Automated Account Freezing - S360","Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,remarks_input);
          //change for: debit freeze logging
          api_logs["Debit freeze api"]=data;
          // append_send_log("debit_hotlist_success_container","Debit freeze API");
        } else {
          // console.log(err);
          document.getElementById("pop_actions").style.display = "flex";
          document.getElementById("pop_loader").style.display = "none";
          if (success_msg.data.DEBITFREEZE.hasOwnProperty("Error_1")) {
            show_another_pop(
              "block_confirmation_pop_up_2",
              "failure_notification_pop_up",
              "failure_message",
              "Error from Finacle: "+success_msg.data.DEBITFREEZE.Error_1
            );
          }
          else{
          show_another_pop(
            "block_confirmation_pop_up_2",
            "failure_notification_pop_up",
            "failure_message",
            "Something went wrong. Please try again later."
          );
          }
          write_to_error_log_module("Debit Freeze API",data);
          //change for: debit freeze logging
          api_logs["Debit freeze API"]=data;
          // append_send_log("debit_hotlist_fail_container","Debit freeze API");
          //
          let apiLog;
          try{
            apiLog=JSON.stringify(data).slice(0,4990);
          }
          catch(err)
          {
            console.error("Exception in Stringifying API log",err,data);
            apiLog=String(data).slice(0,4990) || "";
          }
          //
          create_ticket_in_desk("Debit Freeze S360 - "+freezeRemarks,"Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,freezeRemarks+" :: "+freezeRemarksFtVal,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
          //
          write_to_error_log_module("Debit Freeze API",data);
        }
      }
      else
      {
        show_another_pop(
          "block_confirmation_pop_up_2",
          "failure_notification_pop_up",
          "failure_message",
          "Something went wrong. Please try again later."
        );
        api_logs["Debit freeze API"]=data;
        // append_send_log("debit_hotlist_fail_container","Debit freeze API");
        write_to_error_log_module("Debit Freeze API",data);
        //
        let apiLog;
        try{
          apiLog=JSON.stringify(data).slice(0,4990);
        }
        catch(err)
        {
          console.error("Exception in Stringifying API log",err,data);
          apiLog=String(data).slice(0,4990) || "";
        }
        //
        create_ticket_in_desk("Debit Freeze S360 - "+freezeRemarks,"Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,freezeRemarks+" :: "+freezeRemarksFtVal,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
        //
        write_to_error_log_module("Debit Freeze API",data);
      }
      
    }).catch((err) => {
      show_another_pop(
        "block_confirmation_pop_up_2",
        "failure_notification_pop_up",
        "failure_message",
        "Something went wrong. Please try again later."
      );
      write_to_error_log_module("Debit Freeze API",err);
      //
      let apiLog;
      try{
        apiLog=JSON.stringify(err).slice(0,4990);
      }
      catch(er)
      {
        console.error("Exception in Stringifying API log",er,data);
        apiLog=String(data).slice(0,4990) || "";
      }
      //
      create_ticket_in_desk("Debit Freeze S360 - "+freezeRemarks,"Request for Account freezing","Service Request","Fraud Transaction","Debit freeze",hotlist_json.acc_no,null,mail_for_desk,phone_for_desk,null,null,freezeRemarks+" :: "+freezeRemarksFtVal,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
      //
    }).finally(()=>{
      enableBtn(yesBtn,yesBtnContent);
      enableBtn(noBtn,noBtnContent);
    });;
}
//change for debit freeze remarks
function decodeHtmlEntities(innerContent)
{
  let elem=document.createElement('p');
  let retVal;
  elem.innerHTML=innerContent;
  retVal=elem.innerText || elem.textContent;
  elem.remove();
  return retVal;
}
// freeze_acc test function
/*
function freeze_acc(btnRef)
{
  console.log("Freeze account test function");
  let freezeRemarksContainer=document.getElementById("freezeRemarksDropDownContainer");
  if(freezeRemarks)
  {
    freezeRemarks=freezeRemarks.trim();
    console.log("Freeze remarks success");
    create_ticket_in_desk("Debit Freeze S360 - "+freezeRemarks,"Request for Account freezing","Service Request","Fraud Transaction","Debit freeze","12345678901234",null,mail_for_desk,phone_for_desk,null,null,freezeRemarks);
  }
  else
  {
    freezeRemarksContainer.classList.remove("shake");
    setTimeout(()=>{freezeRemarksContainer.classList.add("shake")},100);
  }
}
*/
function hotlist_card(btnRef) {
  let d_card = debit_hotlist_in_prog; //No I18N
  let actionBtns=btnRef.parentNode.children;
  let yesBtn=actionBtns[0];
  let noBtn=actionBtns[1];
  let yesBtnContent=disableBtn(yesBtn);
  let noBtnContent=disableBtn(noBtn);
  console.log("Debit card Number", d_card);
  // document.getElementById("pop_actions").style.display = "none"; //No I18N
  // document.getElementById("pop_loader").style.display = "flex"; //No I18N
  // let request = {
  //   url: "https://sandbox.zohoapis.in/crm/v2/functions/debit_card_hotlisting_api/actions/execute?auth_type=apikey&zapikey=1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e", //No I18N
  //   params: {
  //     cardNo: d_card,
  //   },
  // };

  let ip = { cardno: d_card };
  hotlist_json={
    card_no:d_card,
    account_number:document.getElementById('drop-select').innerHTML
  };
  let funcName;
  if(isUatInstance)
  {
    funcName="Debit_Card_Hotlisting_api1";
  }
  else
  {
    funcName="Debit_Card_Hotlisting_api";
  }
  let acctDetails=fetchAccountDetails(document.getElementById('drop-select').innerHTML.replaceAll(" ","").replaceAll("\n",""));
  let solId;
  if(acctDetails && acctDetails.hasOwnProperty("A_c_Type"))
  {
    //savings Account
    solId=acctDetails.Branch;
  }
  else if(acctDetails && acctDetails.hasOwnProperty("A_c_Type_Current_Saving"))
  {
    //loan account
    solId=acctDetails.Branch_Name;
  }
  autoTicketCreated=false;
  call_crm_function(funcName, ip)
    .then(function (data) {
      // });

      // ZOHO.CRM.HTTP.get(request)
      //   .then((data) => {

      console.log(data);
      // data = JSON.parse(data);
      let success_msg = JSON.parse(data.details.output);
      if (success_msg.data.SuccessOrFailure == "Y" || success_msg.data.SuccessOrFailure == "y") {
        console.log("data is ", success_msg.data.RESULT_MSG);
        document.getElementById("pop_actions").style.display = "flex";
        document.getElementById("pop_loader").style.display = "none";
        show_another_pop(
          "block_confirmation_pop_up",
          "success_notification_pop_up",
          "success_message",
          success_msg.data.RESULT_MSG
        );
        
        let apiLog=getLogStrFromResp(data,d_card,lastNDigit);
        /*try{
          apiLog=JSON.stringify(data).slice(0,4990);
        }
        catch(err)
        {
          console.error("Exception in Stringifying API log",err,data);
          apiLog=String(data).slice(0,4990) || "";
        }
        */

        create_ticket_in_desk("Debit Card Hotlisting through S360","Request for Debit card hotlisting","Service Request","ATM/Debit Card","Hotlisting of Debit Card",hotlist_json.account_number,mask_str(hotlist_json.card_no,"card"),mail_for_desk,phone_for_desk,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
        autoTicketCreated=true;
        //refreshing the debit cards status
        fetch_debit_cards(currently_selected_drop_elem.textContent.match(/\d+/)[0]);
        //change for: 'sending logs' feature
        api_logs["Debit card hotlist API"]=data;
        //send log prompt trigger
        append_send_log("debit_hotlist_success_container","Debit card hotlist API");
      } else {
        // console.log(err);
        document.getElementById("pop_actions").style.display = "flex";
        document.getElementById("pop_loader").style.display = "none";
        show_another_pop(
          "block_confirmation_pop_up",
          "failure_notification_pop_up",
          "failure_message",
          success_msg.data.RESULT_MSG||"Something went wrong. Please try again later."
        );
        let apiLog=getLogStrFromResp(data,d_card,lastNDigit);
        write_to_error_log_module("Debit card hotlisting API",apiLog);
        //change for: 'sending logs' feature
        api_logs["Debit card hotlist API"]=data;
        //send log prompt trigger
        // append_send_log("debit_hotlist_fail_container","Debit card hotlist API");
        
        //
        
        /*
        try{
          apiLog=JSON.stringify(data).slice(0,4990);
        }
        catch(err)
        {
          console.error("Exception in Stringifying API log",err,data);
          apiLog=String(data).slice(0,4990) || "";
        }
        */

        create_ticket_in_desk("Debit Card Hotlisting through S360","Request for Debit card hotlisting","Service Request","ATM/Debit Card","Hotlisting of Debit Card",hotlist_json.account_number,mask_str(hotlist_json.card_no,"card"),mail_for_desk,phone_for_desk,null,null,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
        autoTicketCreated=true;
        //
      }
    })
    .catch((err) => {
      console.log(err);
      document.getElementById("pop_actions").style.display = "flex";
      document.getElementById("pop_loader").style.display = "none";
      show_another_pop(
        "block_confirmation_pop_up",
        "failure_notification_pop_up",
        "failure_message",
        "Something went wrong. Please try again later."
      );
    let apiLog=getLogStrFromResp(err,d_card,lastNDigit);
    // write error log module
    write_to_error_log_module("Debit card hotlisting API",apiLog);
    // append_send_log("debit_hotlist_fail_container","Debit card hotlist API");
    //
    
        /*
        try{
          apiLog=JSON.stringify(err).slice(0,4990);
        }
        catch(er)
        {
          console.error("Exception in Stringifying API log",er);
          apiLog=String(er).slice(0,4990) || "";
        }
        */
        if(!autoTicketCreated)
        {
          create_ticket_in_desk("Debit Card Hotlisting through S360","Request for Debit card hotlisting","Service Request","ATM/Debit Card","Hotlisting of Debit Card",hotlist_json.account_number,mask_str(hotlist_json.card_no,"card"),mail_for_desk,phone_for_desk,null,null,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
        }
        
    //
    })
    .finally(()=>{
      enableBtn(yesBtn,yesBtnContent);
      enableBtn(noBtn,noBtnContent);
      autoTicketCreated=false;
    })
    ; //No I18N
}

function hotlist_card2() {
  let d_card = debit_hotlist_in_prog; //No I18N
  console.log("Debit card Number", d_card);
  // let request = {
  //   url: "https://sandbox.zohoapis.in/crm/v2/functions/debit_card_hotlisting_api/actions/execute?auth_type=apikey&zapikey=1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e", //No I18N
  //   params: {
  //     cardNo: d_card,
  //   },
  // // };
  document.getElementById("debit_card_hotlist_loader").style.display = "flex";
  document.getElementById("d_c_h_error_msg").style.display = "none";
  let ip = {cardno: d_card };
  console.log("p is",ip);
  let funcName;
  if(isUatInstance)
  {
    funcName="Debit_Card_Hotlisting_api1";
  }
  else
  {
    funcName="Debit_Card_Hotlisting_api";
  }
  call_crm_function(funcName, ip)
    .then(function (data) {
      // });

      // ZOHO.CRM.HTTP.get(request)
      //   .then((data) => {

      console.log("debit card hotlist data",data);
      // data = JSON.parse(data);
      let success_msg = JSON.parse(data.details.output);
      if (success_msg.data.SuccessOrFailure != "N") {
        console.log("data is ", success_msg.data.RESULT_MSG);
        document.getElementById("debit_card_hotlist_loader").style.display = "none";
        document.getElementById("d_c_h_error_msg").style.display = "flex";
        document.getElementById("d_c_h_error_msg").innerHTML=success_msg.data.RESULT_MSG;

      } else {
        // console.log(err);
        document.getElementById("debit_card_hotlist_loader").style.display = "none";
        document.getElementById("d_c_h_error_msg").style.display = "flex";
        document.getElementById("d_c_h_error_msg").innerHTML=success_msg.data.RESULT_MSG;
      }
    })
    .catch((err) => {
      console.log("error in debit card hotlisting",err);

    // write error log module
    write_to_error_log_module("Debit card hotlisting API",err);
      document.getElementById("debit_card_hotlist_loader").style.display = "none";
      document.getElementById("d_c_h_error_msg").style.display = "flex";
      document.getElementById("d_c_h_error_msg").innerHTML="Could not carry out the action"+err;
    }); //No I18N
}

function func2(data) {
  let res = JSON.parse(data);
  console.log("loading close 2");
  document.getElementById("loadingWrapper").style.display = "none"; //No I18N
  modal.style.display = "block"; //No I18N
  // console.log(JSON.parse(res.details.output));
  if (res.code == "success") {
    //No I18N
    stadat = ""; //No I18N
    stadat = JSON.parse(res.details.output);
    stadat = stadat.data;
    //console.log(stadat);
    let resp = stadat.ChequebookDetails.successorfailure || ""; //No I18N
    //console.log(resp);
    if (resp == "S") {
      //No I18N
      var table = document.getElementById("modalDataTable1"); //No I18N
      let hdr = `<tr class="modalDataCb">	//No I18N
      <th>Total Cheque Book Issued</th>
      <th>Number of available cheque leaf</th>
      <th>Cheque Book Last Issued Date</th>
      <th>Amount in Clearing</th>
      </tr>`;
      table.innerHTML += hdr;
      var row = `<tr>
              <td>${stadat.ChequebookDetails.chequebooksissued1 || ""}</td>	
              <td>${stadat.ChequebookDetails.availleaf1 || ""}</td>	
              <td>${stadat.ChequebookDetails.lastIssueDt1 || ""}</td>	
              <td>${stadat.ChequebookDetails.clearingAmt1 || ""}</td>
            </tr>`;
      table.innerHTML += row;
    } else {
      let errmsg = stadat.ChequebookDetails.Message || ""; //No I18N
      //console.error('Cheque book API Error:', errmsg);	//No I18N
      console.log("loading close 1");
      document.getElementById("loadingWrapper").style.display = "none"; //No I18N
      modal1.style.display = "block"; //No I18N
      document.getElementById("mdlbdytxt1").innerHTML =
        "Error! <br/>" + errmsg + ". Please try again later."; //No I18N
      // document.getElementById("aadhaarOtpDiv").style.display = "none";	//No I18N
      span1.onclick = () => {
        modal1.style.display = "none"; //No I18N
      };
      // window.onclick = (event) => {
      //     if (event.target == modal1) {
      //         modal1.style.display = "none";	//No I18N
      //     }
      // }

      var recordData = {
        API_Name: "Cheque book API Error", //No I18N
        Error_Id: "36001215421", //No I18N
        Error_Source: "Customer 360 Widget", //No I18N
        Module_Name: "Contacts", //No I18N
        Module_Record_Id: rid, //No I18N
        Error_Description: errmsg.toString(), //No I18N
      };
      ZOHO.CRM.API.insertRecord({
        Entity: "CRM_Error_Log",
        APIData: recordData,
        Trigger: ["workflow"],
      }); //No I18N
    }
  } else {
    let errmsg = stadat.ChequebookDetails.Message || ""; //No I18N
    //console.error('Cheque book API Error:', errmsg);	//No I18N
    console.log("loading close 4");
    document.getElementById("loadingWrapper").style.display = "none"; //No I18N
    modal1.style.display = "block"; //No I18N
    document.getElementById("mdlbdytxt1").innerHTML =
      "Error! <br/>" + errmsg + ". Please try again later."; //No I18N
    // document.getElementById("aadhaarOtpDiv").style.display = "none";	//No I18N
    span1.onclick = () => {
      modal1.style.display = "none"; //No I18N
    };
    // window.onclick = (event) => {
    //     if (event.target == modal1) {
    //         modal1.style.display = "none";	//No I18N
    //     }
    // }

    var recordData = {
      API_Name: "Cheque book API Error", //No I18N
      Error_Id: "36001215421", //No I18N
      Error_Source: "Customer 360 Widget", //No I18N
      Module_Name: "Contacts", //No I18N
      Module_Record_Id: rid, //No I18N
      Error_Description: errmsg.toString(), //No I18N
    };
    ZOHO.CRM.API.insertRecord({
      Entity: "CRM_Error_Log",
      APIData: recordData,
      Trigger: ["workflow"],
    }); //No I18N
  }
}
//span click function
span_clk = () => {
  modal.style.display = "none"; //No I18N
  $("#modalDataTable1 tr").remove(); //No I18N
};
//error function
let error_fn = (error) => {
  //console.error('Locker API Error:', error);	//No I18N
  console.log("loading close 5");
  document.getElementById("loadingWrapper").style.display = "none"; //No I18N
  modal1.style.display = "block"; //No I18N
  document.getElementById("mdlbdytxt1").innerHTML =
    "Error! <br/>" + error + ". Please try again later."; //No I18N
  // document.getElementById("aadhaarOtpDiv").style.display = "none";	//No I18N
  span1.onclick = () => {
    modal1.style.display = "none"; //No I18N
  };
  /*
   */
  // window.onclick = (event) => {
  //     if (event.target == modal1) {
  //         modal1.style.display = "none";	//No I18N
  //     }
  // }

  var recordData = {
    API_Name: "Locker API Error", //No I18N
    Error_Id: "3607830001", //No I18N
    Error_Source: "Customer 360 Widget", //No I18N
    Module_Name: "Contacts", //No I18N
    Module_Record_Id: rid, //No I18N
    Error_Description: error.toString(), //No I18N
  };
  ZOHO.CRM.API.insertRecord({
    Entity: "CRM_Error_Log",
    APIData: recordData,
    Trigger: ["workflow"],
  }); //No I18N
};
//end of error function
//function
function api_callback(data) {
  let res = JSON.parse(data);
  console.log("loading close 6");
  document.getElementById("loadingWrapper").style.display = "none"; //No I18N
  modal.style.display = "block"; //No I18N
  // console.log(JSON.parse(res.details.output));
  if (res.code == "success") {
    //No I18N
    stadat = ""; //No I18N
    stadat = JSON.parse(res.details.output);
    stadat = stadat.data;
    //console.log(stadat);
    let resp = stadat.SucOrFail || ""; //No I18N
    //console.log(resp);
    if (resp == "Y") {
      //No I18N
      var table = document.getElementById("modalDataTable1"); //No I18N
      let hdr = `<tr class="modalDataCb">
      <th>Locker Branch</th>
      <th>Locker Number</th>
      <th>Locker Rent</th>
      <th>Overdue Rent</th>
      <th>Due Date</th>
      </tr>`;
      table.innerHTML += hdr;
      //console.log((stadat.WhatsappBankingLockerAPIList).length);
      for (var i = 0; i < stadat.WhatsappBankingLockerAPIList.length; i++) {
        var row = `<tr>
              <td>${stadat.WhatsappBankingLockerAPIList[i].SOL_ID || ""}</td>
              <td>${stadat.WhatsappBankingLockerAPIList[i].LOCKER_NO || ""}</td>	
              <td>${
                stadat.WhatsappBankingLockerAPIList[i].TOTAL_RENT || ""
              }</td>
              <td>${stadat.WhatsappBankingLockerAPIList[i].duerent || ""}</td>
              <td>${stadat.WhatsappBankingLockerAPIList[i].duedt || ""}</td>
            </tr>`;
        table.innerHTML += row;
      }
    } else {
      let errmsg = stadat.replyMsg || stadat.RESULT_MSG;
      errmsg = errmsg || "Locker API Technical Error"; //No I18N
      //console.error('Locker API Error:', errmsg);	//No I18N
      console.log("loading close 7");
      document.getElementById("loadingWrapper").style.display = "none"; //No I18N
      modal1.style.display = "block"; //No I18N
      document.getElementById("mdlbdytxt1").innerHTML =
        "Error! <br/>" + errmsg + ". Please try again later."; //No I18N
      // document.getElementById("aadhaarOtpDiv").style.display = "none";	//No I18N
      span1.onclick = () => {
        modal1.style.display = "none"; //No I18N
      };
      /*
      window.onclick = (event) => {
          if (event.target == modal1) {
              modal1.style.display = "none";	//No I18N
          }
      }
      */

      var recordData = {
        API_Name: "Locker API Error", //No I18N
        Error_Id: "3607830001", //No I18N
        Error_Source: "Customer 360 Widget", //No I18N
        Module_Name: "Contacts", //No I18N
        Module_Record_Id: rid, //No I18N
        Error_Description: error.toString(), //No I18N
      };
      ZOHO.CRM.API.insertRecord({
        Entity: "CRM_Error_Log",
        APIData: recordData,
        Trigger: ["workflow"],
      }).then(function (data) {
        //No I18N
        //console.log("-");	//No I18N
      });
    }
  } else {
    let errmsg = stadat.replyMsg || stadat.RESULT_MSG;
    errmsg = errmsg || "Locker API Technical Error"; //No I18N
    //console.error('Locker API Error:', errmsg);	//No I18N
    console.log("loading close 8");
    document.getElementById("loadingWrapper").style.display = "none"; //No I18N
    modal1.style.display = "block"; //No I18N
    document.getElementById("mdlbdytxt1").innerHTML =
      "Error! <br/>" + errmsg + ". Please try again later."; //No I18N
    // document.getElementById("aadhaarOtpDiv").style.display = "none";	//No I18N
    span1.onclick = () => {
      modal1.style.display = "none"; //No I18N
    };
    /*
    
    window.onclick = (event) => {
        if (event.target == modal1) {
            modal1.style.display = "none";	//No I18N
        }
    }
    */

    var recordData = {
      API_Name: "Locker API Error", //No I18N
      Error_Id: "3607830001", //No I18N
      Error_Source: "Customer 360 Widget", //No I18N
      Module_Name: "Contacts", //No I18N
      Module_Record_Id: rid, //No I18N
      Error_Description: error.toString(), //No I18N
    };
    ZOHO.CRM.API.insertRecord({
      Entity: "CRM_Error_Log",
      APIData: recordData,
      Trigger: ["workflow"],
    }).then(function (data) {
      //No I18N
      //console.log("-");	//No I18N
    });
  }
}
//end of function

function calculate_maturity_amount(n, m) {
  return m + n * m;
}
function get_non_funds(page) {
  console.log("inside get non funds", rid[0]);
  ZOHO.CRM.API.searchRecord({
    Entity: "Non_Fund_Based",
    Type: "criteria",
    Query: "(Customer_Name:equals:" + rid[0] + ")",
    page: page,
  })
    .then((d) => {
      try {
        new_non_funds.push(...d.data);
      } catch (e) {
        console.log("Error in get non funds", e);
        d.info = { more_records: false };
      }

      if (d.info.more_records) {
        get_non_funds(page + 1);
      } else {
        console.log("nfb count is", new_non_funds.length);
        populate_nfb_table(new_non_funds);
      }
    })
    .catch((e) => {
      console.log("error caught in loan accounts API", e);
      populate_nfb_table([], false);
    });
}
function format_bal(bal) {
  if (bal == null || bal == "-") {
    return "-";
  }
  try {
    bal = +bal;
  } catch (e) {
    console.log("error in format balance", e);
    return "-";
  }

  return format_unit(Math.abs(bal));


  
}
function format_bal2(bal) {
  if (bal == null || bal == "-") {
    return "-";
  }
  try {
    bal = +bal;
  } catch (e) {
    console.log("error in format balance", e);
    return "-";
  }
  let bal1 = Math.abs(bal);
  x=bal1.toString();
    var afterPoint = '';
    if(x.indexOf('.') > 0)
       afterPoint = x.substring(x.indexOf('.'),x.length);
    x = Math.floor(x);
    x=x.toString();
    var lastThree = x.substring(x.length-3);
    var otherNumbers = x.substring(0,x.length-3);
    if(otherNumbers != '')
        lastThree = ',' + lastThree;
    var formattedAmount = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
 
  // formattedAmount = "Rs. " + formattedAmount;

  return formattedAmount;

}
function format_bal4(bal) {

  if (bal == null || bal == "-") {
    return "-";
  }
  if (bal == 0 || bal == "0") {
    return 0;
  }
  try {
    bal = +bal;
  } catch (e) {
    console.log("error in format balance", e);
    return "-";
  }
  bal = bal.toFixed(2);
  let bal1 = Math.abs(bal);
  let suf = "";
  x=bal1.toString();
    var afterPoint = '';
    if(x.indexOf('.') > 0)
       afterPoint = x.substring(x.indexOf('.'),x.length);
    x = Math.floor(x);
    x=x.toString();
    var lastThree = x.substring(x.length-3);
    var otherNumbers = x.substring(0,x.length-3);
    if(otherNumbers != '')
        lastThree = ',' + lastThree;
    var formattedAmount = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
 
  // formattedAmount = "Rs. " + formattedAmount;

  return formattedAmount;

}
function format_bal3(bal) {
  if (bal == null || bal == "-") {
    return "-";
  }
  try {
    bal = +bal;
  } catch (e) {
    console.log("error in format balance", e);
    return "-";
  }
  let bal1 = Math.abs(bal);
  x=bal1.toString();
    var afterPoint = '';
    if(x.indexOf('.') > 0)
       afterPoint = x.substring(x.indexOf('.'),x.length);
    x = Math.floor(x);
    x=x.toString();
    var lastThree = x.substring(x.length-3);
    var otherNumbers = x.substring(0,x.length-3);
    if(otherNumbers != '')
        lastThree = ',' + lastThree;
    var formattedAmount = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
  if (bal<0) {
    formattedAmount += " Dr";
  }else if (bal>0) {
    formattedAmount += " Cr";
  }
  // formattedAmount = "Rs. " + formattedAmount;

  return formattedAmount;

}
function format_unit(u){
  if (u >= 100000) {
    return (u/100000).toFixed(2) + " Lakhs";
  }
  return u;
}

function navigate_to_page_non_fund(index,clicked){
  //add loader on top of btn
  if(page_loading)
  {
    return;
  }
  if(index==1&&!next_btn)
  {
    return;
  }
  if(nfub_current_page+index>=1)
  {
    page_loading=true;
    // clicked.classList.add("disable-page-btn");
    nfub_current_page+=index;
    let elem=document.getElementById('prev_btn');
    if(nfub_current_page==1)
    {
      elem.classList.add("disable-page-btn");
    }
    else
    {
      elem.classList.remove("disable-page-btn");
    }
    document.getElementById('nfub_page_number').innerHTML=nfub_current_page;
    //show loader for nfub table
    get_non_funds2_for_a_page(nfub_current_page);
    //remove loader on top of btn
  }
}
async function get_non_funds2_for_a_page(page) {
  if(page<=0)
  {
    return;
  }
  if(page==1)
  {
    //disable previous button
  }
  else
  {
    //enable previous button
  }
  //hit the api
  //show loader
  table_loader('tblbgrdtb',15,8);
  let closed_acc=null;
  if(document.getElementById("nfb_check_box").checked)
  {
    closed_acc="Yes";
  }
  else
  {
    closed_acc="No";
  }
  let resp = await new_module_search("wrapper_for_module_search111", {
    Module: "Non_Fund_Based",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
    Closed_Accounts: closed_acc
  });
  if (resp.status == "failure") {
    console.log("error in non funds fetching", resp);
    populate_nfb_table([], false);
  }
  else
  {
    //in result if more records is true - enable next button
    try{
      let temp=resp.data;
      //populate results
      //stop loader
      populate_nfb_table(resp.data,document.getElementById("nfb_check_box").checked);
      if(resp.info.more_records)
      {
        //enable next button
        document.getElementById("next_btn").classList.remove("disable-page-btn");
        next_btn=true;
      }
      else
      {
        //disable next button
        document.getElementById("next_btn").classList.add("disable-page-btn");
        next_btn=false;
      }
    }
    catch(e)
    {
      populate_nfb_table([],false);
      //disbale next button
    }
    
  }
  page_loading=false;
  console.log("inside get non funds2 for a page", page);
  
}

async function get_non_funds2(page) {
  if(page>too_large_cut_off)
  {
    console.log("too large customer",new_non_funds);
    //new_non_funds=new_non_funds.slice(0,201);
    //delete new_non_funds;
    non_fund_too_large=true;
    clearInterval(custComInterval1);
    /* - To be uncommented when / if sanction limit fields are brought into S-360
    document.getElementById("ctttlsanclmtlc").innerHTML=`<div class="inline-check" onclick="fetch_sanction_data()">check</div>`;
    document.getElementById("ctsanclmtbg").innerHTML=`<div class="inline-check" onclick="fetch_sanction_data()">check</div>`;
    */
    get_non_funds2_for_a_page(1);
    document.getElementById("pagination_panel").classList.remove('hide');
    return;
  }
  console.log("inside get non funds2", page);
  //prod
  /*
  let resp = await new_module_search2("wrapper_for_module_search", {
    Module: "Non_Fund_Based",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  });
  */

  //test
  // let resp = await new_module_search2("wrapper_for_module_search1", {Module: "Non_Fund_Based",Page: page,Customer_ID: rid[0],Customer_ID_for_Analytics: customer_id_for_analytics});
  /*
  let resp = await new_module_search("Test_module_search_for_c360", {
    Module: "Non_Fund_Based",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  });
  */
 //source=analytics using join queries
 let resp = await new_module_search("wrapper_for_module_search11", {
    Module: "Non_Fund_Based",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  });

  if (resp.status == "failure") {
    console.log("error in non funds fetching", resp);
    populate_nfb_table([], false);

      // write error log module
      write_to_error_log_module({});
  } else {
    let d = resp;
    try {
      new_non_funds.push(...d.data);
    } catch (e) {
      console.log("Got error in get advances", e);
      d.info = { more_records: false };
    }

    if (d.info.more_records) {
      get_non_funds2(page + 1);
    } else {
      console.log("nfb count is", new_non_funds.length);
      populate_nfb_table(new_non_funds);
    }
  }
}
function get_advances(page) {
  console.log("inside get advances");
  ZOHO.CRM.API.searchRecord({
    Entity: "Loan_Accounts",
    Type: "criteria",
    Query: "(Customer_Name:equals:" + rid + ")",
    page: page,
  })
    .then((d) => {
      console.log("Advances got is", d);
      try {
        new_advances.push(...d.data);
      } catch (e) {
        console.log("Error in get non funds", e);
        d.info = { more_records: false };
      }

      if (d.info.more_records) {
        get_advances(page + 1);
      } else {
        fb_adv = sort_accounts_adv(new_advances);
        populate_fb_advances(fb_adv);
        try {
          populate_advances_chart(new_advances);
        } catch (e) {
          console.log("error in advances chart", e);
        }
      }
    })
    .catch((e) => {
      console.log("error caught in loan accounts API", e);
      populate_fb_advances([], false);
    });
}
async function get_advances2(page) {
  console.log("inside get advances2", page);
  //source = CRM
  console.log("ADV flg", advances_flg);
  if (advances_flg) {
    return;
  }
  // let resp = await new_module_search2("wrapper_for_module_search", {
  //   Module: "Loan_Accounts",
  //   Page: page,
  //   Customer_ID: rid[0],
  //   Customer_ID_for_Analytics: customer_id_for_analytics,
  // });
  
  //source = Analytics

  
  // let resp = await new_module_search("wrapper_for_module_search1", {
  //   Module: "Loan_Accounts",
  //   Page: page,
  //   Customer_ID: rid[0],
  //   Customer_ID_for_Analytics: customer_id_for_analytics,
  // });


    //source = analytics joined query test
  let resp = await new_module_search("wrapper_for_module_search11", {
    Module: "Loan_Accounts",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  });

  /*
    .catch((err) => {
      console.log("ERROR IN AWAIT RESPONSE");
      display_panel_overlay("adv_panel_overlay", "Oops! Something went wrong");
      document.getElementById("ccttotlnamt").innerHTML = `Could'nt fetch`;
      document.getElementById("ccttdpamt").innerHTML = `Could'nt fetch`;
      // write error log module
      write_to_error_log_module({});
    });
    */
  /*
  let resp = await new_module_search("Test_module_search_for_c360", {
    Module: "Loan_Accounts",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  });
  */

  console.log("LOG FOR ADVANCES 2", resp);
  if (resp.status == "failure") {
    console.log("error in advances chart", err);
    display_panel_overlay("adv_panel_overlay", "Oops! Something went wrong");
    document.getElementById("ccttotlnamt").innerHTML = `Could'nt fetch`;
    document.getElementById("ccttdpamt").innerHTML = `Could'nt fetch`;
    // write error log module
    write_to_error_log_module({});
  } else {
    let d = resp;
    try {
      new_advances.push(...d.data);
    } catch (e) {
      console.log("Got error in get advances", e);
      d.info = { more_records: false };
    }

    if (d.info.more_records) {
      get_advances2(page + 1);
    } else {
      fb_adv = sort_accounts_adv(new_advances);
      console.log("Data for ADV", fb_adv);
      console.log("ADV POP!",adv_populated);
        if (!adv_populated) {
      populate_fb_advances(fb_adv);
      adv_populated = true;
        }
        try{
          empflg =employee_account_format(new_advances[0].Emp_Flag || "-");
          document.getElementById("ctempflg").innerHTML = empflg;
        }
        catch(e)
        {
          document.getElementById("ctempflg").innerHTML = "-";
          console.log("error in reading empflg",e);
        }
      // call_loan_acc_resolve_availed();
      console.log("CALLING ADV RESOLVED SERVICES");
      call_deposits_resolve_service("adv");
      advances_flg = true;
    
      if (deposits_flg && advances_flg) {
        //populate all the service request account number drop-downs
        
        populate_dropdowns(
          [
            "acc_drop_content",
            "cheque_book_drop_content",
            "mini_statement_drop_content",
            "balance_inquiry_drop_content",
            "standing_instructions_drop_content",
            "lien_acc_drop_content",
            "acc_transaction_drop_content",
            "freeze_acc_drop_content",
            "debit_card_tracking_drop_content",
            "cheque_book_tracking_drop_content"

          ],
          new_deposits.concat(new_advances)
        );
        populate_new_dropdowns(
          [
            "atmdropDownContainer"
          ],
          new_deposits.concat(new_advances)
        );
        // freeze_populate_data(new_deposits.concat(new_advances));
        console.log("NEEDED INFO ::::",new_deposits.length, new_advances.length, new_deposits.concat(new_advances).length);

        //populate outbound calls section
        dynamic_SR_navigate(null,true);
      }
      console.log("populating loan accounts and lien accounts");
      populate_dropdowns(
        ["loan_acc_drop_content"],
        new_advances
      );
      try {
        populate_advances_chart(new_advances);
      } catch (e) {
        console.log("error in advances chart", e);
      }
    }
  }
}

async function getPage(tab,val){

  if (!allow_paging) {
    allow_paging = true;
    current_page = document.getElementById("page_num_"+tab).title;
    closed_rel[tab] = "N";
    if (tab == "adv") {
      closed_rel[tab] = document.getElementById("nfb_check_box").checked ? "Y":"N";
    }else if(tab == "td"){
      closed_rel[tab] = document.getElementById("tdCheckBox").checked ? "Y":"N";
    }else{
      closed_rel[tab] = document.getElementById("casaCheckBox").checked ? "Y":"N";
    }
    
    
    // call crm function for next page
    // console.log("PAGE NUM", String(parseInt(current_page.innerHTML) + val));
    related_flg[tab] = false;
    
    await get_relatedrc(String(parseInt(current_page)+ val),tab);
    getRelatedAASRecords(tab);
    // update page_num
    // current_page.innerHTML = String(parseInt(current_page.innerHTML) + val);
    allow_paging = false;
  }
}
async function get_page(n) {
  page_no = parseInt(document.getElementById("page_no").innerHTML);
  console.log(page_no + n);
  get_ticket(page_no + n);
}
function create_lead_new(){
  base_url = "https://ucrm.unionbankofindia.co.in/crm/org60009764661/tab/Leads/create?layoutId=1068000000000167&custId="+custid;
  window.open(base_url);
}
async function get_desk_contact(cid,ds_record_id_1) {
  if (
    ds_record_id_1 == null ||
    ds_record_id_1 == undefined ||
    ds_record_id_1 == " "||
    ds_record_id_1 == ""
  ) {
    console.log("loading flex 1");
  document.getElementById("loadingWrapper").style.display = "flex";
  var conn_name = "zohodesk"; //No I18N
  base_url =
    "https://service.unionbankofindia.co.in/api/v1/contacts/search?limit=1&customField1=cf_customer_id:" +
    cid; //No I18N
  console.log(base_url);
  var req_data = {
    headers: {
      "x-zoho-fromservice":"ZohoSupport"
      }, //No I18N
    method: "GET", //No I18N
    url: base_url, //No I18N
  };
  return ZOHO.CRM.CONNECTION.invoke(conn_name, req_data);
}
console.log("GETTING DESK DATA WITH RECORD ID", ds_record_id_1);
var conn_name = "zohodesk"; //No I18N
  base_url =
    "https://service.unionbankofindia.co.in/api/v1/contacts/" +
    ds_record_id_1; //No I18N
  console.log(base_url);
  var req_data = {
    headers: {
      "x-zoho-fromservice":"ZohoSupport"
      }, //No I18N
    method: "GET", //No I18N
    url: base_url, //No I18N
  };
  return ZOHO.CRM.CONNECTION.invoke(conn_name, req_data);
}

async function get_ticket(page) {
  //columns: Ticket no, Status, Channel, priority, Subject
  console.log("loading flex 2");
  document.getElementById("loadingWrapper").style.display = "flex";
  console.log("inside get Ticket", page, rid);
  var index;
  if (page == 1) {
    index = 0;
  }
  if (page > 1) {
    index = (page - 1) * 100 ;
  }
  console.log("TICKET LIST", tkt_lst);
  if (tkt_lst.hasOwnProperty(page)) {
    console.log("USING stored VALUES........", page);
    stadat = tkt_lst[page];
    console.log("accessing ticket data",stadat);
    if (stadat != "" && stadat != null && stadat != undefined) {
      //No I18N
      // document.getElementById("tickTable").style.display = "table";	//No I18N
      // document.getElementById("tickTable").style.border = "none";	//No I18N
      //document.getElementById("modalDataTable1").style.padding = "50px 200px";	//No I18N

      //TODO ADD TicketNUMBER TO THE NAME
      $("#tickTable tr").remove(); //No I18N
      $("#tickTable tbody").remove(); //No I18N
      //console.log(data);
      var table = document.getElementById("tickTable"); //No I18N
      let hdr = `<tr class="tblheadRow">
<th class="thdat" style="width:80px">Ticket Number</th>
<th class="thdat" style="width:80px">Status</th>
<th class="thdat" style="width:100px">Created Date</th>
<th class="thdat" >Subject</th>
<th class="thdat" >Type</th>
<th class="thdat" >Area</th>
<th class="thdat" >Sub-Area</th>
</tr>`;
      table.innerHTML += hdr;
      for (var i = 0; i < stadat.length; i++) {
        //columns - Ticket No, Type, Area, SubArea Status, Channel , Priority
        let priority=stadat[i].priority;
        let cf_obj=stadat.cf;
        if(stadat[i].ticketNumber=="11102946")
        {
          console.log("11102946");
        }
            if(priority=='-None-')
            {
              priority='-';
            }
            var row = `<tr style="cursor:pointer;background-color: white;padding: 1%;border: 1px solid #d7e2ed;"  id=${
              stadat[i].id
            } subject=${stadat[i].subject} status=${stadat[i].status} channel=${
              stadat[i].channel
            }>
        <td class="tdtit" id="${
          stadat[i].id
        }" title="Click here!" style="text-align:center;color:#328cef; cursor:pointer;" onclick="redirect_to_desk(this)">${
              stadat[i].ticketNumber || "-"
            }</td>
        <td class="tdtit" style="text-align:center;">${stadat[i].status || "-"}</td>
        <td class="tdtit" style="text-align:center;">${stadat[i].createdTime?format_date(stadat[i].createdTime):"-"}</td>
        <td class="tdtit" >${stadat[i].subject || "-"}</td>
        <td class="tdtit" style="text-align:center;">${cf_obj?cf_obj.cf_type||"-":"-"}</td>
        <td class="tdtit" style="text-align:center;">${cf_obj?cf_obj.cf_area||"-":"-"}</td>
        <td class="tdtit" style="text-align:center;">${stadat[i].cf.cf_sub_area || "-"}</td>
      </tr>`;
        table.innerHTML += row;
      }
      document.getElementById("ticketTable-container").style.display = "block";
      document.getElementById("page_no").innerHTML = page;
      if (page == 1) {
        document.getElementById("tkt-prev").classList.remove("nextprevToggle");
        document.getElementById("tkt-prev").classList.add("nextprevToggle1");
        // document.getElementById("tkt-prev").onclick = "";
        document.getElementById("tkt-prev").style.pointerEvents = "none";
        if (stadat.length < 100) {
          document
            .getElementById("tkt-next")
            .classList.remove("nextprevToggle");
          document.getElementById("tkt-next").classList.add("nextprevToggle1");
          // document.getElementById("tkt-next").onclick = "";
          document.getElementById("tkt-next").style.pointerEvents = "none";
        }
        else
        {
          document
            .getElementById("tkt-next")
            .classList.add("nextprevToggle");
          document.getElementById("tkt-next").classList.remove("nextprevToggle1");
          // document.getElementById("tkt-next").onclick = "";
          document.getElementById("tkt-next").style.pointerEvents = "auto";
        }
      } else if (page > 1) {
        document.getElementById("tkt-prev").classList.remove("nextprevToggle1");
        document.getElementById("tkt-prev").classList.add("nextprevToggle");
        // document.getElementById("tkt-prev").addEventListener("click",()=>{
        //   get_page(-1);
        // });
        document.getElementById("tkt-prev").style.pointerEvents = "auto";
        if (stadat.length < 100) {
          document
            .getElementById("tkt-next")
            .classList.remove("nextprevToggle");
          document.getElementById("tkt-next").classList.add("nextprevToggle1");
          // document.getElementById("tkt-next").onclick = "";
          document.getElementById("tkt-next").style.pointerEvents = "none";
        } else {
          document
            .getElementById("tkt-next")
            .classList.remove("nextprevToggle1");
          document.getElementById("tkt-next").classList.add("nextprevToggle");
          // document.getElementById("tkt-next").onclick = "";
          document.getElementById("tkt-next").style.pointerEvents = "auto";
        }
      } else {
        console.log("PAGE LESS THAN 1!!", page);
      }
      // document.getElementById("h1").innerHTML = search_result_html;	//No I18N
      // document.getElementById("h1").style.display = "block";	//No I18N
      // document.getElementById("h1").style.fontSize = "1.5rem";	//No I18N
      // document.getElementById("h1").style.fontWeight = "300";	//No I18N
    } else {
      document.getElementById("notickettable-container").style.display =
        "block";
      // document.getElementById("h1").innerHTML = search_result_html;	//No I18N
      // document.getElementById("h1").style.display = "block";	//No I18N
      // document.getElementById("h1").style.fontSize = "1.5rem";	//No I18N
      // document.getElementById("h1").style.fontWeight = "300";	//No I18N
    }
    console.log("loading close 9");
    document.getElementById("loadingWrapper").style.display = "none";
    // service.unionbankofindia.co.in
  } else {
    var conn_name = "zohodesk"; //No I18N

    console.log("CRM DESK ID 1", crm_desk_id);
    /*
    base_url =
      "https://service.unionbankofindia.co.in/api/v1/contacts/" +
      ds_record_id +
      "/tickets?include=departments,team,assignee&limit=100&from=" +
      index; //No I18N
    */
      base_url =
      "https://service.unionbankofindia.co.in/api/v1/tickets/search?limit=100&contactId="+ds_record_id+"&from="+`${index}&sortBy=-createdTime`; //No I18N
    console.log(base_url);
    var req_data = {
      headers: {
        "x-zoho-fromservice":"ZohoSupport"
        }, //No I18N
      method: "GET", //No I18N
      url: base_url, //No I18N
    };
    ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
      .then(function (data) {
        console.log("DESK response data is", data); //No I18N
        //start of table
        $("#tickTable tr").remove(); //No I18N
        $("#tickTable tbody").remove();
        stadat = ""; //No I18N
        stadat = data.details.statusMessage.data || ""; //No I18N
        console.log("TICKET DATA", stadat);
        tkt_lst[page] = stadat;
        console.log("accessing ticket data",stadat);
        if (stadat != "" && stadat != null && stadat != undefined) {
          //No I18N
          // document.getElementById("tickTable").style.display = "table";	//No I18N
          // document.getElementById("tickTable").style.border = "none";	//No I18N
          //document.getElementById("modalDataTable1").style.padding = "50px 200px";	//No I18N

          //TODO ADD TicketNUMBER TO THE NAME

          //console.log(data);
          var table = document.getElementById("tickTable"); //No I18N
          // columns - Ticket No, Type, Area, SubArea Status, Channel , Priority
          let hdr = `<tr class="tblheadRow">
          <th class="thdat" style="width:80px">Ticket Number</th>
          <th class="thdat" style="width:80px">Status</th>
          <th class="thdat" style="width:100px">Created Date</th>
          <th class="thdat" >Subject</th>
          <th class="thdat" >Type</th>
          <th class="thdat" >Area</th>
          <th class="thdat" >Sub-Area</th>
          </tr>`;
          table.innerHTML += hdr;
          console.log("Tickets Fetched count", stadat.length);
          for (var i = 0; i < stadat.length; i++) {
            let priority=stadat[i].priority;
            let cf_obj=stadat[i].cf;
            if(priority=='-None-')
            {
              priority='-';
            }
            var row = `<tr style="cursor:pointer;background-color: white;padding: 1%;border: 1px solid #d7e2ed;"  id=${
              stadat[i].id
            } subject=${stadat[i].subject} status=${stadat[i].status} channel=${
              stadat[i].channel
            }>
        <td class="tdtit" id="${
          stadat[i].id
        }" title="Click here!" style="text-align:center;color:#328cef; cursor:pointer;" onclick="redirect_to_desk(this)">${
              stadat[i].ticketNumber || "-"
            }</td>
        <td class="tdtit" style="text-align:center;" >${stadat[i].status || "-"}</td>
        <td class="tdtit" style="text-align:center;" >${stadat[i].createdTime?format_date(stadat[i].createdTime):"-"}</td>
        <td class="tdtit" >${stadat[i].subject || "-"}</td>
        <td class="tdtit" style="text-align:center;" >${cf_obj?cf_obj.cf_type||"-":"-"}</td>
        <td class="tdtit" style="text-align:center;" >${cf_obj?cf_obj.cf_area||"-":"-"}</td>
        <td class="tdtit" style="text-align:center;" >${stadat[i].cf.cf_sub_area || "-"}</td>
      </tr>`;
            table.innerHTML += row;
          }
          document.getElementById("ticketTable-container").style.display =
            "block";
          document.getElementById("page_no").innerHTML = page;
          if (page == 1) {
            document
              .getElementById("tkt-prev")
              .classList.remove("nextprevToggle");
            document
              .getElementById("tkt-prev")
              .classList.add("nextprevToggle1");
            // document.getElementById("tkt-prev").onclick = "";
            document.getElementById("tkt-prev").style.pointerEvents = "none";
            if (stadat.length < 100) {
              document
                .getElementById("tkt-next")
                .classList.remove("nextprevToggle");
              document
                .getElementById("tkt-next")
                .classList.add("nextprevToggle1");
              // document.getElementById("tkt-next").onclick = "";
              document.getElementById("tkt-next").style.pointerEvents = "none";
            }
          } else if (page > 1) {
            document
              .getElementById("tkt-prev")
              .classList.remove("nextprevToggle1");
            document.getElementById("tkt-prev").classList.add("nextprevToggle");
            // document.getElementById("tkt-prev").addEventListener("click",()=>{
            //   get_page(-1);
            // });
            document.getElementById("tkt-prev").style.pointerEvents = "auto";
            if (stadat.length < 100) {
              document
                .getElementById("tkt-next")
                .classList.remove("nextprevToggle");
              document
                .getElementById("tkt-next")
                .classList.add("nextprevToggle1");
              // document.getElementById("tkt-next").onclick = "";
              document.getElementById("tkt-next").style.pointerEvents = "none";
            } else {
              document
                .getElementById("tkt-next")
                .classList.remove("nextprevToggle1");
              document
                .getElementById("tkt-next")
                .classList.add("nextprevToggle");
              // document.getElementById("tkt-next").onclick = "";
              document.getElementById("tkt-next").style.pointerEvents = "auto";
            }
          } else {
            console.log("PAGE LESS THAN 1!!", page);
          }
          // document.getElementById("h1").innerHTML = search_result_html;	//No I18N
          // document.getElementById("h1").style.display = "block";	//No I18N
          // document.getElementById("h1").style.fontSize = "1.5rem";	//No I18N
          // document.getElementById("h1").style.fontWeight = "300";	//No I18N
        } else {
          document.getElementById("notickettable-container").style.display =
            "block";
          // document.getElementById("h1").innerHTML = search_result_html;	//No I18N
          // document.getElementById("h1").style.display = "block";	//No I18N
          // document.getElementById("h1").style.fontSize = "1.5rem";	//No I18N
          // document.getElementById("h1").style.fontWeight = "300";	//No I18N
        }
        console.log("loading close 10");
        document.getElementById("loadingWrapper").style.display = "none";
        //end of table
      })
      .catch((err) => {
        console.log("ERROR IN AWAIT RESPONSE");
        // write error log module
        write_to_error_log_module("Desk tickets fetch API using contact id",err);
        display_panel_overlay(
          "tkt_panel_overlay",
          "Oops! Something went wrong"
        );
        // document.getElementById("ccttotlnamt").innerHTML = `Could'nt fetch`;
        // document.getElementById("ccttdpamt").innerHTML = `Could'nt fetch`;
      });
  }

  /*
  let resp = await new_module_search("Test_module_search_for_c360", {
    Module: "Loan_Accounts",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  });
  */

  // console.log("LOG FOR TICKET", resp);
  // if (resp.status == "failure") {
  //   console.log("error in advances chart", err);
  //   display_panel_overlay("adv_panel_overlay", "Oops! Something went wrong");
  //   document.getElementById("ccttotlnamt").innerHTML = `Could'nt fetch`;
  //   document.getElementById("ccttdpamt").innerHTML = `Could'nt fetch`;
  // } else {
  //   let d = resp;
  //   try {
  //     new_advances.push(...d.data);
  //   } catch (e) {
  //     console.log("Got error in get advances", e);
  //     d.info = { more_records: false };
  //   }

  //   if (d.info.more_records) {
  //     get_advances2(page + 1);
  //   } else {
  //     fb_adv = sort_accounts_adv(new_advances);
  //     console.log("Data for ADV", fb_adv);
  //     populate_fb_advances(fb_adv);
  //     advances_flg = true;
  //     try {
  //       populate_advances_chart(new_advances);
  //     } catch (e) {
  //       console.log("error in advances chart", e);
  //     }
  //   }
  // }
}

async function create_desk_contact(last_name,mobile,cid,crm_desk_id) {
  // window.open();
  console.log("inside create contact", ds_record_id);
  console.log("inside create contact", crm_desk_id);
  document.getElementById("loadingWrapper").style.display = "none";
  if (ds_record_id != null && ds_record_id!="") {
    if (crm_desk_id.details.statusMessage == "" || crm_desk_id.details.statusMessage.hasOwnProperty("errorCode")) {
      base_url = "https://service.unionbankofindia.co.in/api/v1/contacts"; //No I18N
      console.log("NAME AND PHONE",last_name,mobile);
      console.log(base_url);
      var req_data = {
        parameters: {
          "lastName": last_name_for_desk,
          "firstName": first_name_for_desk,
          "email": mail_for_desk,
          "mobile": mobile,
          "phone": phone_for_desk,
          "country":desk_contat_data.Home_Country,
          "city":desk_contat_data.Home_City,
          "state":desk_contat_data.Home_State,
          "cf":{
            "cf_customer_record_id": rid[0],
            "cf_middle_name": middle_name_for_desk,
            "cf_customer_id": cid,
            "cf_is_existing_customer":"Yes",
            "cf_last_name_finacle":desk_contat_data.Last_Name_Finacle,
            "cf_pincode":desk_contat_data.Home_ZIP,
            "cf_customer_title":desk_contat_data.Customer_Title,
            "cf_address_line1":desk_contat_data.HOME_ADDRESS_LINE1,
            "cf_address_line2":desk_contat_data.HOME_ADDRESS_LINE2,
            "cf_resident_status":desk_contat_data.Resident_Status,
            "cf_branch_sol_id":desk_contat_data.Branch_SOL_ID,
            "cf_base_branch_name":desk_contat_data.Branch_Name
          }
        },
        headers: {
          "x-zoho-fromservice":"ZohoSupport"
          }, //No I18N
        method: "POST", //No I18N
        url: base_url, //No I18N
      };
      let resp = await ZOHO.CRM.CONNECTION.invoke("zohodesk", req_data).catch((err) =>{console.log("ERROR in CREATE CONTACT", err);});
      console.log("CREATE DESK CONTACT",resp);
      ds_record_id="";
      return resp;
    }
    else
    {
      return crm_desk_id;
    }
    
  }
  let resp = '';
  if (crm_desk_id.code != "SUCCESS") {

    // CASE OF API FAILURE
    display_panel_overlay(
      "ticket_panel_overlay",
      "Oops! Something went wrong"
    );
    return;
  }
  if (crm_desk_id.details.statusMessage != "") {
    // check crm record id is not empty
    // check desk record id is not empty

    // update contact with desk record id and 
    let desk_record = crm_desk_id.details.statusMessage.data[0]
    let crm_record_id = desk_record.cf.cf_customer_record_id || "";
    console.log("CRM RECORD ID", crm_record_id);
    if (crm_record_id == "") {
      var conn_name = "zohodesk"; //No I18N
      base_url = "https://service.unionbankofindia.co.in/api/v1/contacts/" + desk_record.id; //No I18N
      console.log(base_url);
      var req_data = {
        parameters: {
          "cf": {"cf_customer_record_id":rid[0]},
        },
        headers: {
          "x-zoho-fromservice":"ZohoSupport"
          }, //No I18N
        method: "PATCH", //No I18N
        url: base_url, //No I18N
      };
      resp = await ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
      .catch((err) => {console.log("ERROR in UPDATE DESK RECORD", err);});
      console.log("UPDATE THE DESK RECORD",resp);
      return resp;
    }
    console.log("NO UPDATE IN DESK RECORD");
    return crm_desk_id;
  }if (crm_desk_id.details.statusMessage == "" || resp.details.statusMessage.hasOwnProperty("errorCode")) {
    base_url = "https://service.unionbankofindia.co.in/api/v1/contacts"; //No I18N
    console.log("NAME AND PHONE",last_name,mobile);
    console.log(base_url);
    var req_data = {
      parameters: {
        "lastName": last_name_for_desk,
        "firstName": first_name_for_desk,
        "email": mail_for_desk,
        "mobile": mobile,
        "phone": phone_for_desk,
        "country":desk_contat_data.Home_Country,
        "city":desk_contat_data.Home_City,
        "state":desk_contat_data.Home_State,
        "cf":{
          "cf_customer_record_id": rid[0],
          "cf_middle_name": middle_name_for_desk,
          "cf_customer_id": cid,
          "cf_is_existing_customer":"Yes",
          "cf_last_name_finacle":desk_contat_data.Last_Name_Finacle,
          "cf_pincode":desk_contat_data.Home_ZIP,
          "cf_customer_title":desk_contat_data.Customer_Title,
          "cf_address_line1":desk_contat_data.HOME_ADDRESS_LINE1,
          "cf_address_line2":desk_contat_data.HOME_ADDRESS_LINE2,
          "cf_resident_status":desk_contat_data.Resident_Status,
          "cf_branch_sol_id":desk_contat_data.Branch_SOL_ID,
          "cf_base_branch_name":desk_contat_data.Branch_Name
        }
      },
      headers: {
        "x-zoho-fromservice":"ZohoSupport"
        }, //No I18N
      method: "POST", //No I18N
      url: base_url, //No I18N
    };
    resp = await ZOHO.CRM.CONNECTION.invoke("zohodesk", req_data).catch((err) =>{console.log("ERROR in CREATE CONTACT", err);});
    console.log("CREATE DESK CONTACT",resp);
    return resp;
  }
  
  // console.log("GET CONTACT RESPONSE", resp);
  if (resp.code != "SUCCESS") {
    display_panel_overlay(
      "ticket_panel_overlay",
      "Oops! Something went wrong"
    );
  }
  // base_url = "https://service.unionbankofindia.co.in/api/v1/contacts/" + rid[0]; //No I18N
  // console.log(base_url);
  // var req_data = {
  //   parameters: {
  //     "lastName": last_name,
  //     "mobile": mobile,
  //     "cf_customer_record_id": rid[0],
  //     "cf_customer_id": cid
  //   },
  //   headers: {}, //No I18N
  //   method: "POST", //No I18N
  //   url: base_url, //No I18N
  // };
  // return ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
}
async function get_ticket2(page) {
  console.log("inside get ticket2", page, rid);
  var conn_name = "zohodesk"; //No I18N
  /*base_url =
    "https://service.unionbankofindia.co.in/api/v1/contacts/" +
    ds_record_id +
    "/tickets?include=departments,team,assignee&limit=100&from="+`${100*(Number(page)-1)+1}`; //No I18N
  */
    base_url =
    "https://service.unionbankofindia.co.in/api/v1/tickets/search?limit=100&contactId="+ds_record_id+"&from="+`${100*(Number(page)-1)+1}`; //No I18N
    
  console.log(base_url);
  var req_data = {
    headers: {
      "x-zoho-fromservice":"ZohoSupport"
      }, //No I18N
    method: "GET", //No I18N
    url: base_url, //No I18N
  };
  resp = await ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
    // .then(function (data) {
    //   console.log("DESK response data is", data); //No I18N
    //   //start of table
    //   stadat = ""; //No I18N
    //   stadat = data.details.statusMessage.data || ""; //No I18N
    //   console.log("TICKET DATA", stadat);
    //   tkt_lst[page] = stadat;
    //   if (stadat != "") {
    //     //No I18N
    //     // document.getElementById("tickTable").style.display = "table";	//No I18N
    //     // document.getElementById("tickTable").style.border = "none";	//No I18N
    //     //document.getElementById("modalDataTable1").style.padding = "50px 200px";	//No I18N

    //     //TODO ADD TicketNUMBER TO THE NAME

    //     //console.log(data);

    // })
    .catch((err) => {
      console.log("ERROR IN TICKET AWAIT RESPONSE");
      // write error log module
      write_to_error_log_module("Desk Tickets fetch API using contact ID",err);
      display_panel_overlay(
        "ticket_panel_overlay",
        "Oops! Something went wrong"
      );
      // document.getElementById("ccttotlnamt").innerHTML = `Could'nt fetch`;
      // document.getElementById("ccttdpamt").innerHTML = `Could'nt fetch`;
    });

  console.log("LOG FOR TICKET 2", resp);
  if (resp.status == "failure") {
    console.log("error in ticket chart", err);
    display_panel_overlay("ticket_panel_overlay", "Oops! Something went wrong");
    // document.getElementById("ccttotlnamt").innerHTML = `Could'nt fetch`;
    // document.getElementById("ccttdpamt").innerHTML = `Could'nt fetch`;
  } else {
    let d = resp;
    console.log("TICKET DATA TICKET2", d);
    if (
      d.details.statusMessage != "" &&
      d.details.statusMessage != null &&
      d.details.statusMessage != undefined
    ) {
      try {
        new_tickets.push(...d.details.statusMessage.data);
      } catch (e) {
        console.log("Got error in get ticket", e);
        // d.info = { more_records: false };
      }

      if (d.details.statusMessage.data.length == 100) {
        get_ticket2(page + 1);
      } else {
        // fb_adv = sort_accounts_adv(new_tickets);
        // console.log("Data for ADV", fb_adv);
        // populate_fb_advances(fb_adv);
        // advances_flg = true;
        try {
          populate_tickets_chart(new_tickets);
        } catch (e) {
          console.log("error in ticket chart", e);
        }
      }
    } else {
      display_panel_overlay("ticket_panel_overlay", "No Ticket Associated");
    }
  }
}
async function get_gbmdata(page){
  // FETCH FROM CRM RELATED LIST 
  // conn_name = "zohocrm";
  // let base_url = "https://ucrmapi.unionbankofindia.co.in/crm/v2/Contacts/"+rid[0]+"/GBM";
  // var req_data = {
  //   headers: {}, //No I18N
  //   method: "GET", //No I18N
  //   url: base_url, //No I18N
  // };
  // ZOHO.CRM.CONNECTION.invoke(conn_name, req_data).then((data)=>{
  //   console.log("GBM DATA:::", data);
  // });

  // FETCH FROM ANALYTICS
  //wrapper_for_gbm_table
  console.log("inside get gbm records", page);
  // displayGBM(0);
  // console.log("gbm FLG", related_flg);
  // current_page = document.getElementById("page_num_"+module);
  if (!gbm_flg) {
    console.log("GBM FETCH :: ",gbm_flg);
    return;
  }
  // if (page == "0" || page == "1") {
  //   page = "1";
  //   console.log( document.getElementById("prev_page_"+module));
  //   document.getElementById("prev_page_"+module).classList.add("round_button_disabled");
  //   document.getElementById("prev_page_"+module).classList.remove("round_button");
  //   document.getElementById("prev_page_"+module).onclick = null;
  // }else{
  //   document.getElementById("prev_page_"+module).classList.remove("round_button_disabled");
  //   document.getElementById("prev_page_"+module).classList.add("round_button");
  //   document.getElementById("prev_page_"+module).onclick = ()=>{getPage(module,-1)};
  // }
  console.log({custId: custid,page:page});
  // add loader to all the gbm products tabs
  let resp = [];
  gbm_flg = false;
  // await setTimeout(()=>{
   resp = await new_module_search("wrapper_for_gbm_table", {custId: custid,page:page});
  // },15000);
  console.log("gbm resp:::",resp);
  if (resp.status == "failure") {
    console.log("error in gbm fetch", resp);
    gbm_rcddata = [];
    gbm_loaded = false;
    displayGBM(opened_tab);
    
  }else{
    let d = resp;
    try{
      gbm_rcddata = d.data;
    }catch (e){
      console.log("Got error in get related", e);
      d.info = { more_records: false};
    }
    console.log("gbm reocrds", gbm_rcddata);
    gbm_loaded = false;
    displayGBM(opened_tab);
    
      // try{
      //   if (rel_data[module].length<201) {
      //     // disable the next button
      //     document.getElementById("next_page_"+module).classList.add("round_button_disabled");
      //     document.getElementById("next_page_"+module).classList.remove("round_button");
      //     current_page.innerHTML = String(((page-1)*offset)+1) + "-" + String(((page-1)*offset)+rel_data[module].length);
      //     document.getElementById("next_page_"+module).onclick = null;
      //   }else{
      //     document.getElementById("next_page_"+module).classList.remove("round_button_disabled");
      //     current_page.innerHTML = String(((page-1)*offset)+1) + "-" + String((page*offset));
      //     document.getElementById("next_page_"+module).classList.add("round_button");
      //     document.getElementById("next_page_"+module).onclick = ()=>{getPage(module,1)};
      //   }
      //   current_page.title = page
      //   related_flg[module] = true;
      // }catch(e){
      //   console.log("error in advances chart", resp);
      //   rel_data[module] = resp;
      //   current_page.title = page
      //   related_flg[module] = true;
      //   // populate_related_records(resp,document.getElementById("tblrel_"+module),document.getElementById("tbldepdtbtdrelhdr_"+module),module);
      // }
      
      // page format String(parseInt(document.getElementById("page_num_"+tab).split("-")[0])/offset)
      // current_page.innerHTML = String(((page-1)*offset)+1) + "-" + String((page*offset));
     
     
  }
}

// function getPageGBM(val){
//   await get_gbmdata();
//   // update page based on tabs
// }
function displayGBM(nav){
  opened_tab = nav;
  console.log("RID::", rid);
  // change all borders to bottom and selected border to except border
  gbmTablist = document.querySelectorAll(".ctperinfgbmth");
  console.log(gbmTablist);
  for(let i=0; i<gbmTablist.length;i++){
    console.log(gbmTablist[i]);
    
    if(i==nav){
      if (nav == 0) {
        gbmTablist[i].classList.remove("tab_unselected");
        gbmTablist[i].classList.add("tab_selected_start");
      }else if(nav == gbmTablist.length-1){
        gbmTablist[i].classList.remove("tab_unselected");
        gbmTablist[i].classList.add("tab_selected_end");
      }else{
        gbmTablist[i].classList.remove("tab_unselected");
        gbmTablist[i].classList.add("tab_selected");
      }
    }else{
      gbmTablist[i].classList.remove("tab_selected");
      gbmTablist[i].classList.add("tab_unselected");
    }
  }
  table_hdr = document.getElementById("gbmtabhdr");
  table = document.getElementById("tblgbmtabb");
  
  // segregate the data based on the tabs
  let gbm_data = {
    "gbmAPY":[],
    "gbmPension":[],
    "gbmKVP":[],
    "gbmPPF":[],
    "gbmSSA":[],
    "gbmSCSS":[],
  }
  console.log("GBM RC DATA",gbm_rcddata);
  for (let i = 0; i < gbm_rcddata.length; i++) {
    if(gbm_rcddata[i].Govt_Business == "APY") gbm_data.gbmAPY.push(gbm_rcddata[i]);
    if(gbm_rcddata[i].Govt_Business == "Pension") gbm_data.gbmPension.push(gbm_rcddata[i]);
    if(gbm_rcddata[i].Govt_Business == "PPF") gbm_data.gbmPPF.push(gbm_rcddata[i]);
    if(gbm_rcddata[i].Govt_Business == "KVP") gbm_data.gbmKVP.push(gbm_rcddata[i]);
    if(gbm_rcddata[i].Govt_Business == "SSA") gbm_data.gbmSSA.push(gbm_rcddata[i]);
    if(gbm_rcddata[i].Govt_Business == "SCSS") gbm_data.gbmSCSS.push(gbm_rcddata[i]);
  }
  let text = "";
  for (const key of Object.keys(gbm_data)) {
    if (key == "gbmAPY") text = "APY";
    if (key == "gbmPension") text = "Pension";
    if (key == "gbmKVP") text = "KVP"
    if (key == "gbmPPF") text = "PPF"
    if (key == "gbmSSA") text = "SSA"
    if (key == "gbmSCSS") text = "SCSS"

    document.getElementById(key).innerHTML = `${text} (${gbm_data[key].length})`
  }
  console.log("GBM DATA::", gbm_data);

  
  // show tables based on tab selected
  console.log(gbmTablist[nav],gbmTablist,nav);

  if(gbmTablist[nav].id == "gbmAPY"){
    
    // show APY header
    hdr = `
      <tr>
      <th colspan=2>PRAN Number</th>
      <th colspan=2>Branch</th>
      <th colspan=2>Start Date</th>
      <th colspan=2>Pension Amount</th>
      <th colspan=2>Operative Account</th>
      <th colspan=2>Active (Y/N)</th>
      <th colspan=2>Nominee(Y/N)</th>
      </tr>
    `
    table_hdr.innerHTML = hdr;
    // data is fetching 
    console.log("DATA FETCHING ", gbm_loaded);
    if (gbm_loaded) {
      table_loader('tblgbmtabb',5,7);
      return;
    }
    console.log("DATA FETCHED ",gbm_loaded);
    // no value
    let row = "";
    if (gbm_data["gbmAPY"].length == 0) {
       row = `
          <tr style="text-align:center">
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          </tr>
        `;
        table.innerHTML = row;
    }else{
      for (let index = 0; index < gbm_data["gbmAPY"].length; index++) {
        // add rows with data
        // row = `
        //     <tr>
        //     <td colspan=2>${gbm_data[index].}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>-${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     </tr>
        //     `;
        row += `
          <tr style="text-align:center">
          <td colspan=2>${gbm_data["gbmAPY"][index].PRAN_Number || "-"}</td>
          <td colspan=2>${gbm_data["gbmAPY"][index]["Liabilities.Branch"] || "-"}</td>
          <td colspan=2>${format_date(gbm_data["gbmAPY"][index].Start_Date)}</td>
          <td colspan=2>${format_bal2(gbm_data["gbmAPY"][index].Pension_Amount || "-")}</td>
          <td colspan=2>${gbm_data["gbmAPY"][index].Operating_AC_Number || "-"}</td>
          <td colspan=2>${gbm_data["gbmAPY"][index].Is_Active || "-"}</td>
          <td colspan=2>${gbm_data["gbmAPY"][index].Nominee || "-"}</td>
          
          </tr>
        `;
      
      }
      table.innerHTML = row;
   
      console.log("APY TABLE CREATED");
    }
    
  }
  else if(gbmTablist[nav].id == "gbmPension"){
    hdr = `
      <tr>
      <th colspan=2>PPO Number</th>
      <th colspan=2>Branch</th>
      <th colspan=2>Operative Account</th>
      <th colspan=2>Last Received Pension</th>
      <th colspan=2>Life Certificate Date</th>
      <th colspan=2>Nominee(Y/N)</th>
      </tr>
    `
    table_hdr.innerHTML = hdr;
   // data is fetching 
   console.log("DATA FETCHING ", gbm_loaded);
   if (gbm_loaded) {
     table_loader('tblgbmtabb',5,6);
     return;
   }
   console.log("DATA FETCHED ",gbm_loaded);
   // no value
   let row = "";
   if (gbm_data["gbmPension"].length == 0) {
      row = `
         <tr style="text-align:center">
         <td colspan=2>-</td>
         <td colspan=2>-</td>
         <td colspan=2>-</td>
         <td colspan=2>-</td>
         <td colspan=2>-</td>
         <td colspan=2>-</td>
         </tr>
       `;
       table.innerHTML = row;
   }else{
     for (let index = 0; index < gbm_data["gbmPension"].length; index++) {
       // add rows with data
       // row = `
       //     <tr>
       //     <td colspan=2>${gbm_data[index].}</td>
       //     <td colspan=2>${}</td>
       //     <td colspan=2>-${}</td>
       //     <td colspan=2>${}</td>
       //     <td colspan=2>${}</td>
       //     <td colspan=2>${}</td>
       //     <td colspan=2>${}</td>
       //     </tr>
       //     `;
       row += `
         <tr style="text-align:center">
         <td colspan=2>${gbm_data["gbmPension"][index].PPO_Number || "-"}</td>
         <td colspan=2>${gbm_data["gbmPension"][index]["Liabilities.Branch"] || "-"}</td>
         <td colspan=2>${gbm_data["gbmPension"][index].Operating_AC_Number || "-"}</td>
         <td colspan=2>${format_bal2(gbm_data["gbmPension"][index].Total_Pension_Amount || "-")}</td>
         <td colspan=2>${format_date(gbm_data["gbmPension"][index].Cert_Received_Date)}</td>
         <td colspan=2>${gbm_data["gbmPension"][index].Nominee || "-"}</td>
         
         </tr>
       `;
     
     }
     table.innerHTML = row;
    
     console.log("Pension TABLE CREATED");
   }
   
  }

  else if(gbmTablist[nav].id == "gbmKVP"){
    hdr = `
      <tr>
      <th colspan=2>KVP Deposit ID</th>
      <th colspan=2>Branch</th>
      <th colspan=2>Operative Account</th>
      <th colspan=2>Amount</th>
      <th colspan=2>Maturity Date</th>
      <th colspan=2>Nominee(Y/N)</th>
      </tr>
    `
    table_hdr.innerHTML = hdr;
    console.log("DATA FETCHING ", gbm_loaded);
   if (gbm_loaded) {
     table_loader('tblgbmtabb',5,5);
     return;
   }
   console.log("DATA FETCHED ",gbm_loaded);
   // no value
   let row = "";
   if (gbm_data["gbmKVP"].length == 0) {
      row = `
         <tr style="text-align:center">
         <td colspan=2>-</td>
         <td colspan=2>-</td>
         <td colspan=2>-</td>
         <td colspan=2>-</td>
         <td colspan=2>-</td>
         </tr>
       `;
       table.innerHTML = row;
   }else{
     for (let index = 0; index < gbm_data["gbmKVP"].length; index++) {
       // add rows with data
       // row = `
       //     <tr>
       //     <td colspan=2>${gbm_data[index].}</td>
       //     <td colspan=2>${}</td>
       //     <td colspan=2>-${}</td>
       //     <td colspan=2>${}</td>
       //     <td colspan=2>${}</td>
       //     <td colspan=2>${}</td>
       //     <td colspan=2>${}</td>
       //     </tr>
       //     `;
       row += `
         <tr style="text-align:center">
         <td colspan=2>${gbm_data["gbmKVP"][index].KVP_Deposit_ID || "-"}</td>
         <td colspan=2>${gbm_data["gbmKVP"][index]["Liabilities.Branch"] || "-"}</td>
         <td colspan=2>${gbm_data["gbmKVP"][index].Operating_AC_Number || "-"}</td>
         <td colspan=2>${format_bal2(gbm_data["gbmKVP"][index].Total_Amount || "-")}</td>
         <td colspan=2>${format_date(gbm_data["gbmKVP"][index]["KVP_Maturity_Date"]) || "-"}</td>
         <td colspan=2>${format_date(gbm_data["gbmKVP"][index]["Nominee"]) || "-"}</td>
         </tr>
       `;
     
     }
     table.innerHTML = row;
    //  document.getElementById("gbmBond").innerHTML = `Bond (${gbm_data["gbmBond"].length})`
     console.log("KVP TABLE CREATED");
   }
  }
  else if(gbmTablist[nav].id == "gbmPPF"){
    hdr = `
      <tr>
      <th colspan=2>PPF Account Number</th>
      <th colspan=2>Branch</th>
      <th colspan=2>Balance</th>
      <th colspan=2>Maturity Date</th>
      <th colspan=2>Account Status</th>
      <th colspan=2>Loan Availed (Y/N)</th>
      <th colspan=2>Nominee(Y/N)</th>
      </tr>
    `
    table_hdr.innerHTML = hdr;
    // no value
    if (gbm_loaded) {
      table_loader('tblgbmtabb',5,6);
      return;
    }
    console.log("DATA FETCHED ",gbm_loaded);
    // no value
    let row = "";
    if (gbm_data["gbmPPF"].length == 0) {
       row = `
          <tr style="text-align:center">
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          </tr>
        `;
        table.innerHTML = row;
    }else{
      for (let index = 0; index < gbm_data["gbmPPF"].length; index++) {
        // add rows with data
        // row = `
        //     <tr>
        //     <td colspan=2>${gbm_data[index].}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>-${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     </tr>
        //     `;
        row += `
          <tr style="text-align:center">
          <td colspan=2>${gbm_data["gbmPPF"][index].PPF_Number || "-"}</td>
          <td colspan=2>${gbm_data["gbmPPF"][index]["Liabilities.Branch"] || "-"}</td>
          <td colspan=2>${format_bal2(gbm_data["gbmPPF"][index].PPF_Amount || "-")}</td>
          <td colspan=2>${format_date(gbm_data["gbmPPF"][index]["PPF_Maturity_Date"])}</td>
          <td colspan=2>${gbm_data["gbmPPF"][index].PPF_Account_Status || "-"}</td>
          <td colspan=2>${gbm_data["gbmPPF"][index].Loan_Taken || "-"}</td>
          <td colspan=2>${gbm_data["gbmPPF"][index].Nominee || "-"}</td>
          </tr>
        `;
      
      }
      table.innerHTML = row;
     //  document.getElementById("gbmBond").innerHTML = `Bond (${gbm_data["gbmBond"].length})`
      console.log("PPF TABLE CREATED");
    }
  }
  else if(gbmTablist[nav].id == "gbmSSA"){
    hdr = `
      <tr>
      <th colspan=2>SSA Account Number</th>
      <th colspan=2>Branch</th>
      <th colspan=2>Operative Account</th>
      <th colspan=2>Amount</th>
      <th colspan=2>Maturity Date</th>
      <th colspan=2>Nominee(Y/N)</th>
      </tr>
    `
    table_hdr.innerHTML = hdr;
    // no value
    if (gbm_loaded) {
      table_loader('tblgbmtabb',5,6);
      return;
    }
    console.log("DATA FETCHED ",gbm_loaded);
    // no value
    let row = "";
    if (gbm_data["gbmSSA"].length == 0) {
       row = `
          <tr style="text-align:center">
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          </tr>
        `;
        table.innerHTML = row;
    }else{
      for (let index = 0; index < gbm_data["gbmSSA"].length; index++) {
        // add rows with data
        // row = `
        //     <tr>
        //     <td colspan=2>${gbm_data[index].}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>-${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     </tr>
        //     `;
        row += `
          <tr style="text-align:center">
          <td colspan=2>${gbm_data["gbmSSA"][index].SSA_Account_Number || "-"}</td>
          <td colspan=2>${gbm_data["gbmSSA"][index]["Liabilities.Branch"] || "-"}</td>
          <td colspan=2>${gbm_data["gbmSSA"][index].Operating_AC_Number || "-"}</td>
          <td colspan=2>${format_bal2(gbm_data["gbmSSA"][index].SSA_Amount || "-")}</td>
          <td colspan=2>${format_date(gbm_data["gbmSSA"][index]["SSA_Maturity_Date"])}</td>
          <td colspan=2>${gbm_data["gbmSSA"][index].Nominee || "-"}</td>
          </tr>
        `;
      
      }
      table.innerHTML = row;
     //  document.getElementById("gbmBond").innerHTML = `Bond (${gbm_data["gbmBond"].length})`
      console.log("SSA TABLE CREATED");
    }
  }
  else if(gbmTablist[nav].id == "gbmSCSS"){
    hdr = `
      <tr>
      <th colspan=2>Branch</th>
      <th colspan=2>Operative Account</th>
      <th colspan=2>Deposit Amount</th>
      <th colspan=2>Maturity Date</th>
      <th colspan=2>Nominee(Y/N)</th>
      </tr>
    `
    table_hdr.innerHTML = hdr;
    // no value
    if (gbm_loaded) {
      table_loader('tblgbmtabb',5,6);
      return;
    }
    console.log("DATA FETCHED ",gbm_loaded);
    // no value
    let row = "";
    if (gbm_data["gbmSCSS"].length == 0) {
       row = `
          <tr style="text-align:center">
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          <td colspan=2>-</td>
          </tr>
        `;
        table.innerHTML = row;
    }else{
      for (let index = 0; index < gbm_data["gbmSCSS"].length; index++) {
        // add rows with data
        // row = `
        //     <tr>
        //     <td colspan=2>${gbm_data[index].}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>-${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     <td colspan=2>${}</td>
        //     </tr>
        //     `;
        row += `
          <tr style="text-align:center">
          <td colspan=2>${gbm_data["gbmSCSS"][index]["Liabilities.Branch"]}</td>
          <td colspan=2>${gbm_data["gbmSCSS"][index].Operating_AC_Number}</td>
          <td colspan=2>${format_bal2(gbm_data["gbmSCSS"][index].SCSS_Deposit_Amount)}</td>
          <td colspan=2>${format_date(gbm_data["gbmSCSS"][index]["SCSS_Maturity_Date"])}</td>
          <td colspan=2>${gbm_data["gbmSCSS"][index].Nominee}</td>
          </tr>
        `;
      }
      table.innerHTML = row;
     //  document.getElementById("gbmBond").innerHTML = `Bond (${gbm_data["gbmBond"].length})`
      console.log("SCSS TABLE CREATED");
    }
  }
}

async function get_relatedrc(page, module){
  console.log("inside get related records", page);
  console.log("RELATED FLG", related_flg);
  current_page = document.getElementById("page_num_"+module);
  if (related_flg[module]) {
    console.log(related_flg[module]);
    return;
  }
  if (page == "0" || page == "1") {
    page = "1";
    console.log( document.getElementById("prev_page_"+module));
    document.getElementById("prev_page_"+module).classList.add("round_button_disabled");
    document.getElementById("prev_page_"+module).classList.remove("round_button");
    document.getElementById("prev_page_"+module).onclick = null;
  }else{
    document.getElementById("prev_page_"+module).classList.remove("round_button_disabled");
    document.getElementById("prev_page_"+module).classList.add("round_button");
    document.getElementById("prev_page_"+module).onclick = ()=>{getPage(module,-1)};
  }
  console.log({custId: custid,module: module,page:page});
  table_loader("tblrel_"+module,10,8);
  let resp = [];
  related_flg[module] = true;
  // await setTimeout(()=>{
   resp = await new_module_search("wrapper_for_cibil_scrub_1", {custId: custid,module: module,page:page});
  // },15000);
  console.log("related resp:::",resp);
  if (resp.status == "failure") {
    console.log("error in advances chart", resp);
    rel_data[module] = [];
    populate_related_records(resp,document.getElementById("tblrel_"+module),document.getElementById("tbldepdtbtdrelhdr_"+module),module);
  }else{
    let d = resp;
    try{
      rel_records = d.data;
    }catch (e){
      console.log("Got error in get related", e);
      d.info = { more_records: false};
    }
    console.log("related reocrds", rel_records);
    
      // console.log("before sort", rel_records);
      // rel_rec_g = sort_rel_records(rel_records);
      rel_data[module] = rel_records
      console.log("data for rel records", rel_rec_g);
      try{
        if (rel_data[module].length<201) {
          // disable the next button
          document.getElementById("next_page_"+module).classList.add("round_button_disabled");
          document.getElementById("next_page_"+module).classList.remove("round_button");
          current_page.innerHTML = String(((page-1)*offset)+1) + "-" + String(((page-1)*offset)+rel_data[module].length);
          document.getElementById("next_page_"+module).onclick = null;
        }else{
          document.getElementById("next_page_"+module).classList.remove("round_button_disabled");
          current_page.innerHTML = String(((page-1)*offset)+1) + "-" + String((page*offset));
          document.getElementById("next_page_"+module).classList.add("round_button");
          document.getElementById("next_page_"+module).onclick = ()=>{getPage(module,1)};
        }
        current_page.title = page
        related_flg[module] = true;
      }catch(e){
        console.log("error in advances chart", resp);
        rel_data[module] = resp;
        current_page.title = page
        related_flg[module] = true;
        // populate_related_records(resp,document.getElementById("tblrel_"+module),document.getElementById("tbldepdtbtdrelhdr_"+module),module);
      }
      
      // page format String(parseInt(document.getElementById("page_num_"+tab).split("-")[0])/offset)
      // current_page.innerHTML = String(((page-1)*offset)+1) + "-" + String((page*offset));
     
     
  }
}

function populate_term_deposit_table(data) {
  let stadat_td = data.data || "";
  var stadat = [];
  if (stadat_td != "") {
    for (let index = 0; index < stadat_td.length; index++) {
      const data = stadat_td[index];
      console.log(data.A_c_Type);
      if (data.A_c_Type == "Term Deposit" || data.A_c_Type == "TDA") {
        stadat.push(data);
        console.log("Term deposit record is", data);
      }
    }
  }
  stadat_td = stadat;
  var table4 = document.getElementById("tbldepdtbtd");
  if (stadat.length == 0) {
    console.log("GOT THERE");
    var row = `<tr>
      <td class="tabdat" colspan=2>-</td>
      <td class="tabdat" colspan=2>-</td>
      <td class="tabdat" colspan=2>-</td>
      <td class="tabdat" colspan=2>-</td>
      </tr>`;
    table4.innerHTML += row;
  } else {
    term_deposit = stadat;
    for (var i = 0; i < stadat_td.length; i++) {
      var row4 = `<tr id="${stadat[i].id}" onclick="tdClk(this,${i})">
<td class="tabdat" colspan=2>${stadat_td[i].Name || "-"}</td>
<td class="tabdat" colspan=2>${stadat_td[i].Account_Name || "-"}</td>
<td class="tabdat" colspan=2>${stadat_td[i].Branch_Name || "-"}</td>
<td class="tabdat" colspan=2>${stadat_td[i].Scheme_Codes.name || "-"}</td>
<td class="tabdat" colspan=2>${format_date(stadat_td[i].A_c_Open_Date)}</td>
<td class="tabdat" colspan=2>${format_bal2(stadat_td[i].Balance_Currency || "-")}</td>
<td class="tabdat" colspan=2>${stadat_td[i].Maturity_Date || "-"}</td>

<td class="tabdat" colspan=2>${stadat_td[i].Owner.name || "-"}</td>
<td class="tabdat" colspan=2>${
        resolve_account_type(stadat_td[i].A_c_Type) || "-"
      }</td>
</tr>`;
      table4.innerHTML += row4;
    }
  }
  // <td class="tabdat" colspan=2>${
  //   calculate_maturity_amount(
  //     stadat_td[i].InterestRate,
  //     stadat_td[i].Balance_Currency
  //   ) || "-"
  // }</td>
}
async function get_deposits2(page) {
  console.log("inside get deposits2", page);
  //prod
  /*
  let resp = await new_module_search2("wrapper_for_module_search", {
    Module: "Liabilities1",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  })
  */
    //test
    // let resp = await new_module_search2("wrapper_for_module_search1", {Module: "Liabilities1",Page: page,Customer_ID: rid[0],Customer_ID_for_Analytics: customer_id_for_analytics})
    /*
    .catch((err) => {
      console.log("ERROR IN AWAIT RESPONSE");
      display_panel_overlay(
        "deposit_panel_overlay",
        "Oops! Something went wrong"
      );
      // write error log module
      write_to_error_log_module("Deposits fetch API",err);
      document.getElementById("ccttotlnamt").innerHTML = `Could'nt fetch`;
      document.getElementById("ccttdpamt").innerHTML = `Could'nt fetch`;
    });
    */
  /*
  let resp = await new_module_search("Test_module_search_for_c360", {
    Module: "Liabilities1",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  });
  */

  //*** Data source **** */
  //source = testing for branch and scheme joined analytics
  //Sv-360 Prod
  /*
  let resp = await new_module_search("wrapper_for_module_search11", {
    Module: "Liabilities1",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  });
  */
  //Sv-360 UAT
  //Test_Module_search_for_cust36011
  let resp = await new_module_search("wrapper_for_module_search1", {
    Module: "Liabilities1",
    Page: page,
    Customer_ID: rid[0],
    Customer_ID_for_Analytics: customer_id_for_analytics,
  });
  console.log("LIABILITES::: ",resp);
  if (resp.status == "failure") {
    console.log("error in deposits chart", resp);
    display_panel_overlay(
      "deposit_panel_overlay",
      "Oops! Something went wrong"
    );
    // write error log module
    write_to_error_log_module("Deposits fetch API",resp);
    document.getElementById("ccttotlnamt").innerHTML = `Could'nt fetch`;
    document.getElementById("ccttdpamt").innerHTML = `Could'nt fetch`;
  } else {
    let d = resp;
    try {
      new_deposits.push(...d.data);
    } catch (e) {
      console.log("Got error in get deposits", e);
      d.info = { more_records: false };
    }

    if (d.info.more_records) {
      get_deposits2(page + 1);
    } else {
      populate_deposits_chart(new_deposits);
      fb_casa = sort_accounts_casa(new_deposits);
      console.log("fb_Casa is", fb_casa);
      try
      {
        empflg =employee_account_format(new_deposits[0].Emp_flag || "-");
      }
      catch(e)
      {
        empflg="-";
      }
      
      document.getElementById("ctempflg").innerHTML = empflg;
      call_deposits_resolve_service("dep");
      // getDataCrossSellData();
      populate_fb_deposits(fb_casa);
      populate_fb_term_deposits(fb_casa, false);
      deposits_flg = true;
      if (deposits_flg && advances_flg) {
        //populate all the service request account number drop-downs
        populate_dropdowns(
          [
            "acc_drop_content",
            "cheque_book_drop_content",
            "mini_statement_drop_content",
            "balance_inquiry_drop_content",
            "standing_instructions_drop_content",
            "lien_acc_drop_content",
            "acc_transaction_drop_content",
            "freeze_acc_drop_content",
            "debit_card_tracking_drop_content",
            "cheque_book_tracking_drop_content"
          ],
          new_deposits.concat(new_advances)
        );
        populate_new_dropdowns(
          [
            "atmdropDownContainer"
          ],
          new_deposits.concat(new_advances)
        )
        //populate outbound calls section
        dynamic_SR_navigate(null,true);
      }
      populate_dropdowns(
        [
          "term_deposit_drop_content",
          "nominee_drop_content",
          
        ],
        new_deposits
      );
    }
  }
}
function get_deposits(page) {
  console.log("inside get deposits", page);
  ZOHO.CRM.API.searchRecord({
    Entity: "Liabilities1",
    Type: "criteria",
    Query: "(Customer_Name:equals:" + rid + ")",
    Page: page,
  }).then((d) => {
    try {
      new_deposits.push(...d.data);
    } catch (e) {
      console.log("Got error in get deposits", e);
      d.info = { more_records: false };
    }

    if (d.info.more_records) {
      get_deposits(page + 1);
    } else {
      populate_deposits_chart(new_deposits);
    }
  });
}
function populate_deposits_chart(d) {
  console.log("deposits population with", d);
  if (d.length == 0) {
    //show no deposits yet on the screen.
    // document.getElementById("ccttdpamt").innerHTML = `Rs. ${0}/ ${0} Accounts`;
    deposits_calculated = true;
    if (advances_calculated && deposits_calculated) {
      document.getElementById(
        "ccttotlnamt"
      ).innerHTML = `Rs. ${format_bal( debit_balance.toFixed(2))}<br> ${total_loan_accounts} Accounts`;
      console.log(`Rs. ${format_bal( debit_balance)}<br> ${total_loan_accounts} Accounts`);
      document.getElementById(
        "ccttdpamt"
      ).innerHTML = `Rs. ${format_bal( credit_balance.toFixed(2))}<br> ${total_deposit_accounts} Accounts`;
    }
    // document.getElementById("ccttdpamt").innerHTML = `Rs. ${0}/ ${0} Accounts`;
    display_panel_overlay("deposit_panel_overlay", "No deposits yet");
  } else {
    let ca = 0,
      sa = 0,
      td = 0;
    for (let i = 0; i < d.length; i++) {
      if (d[i] == null) {
        continue;
      }
      let bal = d[i].Balance_Currency;
      let acct_closed = d[i].ACCT_CLS_FLG || "-";
      console.log("string comparison is", typeof bal == "string");
      if (typeof bal == "string") {
        bal = +bal;
      }

      if (acct_closed == "Y") {
        continue;
      }
      total_deposit_accounts++;
      if (bal > 0) {
        credit_balance += bal;
      } else if (bal < 0) {
        debit_balance += bal;
      }
      if (
        d[i].A_c_Type == "Term Deposit" ||
        d[i].A_c_Type == "TDA" ||
        d[i].Scheme_Code == "RDNLX" ||
        d[i].Scheme_Code == "RDFLX"
      ) {
        td += bal;
        // total_deposit_accounts++;
      } else if (d[i].A_c_Type == "Current" || d[i].A_c_Type == "CAA") {
        ca += bal;
        // total_deposit_accounts++;
      } else if (d[i].A_c_Type == "Saving" || d[i].A_c_Type == "SBA") {
        sa += bal;
        // total_deposit_accounts++;
      }
    }
    deposits_calculated = true;
    if (ca + sa + td == 0) {
      hide_panel_overlay("deposit_panel_overlay");
      if (advances_calculated && deposits_calculated) {
        document.getElementById(
          "ccttotlnamt"
        ).innerHTML = `Rs. ${format_bal( debit_balance.toFixed(2))}<br> ${total_loan_accounts} Accounts`;
        document.getElementById(
          "ccttdpamt"
        ).innerHTML = `Rs. ${format_bal( credit_balance.toFixed(2))}<br> ${total_deposit_accounts} Accounts`;
      }
      // document.getElementById("ccttdpamt").innerHTML = `Rs. ${ca + sa + td}/ ${total_deposit_accounts} Accounts`;
      display_panel_overlay(
        "deposit_panel_overlay",
        "No deposits with balance"
      );
      return;
    }
    if (advances_calculated && deposits_calculated) {
      document.getElementById(
        "ccttotlnamt"
      ).innerHTML = `Rs. ${format_bal( debit_balance.toFixed(2))}<br> ${total_loan_accounts} Accounts`;
      document.getElementById(
        "ccttdpamt"
      ).innerHTML = `Rs. ${format_bal( credit_balance.toFixed(2))}<br> ${total_deposit_accounts} Accounts`;
    }
    //document.getElementById("ccttdpamt").innerHTML = `Rs. ${ca + sa + td}/ ${total_deposit_accounts} Accounts`;
    var dxValues = ["Current Account", "Savings Account", "Term Deposit"];
    var dyValues = [ca, sa, td];
    var dbarColors = ["#b91d47", "#00aba9", "#2b5797"];
    var drefVal = "2021-06-07";

    hide_panel_overlay("deposit_panel_overlay");
    try {
      let d_chart = new Chart("depositChart", {
        type: "pie",
        data: {
          labels: dxValues,
          datasets: [
            {
              backgroundColor: dbarColors,
              data: dyValues,
            },
          ],
        },
        options: {
          responsive: false,
          maintainAspectRatio: false,
          title: {
            display: false,
            text: "Deposits (As of " + drefVal + ")",
          },
        },
      });
    } catch (e) {
      console.log("error in deposits chart", e);
    }
  }
}
function get_index_of(arr, query) {
  for (i = 0; i < arr.length; i++) {
    if (arr[i] == query) {
      return i;
    }
  }
  return -1;
}
function compare_smas(status1, status2) {
  let sma_array = ["SMA0-Overdue", "SMA1-Overdue", "SMA2-Overdue","NPA Loss","NPA Doubtful", "NPA Substandard"];
  let ind1 = get_index_of(sma_array, status1);
  let ind2 = get_index_of(sma_array, status2);
  console.log("comparing sma statuses", status1, status2, ind1, ind2);
  return ind1 > ind2;
}
function populate_advances_chart(d) {
  let highest_sma = "STANDARD";
  let npa_date = "";
  console.log("inside populate advances chart");
  if (d.length == 0) {
    //show no deposits yet on the screen.
    display_panel_overlay("adv_panel_overlay", "No advances yet");
    advances_calculated=true;
    if(advances_calculated && deposits_calculated)
      {
        document.getElementById("ccttotlnamt").innerHTML = `Rs. ${debit_balance.toFixed(2)}</br> ${total_loan_accounts} Accounts`;
        document.getElementById("ccttdpamt").innerHTML = `Rs. ${credit_balance.toFixed(2)}</br> ${total_deposit_accounts} Accounts`;
    }
    document.getElementById("ctstrcat").innerHTML = highest_sma.toUpperCase() + npa_date;
    return;
  } else {
    let cca = 0,
      laa = 0,
      fba = 0,
      oda = 0,
      pca = 0;
    let active_account = false;
    for (let i = 0; i < d.length; i++) {
      if (d[i] == null) {
        continue;
      }
      console.log("advance account type is", d[i].A_c_Type_Current_Saving);
      let close_date = d[i].Account_Close_Flag || "-";
      console.log("account close flag", close_date);
      if (close_date == "Y") {
        continue;
      }
      let current_sma = d[i].SMA_Status || "-";
      if (current_sma != "-") {
        console.log("Non empty sma status", current_sma);
        console.log(
          "sma status result",
          current_sma,
          highest_sma,
          compare_smas(current_sma, highest_sma)
        );
        if (compare_smas(current_sma, highest_sma)) {
          highest_sma = current_sma;
          console.log("Highest SMA set", highest_sma);
        }
        let npa_lst = ["NPA Loss","NPA Doubtful", "NPA Substandard"];
        if (npa_lst.includes(highest_sma)) {
          console.log("NPA DATE FROM SV:::",format_date(d[i].Date_of_NPA_History.split(" ")[0]));
          npa_date = `</br><i>(Classified as NPA on ${format_date(d[i].Date_of_NPA_History.split(" ")[0])})</i>`;
        }
      }
      if (close_date == "Y") {
        continue;
      }
      total_loan_accounts++;
      let bal = d[i].Balance_Currency || 0;
      if (typeof bal == "string") {
        bal = +bal;
      }
      if (bal > 0) {
        credit_balance += bal;
      } else if (bal < 0) {
        debit_balance += bal;
      }
      if (d[i].Balance_Currency > 0) {
        continue;
      }
      if (d[i].A_c_Type_Current_Saving == "CCA") {
        // cca++;

        cca += bal;
        // total_loan_accounts++;
      } else if (d[i].A_c_Type_Current_Saving == "LAA") {
        // laa++;
        laa += bal;
        // total_loan_accounts++;
      } else if (d[i].A_c_Type_Current_Saving == "FBA") {
        fba += bal;
        // total_loan_accounts++;
      } else if (d[i].A_c_Type_Current_Saving == "ODA") {
        oda += bal;
        // total_loan_accounts++;
      } else if (d[i].A_c_Type_Current_Saving == "PCA") {
        pca += bal;
        // total_loan_accounts++;
      }
    }
    advances_calculated = true;
    active_account = total_loan_accounts > 0;
    if (highest_sma == "-" && active_account) {
      highest_sma = "STANDARD";
    }

    if (cca + laa + fba + oda + pca == 0) {
      display_panel_overlay("adv_panel_overlay", "No pending advances");
      if (advances_calculated && deposits_calculated) {
        document.getElementById(
          "ccttotlnamt"
        ).innerHTML = `Rs. ${format_bal( debit_balance.toFixed(2))}<br> ${total_loan_accounts} Accounts`;
        document.getElementById(
          "ccttdpamt"
        ).innerHTML = `Rs. ${format_bal( credit_balance.toFixed(
          2
        ))}<br> ${total_deposit_accounts} Accounts`;
      }

      document.getElementById("ctstrcat").innerHTML = highest_sma.toUpperCase() + npa_date;
      return;
    }
    if (advances_calculated && deposits_calculated) {
      document.getElementById(
        "ccttotlnamt"
      ).innerHTML = `Rs. ${format_bal( debit_balance.toFixed(
        2
      ))}<br> ${total_loan_accounts} Accounts`;
      document.getElementById(
        "ccttdpamt"
      ).innerHTML = `Rs. ${format_bal( credit_balance.toFixed(
        2
      ))}<br> ${total_deposit_accounts} Accounts`;
    }
    // Advances Chart

    var axValues = ["CCA", "LAA", "FBA", "ODA", "PCA"];
    var ayValues = [cca, laa, fba, oda, pca];
    console.log("ay values", ayValues);
    var abarColors = ["#003F5C", "#58508D", "#BC5090", "#FF6361", "#FFA600"];
    var arefVal = "2021-06-07";
    hide_panel_overlay("adv_panel_overlay");
    new Chart("advanceChart", {
      type: "pie",
      data: {
        labels: axValues,
        datasets: [
          {
            backgroundColor: abarColors,
            data: ayValues,
          },
        ],
      },
      options: {
        responsive: false,
        maintainAspectRatio: false,
        title: {
          display: false,
          text: "Advances (As of " + arefVal + ")",
        },
      },
    });
  }
  document.getElementById("ctstrcat").innerHTML = highest_sma.toUpperCase() + npa_date;
  console.log("stress category is", highest_sma);
}
function populate_tickets_chart(d) {
  // let highest_sma = "-";
  console.log("inside populate ticket chart");
  if (d.length == 0) {
    display_panel_overlay("ticket_panel_overlay", "No Ticket Associated");
    return;
  } else {
    let open = 0,
      close = 0,
      lvl2 = 0,
      other = 0;
    // let active_account = false;
    for (let i = 0; i < d.length; i++) {
      // console.log("TICKET STATUS", d[i].status);
      if (d[i] == null) {
        continue;
      }
      console.log("ticket status is", d[i].status);

      if (d[i].status == "Closed") {
        // cca++;

        close += 1;
        // total_loan_accounts++;
      } else if (d[i].status == "Open") {
        // laa++;
        open += 1;
        // total_loan_accounts++;
      } else if (d[i].status == "Assigned to Level2") {
        lvl2 += 1;
        // total_loan_accounts++;
      } else {
        other += 1;
      }
    }

    if (open + close + lvl2 + other == 0) {
      display_panel_overlay("ticket_panel_overlay", "No Ticket Associated");
      return;
    }
    // Ticket Chart

    var axValues = ["Open", "Close", "Assigned to Level2", "Other"];
    var ayValues = [open, close, lvl2, other];
    console.log("ay values", ayValues);
    var abarColors = ["#b91d47", "#00aba9", "#00bba9", "#00dba9"];
    hide_panel_overlay("ticket_panel_overlay");
    new Chart("ticketsChart", {
      type: "bar",
      data: {
        labels: axValues,
        datasets: [
          {
            backgroundColor: abarColors,
            data: ayValues,
          },
        ],
      },
      options: {
        legend: { display: false },
        responsive: false,
        maintainAspectRatio: false,
        title: {
          display: false,
          text: "Tickets",
        },
      },
    });
  }
  document.getElementById("ctstrcat").innerHTML = highest_sma.toUpperCase() + npa_date;
  console.log("stress category is", highest_sma);
}
function address_select() {
  console.log("function called");
  if (document.getElementById("address_dropdown").value == "HOME") {
    document.getElementById("ctaddline1").innerHTML =
      home_info[0].HOME_ADDRESS_LINE1 || "-";
    document.getElementById("ctaddline2").innerHTML =
      home_info[0].HOME_ADDRESS_LINE2 || "-";
    // document.getElementById("ctaddline3").innerHTML=home_info[0].Occupation	 || "-";
    document.getElementById("ctcity").innerHTML = home_info[0].Home_City || "-";
    document.getElementById("ctstate").innerHTML =
      home_info[0].Home_State || "-";
    document.getElementById("ctcntry").innerHTML =
      home_info[0].Home_Country || "-";
    document.getElementById("ctpincode").innerHTML =
      home_info[0].Home_ZIP || "-";
  }
  if (document.getElementById("address_dropdown").value == "MAIL") {
    document.getElementById("ctaddline1").innerHTML =
      home_info[0].MAIL_ADDRESS_LINE1 || "-";
    document.getElementById("ctaddline2").innerHTML =
      home_info[0].MAIL_ADDRESS_LINE2 || "-";
    // document.getElementById("ctaddline3").innerHTML=home_info[0].Occupation	 || "-";
    document.getElementById("ctcity").innerHTML = home_info[0].MAIL_CITY || "-";
    document.getElementById("ctstate").innerHTML =
      home_info[0].MAIL_STATE || "-";
    document.getElementById("ctcntry").innerHTML =
      home_info[0].MAIL_COUNTRY || "-";
    document.getElementById("ctpincode").innerHTML =
      home_info[0].MAIL_ZIP || "-";
  }
  if (document.getElementById("address_dropdown").value == "REGISTERED") {
    document.getElementById("ctaddline1").innerHTML =
      home_info[0].REG_ADDRESS_LINE1 || "-";
    document.getElementById("ctaddline2").innerHTML =
      home_info[0].REGISTERED_ADDRESS_LINE2 || "-";
    // document.getElementById("ctaddline3").innerHTML=home_info[0].Occupation	 || "-";
    document.getElementById("ctcity").innerHTML =
      home_info[0].REGISTERED_CITY || "-";
    document.getElementById("ctstate").innerHTML =
      home_info[0].REGISTERED_STATE || "-";
    document.getElementById("ctcntry").innerHTML =
      home_info[0].REGISTERED_COUNTRY || "-";
    document.getElementById("ctpincode").innerHTML =
      home_info[0].REGISTERED_ZIP || "-";
  }
}
function sort_accounts_td(stadat_td) {
  let no_result = [];
  let yes_result = [];
  console.log("td inside sort accounts", stadat_td);
  for (var i = 0; i < stadat_td.length; i++) {
    if (stadat_td[i] == null) {
      continue;
    }
    let close_date = stadat_td[i].ACCT_CLS_FLG || "-";
    if (close_date != "-") {
      // let today = new Date();
      // let close_d = new Date(close_date.split(" ")[0]);
      // if (today.getDate() < close_d.getDate()) {
      if (close_date == "N") {
        close_flag = "Yes";
        no_result.push(stadat_td[i]);
      } else {
        console.log("account still active", close_date);
        yes_result.push(stadat_td[i]);
      }
    } else {
      no_result.push(stadat_td[i]);
      console.log(" HYPHEN RESULTS TD ", stadat_td[i]);
    }
  }
  console.log("yes length is", yes_result.length);
  console.log("no length is", no_result.length);
  return no_result.concat(yes_result);
}

function sort_accounts_casa(stadat_casa) {
  let no_result = [];
  let yes_result = [];
  console.log("inside sort accounts", stadat_casa);
  try {
    for (var i = 0; i < stadat_casa.length; i++) {
      if (stadat_casa[i] == null) {
        continue;
      }
      let close_date = stadat_casa[i].ACCT_CLS_FLG || "-";
      if (close_date != "-") {
        // let today = new Date();
        // let close_d = new Date(close_date.split(" ")[0]);
        // if (today.getDate() < close_d.getDate()) {
        if (close_date == "N") {
          close_flag = "Yes";
          no_result.push(stadat_casa[i]);
        } else {
          // console.log("account still active", close_d);
          yes_result.push(stadat_casa[i]);
        }
      } else {
        no_result.push(stadat_casa[i]);
        console.log(" HYPHEN RESULTS CASA ", stadat_casa[i]);
      }
    }
    console.log("yes length is", yes_result.length);
    console.log("no length is", no_result.length);
    return no_result.concat(yes_result);
  } catch (e) {
    console.log("Something went wrong!!!!");
    return no_result;
  }
}
function sort_accounts_adv(stadat) {
  let no_result = [];
  let yes_result = [];

  console.log("inside sort accounts", stadat);
  for (var i = 0; i < stadat.length; i++) {
    if (stadat[i] == null) {
      continue;
    }
    let close_date = stadat[i].Account_Close_Flag || "-";
    if (close_date != "-") {
      // let today = new Date();
      // let close_d = new Date(close_date.split(" ")[0]);
      if (close_date == "N") {
        no_result.push(stadat[i]);
      } else {
        // console.log("account still active", close_d);
        yes_result.push(stadat[i]);
      }
    } else {
      no_result.push(stadat[i]);
      console.log(" HYPHEN RESULTS ADV ", stadat[i]);
    }
  }
  console.log("yes length is", yes_result.length);
  console.log("no length is", no_result.length);
  console.log(no_result);
  console.log(yes_result);
  return no_result.concat(yes_result);
}

function toggle_adv(id) {
  let toggles = document.getElementById("toggle_parent").children;
  // toggles[id].classList.add("selected-option");
  // toggles[(id + 1) % 2].classList.remove("selected-option");
  // document.getElementById("err_msg_adv").style.display = "none";
  if (id == 1) {
    selected_adv_toggle = 0;
    //show non-fund based advances table
    document.getElementById("nfb_table").classList.remove("hide");
    document.getElementById("nfb_table_rows").classList.remove("hide");
    document.getElementById("nfubsubHead1").classList.remove("tab_selected_start");
    document.getElementById("nfubsubHead1").classList.add("tab_unselected");
    document.getElementById("nfubsubHead2").classList.remove("tab_unselected");
    document.getElementById("nfubsubHead2").classList.add("tab_selected_end");
    document.getElementById("advtab").classList.add("hide");
    document.getElementById("advtab_rows").classList.add("hide");
    document.getElementById("adv_hdr").classList.add("hide");
    document.getElementById("adv_hdr").classList.add("hide");
    document.getElementById("relatedTableDiv_adv").classList.add("hide");
  } else if (id == 0) {
    selected_adv_toggle = 1;
    //show fund-based advances
    document.getElementById("nfb_table").classList.add("hide");
    document.getElementById("nfb_table_rows").classList.add("hide");
    document.getElementById("advtab").classList.remove("hide");
    document.getElementById("nfubsubHead1").classList.add("tab_selected_start");
    document.getElementById("nfubsubHead1").classList.remove("tab_unselected");
    document.getElementById("nfubsubHead2").classList.add("tab_unselected");
    document.getElementById("nfubsubHead2").classList.remove("tab_selected_end");
    document.getElementById("advtab_rows").classList.remove("hide");
    document.getElementById("adv_hdr").classList.remove("hide");
    document.getElementById("adv_hdr").classList.remove("hide");
    document.getElementById("relatedTableDiv_adv").classList.remove("hide");
  }
}

/*
function toggle_adv(id) {
  let toggles = document.getElementById("toggle_parent").children;
  toggles[id].classList.add("selected-option");
  toggles[(id + 1) % 2].classList.remove("selected-option");
  if (id == 1) {
    selected_adv_toggle = 0;
    //show non-fund based advances table
    document.getElementById("nfb_table").classList.remove("hide");
    document.getElementById("nfb_table_rows").classList.remove("hide");
    document.getElementById("advtab").classList.add("hide");
    document.getElementById("advtab_rows").classList.add("hide");
  } else if (id == 0) {
    selected_adv_toggle = 1;
    //show fund-based advances
    document.getElementById("nfb_table").classList.add("hide");
    document.getElementById("nfb_table_rows").classList.add("hide");
    document.getElementById("advtab").classList.remove("hide");
    document.getElementById("advtab_rows").classList.remove("hide");
  }
}
*/
function populate_fb_advances(stadat_ad, show_closed_acc) {
  stadat_ad = sort_accounts_adv(stadat_ad);
  console.log("inside populate advances", stadat_ad);
  fb_adv = stadat_ad;
  console.log("show closed acc is", show_closed_acc);
  let table = document.getElementById("tbladvdtb");
  table.innerHTML = "";
  if (stadat_ad.length == 0) {
    console.log("GOT THERE");
    var row = `<tr>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        </tr>`;
    table.innerHTML += row;
  } else {
    console.log("populating fb_adv table", fb_adv);
    for (var i = 0; i < stadat_ad.length; i++) {
      // let exp_date=stadat_bgrd[i].Expiry_Date||"-";
      let close_date = stadat_ad[i].Account_Close_Flag || "-";
      let close_flag = "No";
      if (close_date != "-") {
        // let today = new Date();
        // let close_d = new Date(close_date.split(" ")[0]);
        // console.log("comparing dates", today < close_d);
        // console.log("cd is", close_d);
        // if (today.getDate() > close_d.getDate()) {
        if (close_date == "Y") {
          close_flag = "Yes";
          console.log("Skipping records");
          if (!show_closed_acc) {
            console.log("Skipping records");
            continue;
          }
        } else {
          // console.log("Check Error ",stadat_ad[i].Name, close_d);
          console.log("account still active", close_date);
        }
      }
      console.log("appending rows to advances table");
      let branch = stadat_ad[i].Branch_Sol_ID;
      let branch_name = "-";
      let scheme = stadat_ad[i].Scheme_Name;
      let scheme_name = "-";
      let owner = stadat_ad[i].Owner;
      let owner_name = "-";
      if (owner != null) {
        owner_name = owner.name;
      }
      if (scheme != null) {
        scheme_name = scheme.name;
      }
      else
      {
        scheme_name=stadat_ad.SCHM_CODE;
      }
      if (branch != null) {
        branch_name = branch.name;
      }
      console.log("BRANCH NAME :::",branch);
      // <td class="tabdat"  colspan=2>${stadat_ad[i].Account_Name || "-"}</td>
      var row = `<tr id="${stadat_ad[i].id}">
          <td class="tabdatTitle" colspan=2 title="${
            stadat_ad[i].Name
          }" onclick="advClk(this,${i})">${stadat_ad[i].Name || "-"}</td>
      
          <td class="tabdat" colspan=2>${stadat_ad[i].Branch_Name	 || "-"}</td>
          <td class="tabdat" colspan=2>${stadat_ad[i].Scheme_Code || "-"}</td>
          <td class="tabdat" colspan=2>${
            format_date(stadat_ad[i].A_c_Open_Date) || "-"
          }</td>
          <td class="tabdat" colspan=2>${
            format_bal2(stadat_ad[i].Sanctioned_Amount || "-")
          }</td>
          <td class="tabdat" colspan=2>${
           stadat_ad[i].ACCT_POA_AS_REC_TYPE != ""?"M":"-"
          }</td>
          <td class="tabdat" colspan=2>${
           format_bal3( stadat_ad[i].Balance_Currency || "-")
          }</td>
          <td class="tabdat" colspan=2>${
            format_bal2(stadat_ad[i].Overdue_Amount || "-")
          }</td>
    
          <td class="tabdat" colspan=2>${close_flag}</td>
          </tr>`;
      table.innerHTML += row;
    }
  }
}
function populate_fb_deposits(stadat_casa, show_closed_acc) {
  stadat_casa = sort_accounts_casa(stadat_casa);
  console.log("sorted casa is", stadat_casa);
  fb_casa = stadat_casa;
  console.log("show closed acc is", show_closed_acc);

  let populated = false;
  let table = document.getElementById("tbldepdtbcs");
  table.innerHTML = "";
  if (stadat_casa.length == 0) {
    console.log("GOT THERE");
    var row = `<tr>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        </tr>`;
    table.innerHTML += row;
  } else {
    console.log("populating fb_casa table", fb_casa);
    for (var i = 0; i < stadat_casa.length; i++) {
      // let exp_date=stadat_bgrd[i].Expiry_Date||"-";
      let sol_id = stadat_casa[i].Branch || "-";
      let sol_lookup = stadat_casa.Branch_Sol_ID || "-";
      let sol_name = "";
      if (sol_lookup == "-") {
        sol_name = "-";
      } else {
        sol_name = sol_lookup.name || "-";
      }
      let sol_str = "";
      if (sol_name == "-" && sol_id == "-") {
        sol_str = "-";
      } else if (sol_name == "-" && sol_id != "-") {
        sol_str += `${sol_id}`;
      } else if (sol_name != "-" && sol_id == "-") {
        sol_str += `${sol_name}`;
      } else {
        sol_str += `${sol_name}(${sol_id})`;
      }
      let close_date = stadat_casa[i].ACCT_CLS_FLG || "-";
      let close_flag = "No";
      if (close_date != "-") {
        // let today = new Date();
        // let close_d = new Date(close_date.split(" ")[0]);
        // console.log("comparing dates", today > close_d);
        // console.log("cd is", close_d);
        // if (today.getDate() < close_d.getDate()) {
        if (close_date == "Y") {
          close_flag = "Yes";
          console.log("Skipping records");
          if (!show_closed_acc) {
            console.log("Skipping records");
            continue;
          }
        } else {
          console.log("account still active", close_date);
        }
      }
      if ((stadat_casa[i].Scheme_Code != "RDNLX" &&stadat_casa[i].Scheme_Code != "RDFLX") &&(stadat_casa[i].A_c_Type == "Current" ||stadat_casa[i].A_c_Type == "Saving" ||stadat_casa[i].A_c_Type == "CAA" ||stadat_casa[i].A_c_Type == "SBA"))
      {
        let scheme_code = stadat_casa[i].Scheme_Codes || "-";
        let scheme_name = "-";
        let owner = stadat_casa[i].Owner;
        let owner_name = "-";
        if (owner != null) {
          owner_name = owner.name;
        }
        if (scheme_code != "-") {
          scheme_name = scheme_code.name;
        }
        else
        {
          scheme_name=stadat_casa[i].SCHM_CODE;
        }
        var row = `<tr id="${stadat_casa[i].id}">
          <td class="tabdatTitle" colspan=2 onclick="casaClk(this,${i})">${
          stadat_casa[i].Name || "-"
        }</td>
          
          <td class="tabdat" colspan=2>${sol_str || "-"}</td>
          <td class="tabdat" colspan=2>${stadat_casa[i].Scheme_Code || "-"}</td>
          <td class="tabdat" colspan=2>${format_date(
            stadat_casa[i].A_c_Open_Date
          )}</td>
          <td class="tabdat" colspan=2>${stadat_casa[i].ACCT_POA_AS_REC_TYPE != ""?"M":"-"}</td>
          <td class="tabdat" colspan=2>${
            format_bal2(stadat_casa[i].Balance_Currency || "-")
          }</td>
          <td class="tabdat" colspan=2>${format_bal2(stadat_casa[i].Lien_Amount || "-")}</td>
          <td class="tabdat" colspan=2>${
            stadat_casa[i].Account_Status || "-"
          }</td>
          
          <td class="tabdat" colspan=2>${close_flag}</td>
          </tr>`;
        table.innerHTML += row;
        populated = true;
      }
    }
    // <td class="tabdat" colspan=2>${owner_name}</td>
  }
  if (!populated) {
    console.log("GOT THERE");
    var row = `<tr>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        </tr>`;
    table.innerHTML += row;
  }
}
function populate_fb_term_deposits(stadat_td, show_closed_acc) {
  stadat_td = sort_accounts_td(stadat_td);
  fb_td = stadat_td;
  console.log("show closed acc is td", show_closed_acc);
  let table = document.getElementById("tbldepdtbtd");
  table.innerHTML = "";
  let populated = false;
  if (stadat_td.length == 0) {
    console.log("GOT THERE");
    var row = `<tr>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        </tr>`;
    table.innerHTML += row;
  } else {
    console.log("populating fb_td table", fb_td);
    for (var i = 0; i < stadat_td.length; i++) {
      // let exp_date=stadat_bgrd[i].Expiry_Date||"-";
      let close_date = stadat_td[i].ACCT_CLS_FLG || "-";
      let close_flag = "No";
      if (
        (stadat_td[i].A_c_Type == "Current" ||
          stadat_td[i].A_c_Type == "Saving" ||
          stadat_td[i].A_c_Type == "CAA" ||
          stadat_td[i].A_c_Type == "SBA") &&
        // RDFLX Changes
        stadat_td[i].Scheme_Code != "RDFLX" &&
        stadat_td[i].Scheme_Code != "RDNLX"
      ) {
        continue;
      }
      if (close_date != "-") {
        // let today = new Date();
        // let close_d = new Date(close_date.split(" ")[0]);
        // console.log("comparing dates", today > close_d);
        // console.log("cd is", close_d);
        // if (today.getDate() < close_d.getDate()) {
        if (close_date == "Y") {
          close_flag = "Yes";
          console.log("Skipping records");
          if (!show_closed_acc) {
            console.log("Skipping records");
            continue;
          }
        } else {
          console.log("account still active", close_date);
        }
      }
      if (stadat_td[i].A_c_Type == "TDA" || stadat_td[i].Scheme_Code == "RDNLX" ||
      stadat_td[i].Scheme_Code == "RDFLX") {
        console.log("TD ACC", stadat_td);

        let branch = stadat_td[i].Branch_Sol_ID;
        let branch_name = "-";
        let scheme = stadat_td[i].Scheme_Codes;
      console.log("TD SCHEME CODES::",scheme);
        let scheme_name = "-";
        let owner = stadat_td[i].Owner;
        let owner_name = "-";
        if (owner != null) {
          owner_name = owner.name;
        }
        if (scheme != null) {
          scheme_name = scheme.name;
        }
      else
      {
        scheme_name=stadat_td[i].SCHM_CODE;
      }
        if (branch != null) {
          branch_name = branch.name;
        }
      // <td class="tabdat"  colspan=2>${
      //   stadat_td[i].Account_Name || "-"
      // }</td>
        var row = `<tr id="${stadat_td[i].id}">
          <td class="tabdatTitle" colspan=2 onclick="tdClk(this,${i})">${
          stadat_td[i].Name || "-"
        }</td>
          
          <td class="tabdat" colspan=2>${stadat_td[i].Branch || "-"}</td>
          <td class="tabdat" colspan=2>${stadat_td[i].Scheme_Code || "-"}</td>
          <td class="tabdat" colspan=2>${format_date(
            stadat_td[i].A_c_Open_Date
          )}</td>
          <td class="tabdat" colspan=2>${stadat_td[i].ACCT_POA_AS_REC_TYPE != ""?"M":"-"}</td>
          <td class="tabdat" colspan=2>${
            format_bal2(stadat_td[i].Balance_Currency || "-")
          }</td>
          <td class="tabdat" colspan=2>${format_date(
            stadat_td[i].Maturity_Date
          )}</td>
          
        
          <td class="tabdat" colspan=2>${close_flag}</td>
</tr>`;
/* <td class="tabdat" colspan=2>${stadat_td[i].Lien_Amount || "-"}</td> */
/* <td class="tabdat" colspan=2>${owner_name}</td> */
        table.innerHTML += row;
        populated = true;
        console.log("added row is", row);
      }
    }
  }
  if (!populated) {
    console.log("GOT THERE");
    var row = `<tr>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        </tr>`;
    table.innerHTML += row;
  }
}
function sort_accounts(stadat_bgrd) {
  let no_result = [];
  let yes_result = [];
  console.log("inside sort accounts", stadat_bgrd);
  for (var i = 0; i < stadat_bgrd.length; i++) {
    if (stadat_bgrd[i] == null) {
      continue;
    }
    let close_date = stadat_bgrd[i].Date_Closed || "-";
    if (close_date != "-") {
      let today = new Date();
      let close_d = new Date(close_date.split(" ")[0]);
      if (today.getDate() < close_d.getDate()) {
        close_flag = "Yes";
        yes_result.push(stadat_bgrd[i]);
      } else {
        console.log("account still active", close_d);
        no_result.push(stadat_bgrd[i]);
      }
    } else {
      no_result.push(stadat_bgrd[i]);
    }
  }
  console.log("yes length is", yes_result.length);
  console.log("no length is", no_result.length);
  return no_result.concat(yes_result);
}
function table_loader(table_id,rows,cols){
  let table_st='';
  for(j=0;j<rows;j++)
  {
    let st=`<tr>`;
    for(i=0;i<cols;i++)
    {
      st+='<td class="tabdat" colspan="2"><div class="glow-container"><div class="glow"></div></div></td>'
    }
    st+='</tr>';
    table_st+=st;
  }
  document.getElementById(table_id).innerHTML=table_st;
}
function table_loader_with_colspan(table_parent,rows,cols,colspan){
  let table_st='';
  if(!colspan)
  colspan=1;
  for(j=0;j<rows;j++)
  {
    let st=`<tr>`;
    for(i=0;i<cols;i++)
    {
      st+=`<td class="tabdat" colspan="${colspan}"><div class="glow-container"><div class="glow"></div></div></td>`;
    }
    st+='</tr>';
    table_st+=st;
  }
  table_parent.innerHTML=table_st;
}
function populate_nfb_table(stadat_bgrd, show_closed_acc) {
  stadat_bgrd = sort_accounts(stadat_bgrd);
  console.log("nfb count is", stadat_bgrd.length);
  nfb_data = stadat_bgrd;
  console.log("show closed acc is", show_closed_acc);
  let table = document.getElementById("tblbgrdtb");
  table.innerHTML = "";
  if (stadat_bgrd.length == 0) {
    console.log("GOT THERE");
    var row = `<tr>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        </tr>`;
    table.innerHTML += row;
  } else {
    // bank_guarantee = stadat_bgrd;
    // nfb_data=stadat_bgrd;
    console.log("populating nfb table", nfb_data);
    for (var i = 0; i < stadat_bgrd.length; i++) {
      let exp_date = stadat_bgrd[i].Expiry_Date || "-";
      if (stadat_bgrd[i].Non_Fund_Type == "Forward Contract")
      {
        exp_date=stadat_bgrd[i].Validity_To || "-";
      }
      let close_date = stadat_bgrd[i].Date_Closed || "-";
      let close_flag = "No";
      if (close_date != "-") {
        let today = new Date();
        let close_d = new Date(close_date.split(" ")[0]);
        console.log("comparing dates", today > close_d);
        console.log("cd is", close_d);
        //today.getDate() < close_d.getDate() doesn't work as expected. Hence, 
        if (true) {
          close_flag = "Yes";
          console.log("Skipping records");
          if (!show_closed_acc) {
            console.log("Skipping records");
            continue;
          }
        } else {
          console.log("account still active", close_d);
        }
      }
      if (exp_date != "-") {
        exp_date = format_date(exp_date.split(" ")[0]);
      }
      console.log("BG NO.",stadat_bgrd[i].BG_No_Bank_Gurantee || "-", stadat_bgrd[i].BG_No_Bank_Gurantee);
      var row = `<tr id="${stadat_bgrd[i].id}">
        <td class="tabdat" colspan=2 onclick="bgnClk(this, ${i})">${
        stadat_bgrd[i].BG_No_Bank_Gurantee || "-"
      }</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].BG_No_Bank_Gurantee_No_No || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].BG_Type || "-"}</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Beneficiary_Name || "-"
        }</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].ACCT_POA_AS_REC_TYPE != ""?"M":"-"
        }</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Currency_in_Amount || "-"
        }</td>
        </tr>`;
      let sol_id = stadat_bgrd[i].SOL || "-";
      let sol_lookup = stadat_bgrd.SOL_ID || "-";
      let sol_name = "";
      if (sol_lookup == "-") {
        sol_name = "-";
      } else {
        sol_name = stadat_bgrd[i].SOL_ID.name || "-";
      }

      let sol_str = "";
      if (sol_name == "-" && sol_id == "-") {
        sol_str = "-";
      } else if (sol_name == "-" && sol_id != "-") {
        sol_str += `${sol_id}`;
      } else if (sol_name != "-" && sol_id == "-") {
        sol_str += `${sol_name}`;
      } else {
        sol_str += `${sol_name}(${sol_id})`;
      }
      if (stadat_bgrd[i].Non_Fund_Type == "Letter of Credit") {
        console.log("Letter if credit clicked");
        //add loc row
        var row = `<tr id="${stadat_bgrd[i].id}" >
        <td class="tabdatTitle" colspan=2 onclick="nonfundrowclick(this, ${i},'${
          stadat_bgrd[i].Non_Fund_Type
        }')">${stadat_bgrd[i].LC_No_Letter_of_Credit_No || "-"}</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Non_Fund_Type || "-"}</td>
        <td class="tabdat" colspan=2>${sol_str}</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Beneficiary_Name || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Amount || "-"}</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Currency_Code || "-"}</td>
        <td class="tabdat" colspan=2>${exp_date}</td>
        <td class="tabdat" colspan=2>${close_flag}</td>
        </tr>`;
      } else if (stadat_bgrd[i].Non_Fund_Type == "Bank Guarantee") {
        console.log("Bank guarantee clicked");
        var row = `<tr id="${stadat_bgrd[i].id}">
        <td class="tabdat" colspan=2 onclick="nonfundrowclick(this, ${i},'${
          stadat_bgrd[i].Non_Fund_Type
        }')"><a class="linkTitle">${
          stadat_bgrd[i].BG_No_Bank_Gurantee || "-"
        }</a></td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Non_Fund_Type || "-"}</td>
        <td class="tabdat" colspan=2>${sol_str}</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Beneficiary_Name || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Amount || "-"}</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Currency_Code || "-"}</td>
        <td class="tabdat" colspan=2>${exp_date}</td>
        <td class="tabdat" colspan=2>${close_flag}</td>
        </tr>`;
      } else if (stadat_bgrd[i].Non_Fund_Type == "Forward Contract") {
        console.log("Forward contract clicked", stadat_bgrd[i].Contract_Amount);
        var row = `<tr id="${stadat_bgrd[i].id}">
        <td class="tabdat" colspan=2 onclick="nonfundrowclick(this, ${i},'${
          stadat_bgrd[i].Non_Fund_Type
        }')"><a class="linkTitle">${
          stadat_bgrd[i].Forward_Contract || "-"
        }</a></td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Non_Fund_Type || "-"}</td>
        <td class="tabdat" colspan=2>${sol_str}</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Beneficiary_Name || "-"
        }</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Contract_Amount || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Currency_Code || "-"}</td>
        <td class="tabdat" colspan=2>${exp_date}</td>
        <td class="tabdat" colspan=2>${close_flag}</td>
        </tr>`;
      }

      table.innerHTML += row;
    }
  }
}

async function toggle_clicked() {
  console.log("toggled", document.getElementById("nfb_check_box").checked);
  if (document.getElementById("nfb_check_box").checked) {
    if(!non_fund_too_large)
    {
      populate_nfb_table(nfb_data, true);
    }
    else
    {

      navigate_to_page_non_fund((nfub_current_page*-1)+1,null);
    }
    closed_rel["adv"] = "Y";
    populate_fb_advances(fb_adv, true);
  } else {
    if(!non_fund_too_large)
    {
      populate_nfb_table(nfb_data, true);
    }
    else
    {
      navigate_to_page_non_fund((nfub_current_page*-1)+1,null);
    }
    populate_nfb_table(nfb_data, false);
    closed_rel["adv"] = "N";
    populate_fb_advances(fb_adv, false);
      // get current page and check if it is > last open page 
    // Y - take to last open page
    // N - dont change page
    let page = document.getElementById("page_num_adv");
    console.log("ADV TOGGLE PAGE",page.title);
    if(parseInt(last_open_page_rel["adv"]) < parseInt(page.title)) {
      related_flg['adv'] = false;
      await get_relatedrc(String(last_open_page_rel["adv"]),"adv");
      console.log("PREV PAGE :::", last_open_page_rel["adv"]);
    }
    
  }
  populate_related_records(rel_data["adv"],document.getElementById("tblrel_adv"),document.getElementById("tbldepdtbtdrelhdr_adv"),"adv");
}
function inactive_session_timeout() {
  console.log("session timeout started");
  var timer;
  var events = [
    "mousedown",
    "mousemove",
    "keypress",
    "scroll",
    "touchstart",
    "click",
  ];
  for (let i = 0; i < events.length; i++) {
    document.addEventListener(events[i], resetTimer, true);
  }
  function resetTimer() {
    console.log("time out reset");
    clearTimeout(timer);
    timer = setTimeout(logout, time_out);
  }
  function logout() {
    console.log("logging out");
    ZOHO.CRM.UI.Record.open({ Entity: "Contacts", RecordID: rid }).then((d) => {
      console.log("logged out", d);
    });
  }
}
window.onload = function () {
  inactive_session_timeout();
};
//end of session time out code
async function add_closed_accounts_td() {
  
  if (document.getElementById("tdCheckBox").checked) {
    console.log("Checked td");
    closed_rel["td"] = "Y";
    populate_fb_term_deposits(fb_td, true);
    
  } else {
    closed_rel["td"] = "N";
    populate_fb_term_deposits(fb_td, false);
    // get current page and check if it is > last open page 
    // Y - take to last open page
    // N - dont change page
    let page = document.getElementById("page_num_td");
    console.log("TD TOGGLE PAGE",page.title);
    if(parseInt(last_open_page_rel["td"]) < parseInt(page.title)) {
      related_flg['td'] = false;
      await get_relatedrc(String(last_open_page_rel["td"]),"td");
      console.log("PREV PAGE :::", last_open_page_rel["td"]);
    }
  }
  populate_related_records(rel_data["td"],document.getElementById("tblrel_td"),document.getElementById("tbldepdtbtdrelhdr_td"),"td");
}
async function add_closed_accounts_casa() {
  
  if (document.getElementById("casaCheckBox").checked) {
    console.log("Checked casa");
    closed_rel["casa"] = "N";
    populate_fb_deposits(fb_casa, true);
  } else {
    closed_rel["casa"] = "N";
    populate_fb_deposits(fb_casa, false);
    // get current page and check if it is > last open page 
    // Y - take to last open page
    // N - dont change page
    let page = document.getElementById("page_num_casa");
    console.log("CASA TOGGLE PAGE",page.title);
    if(parseInt(last_open_page_rel["casa"]) < parseInt(page.title)) {
      related_flg['casa'] = false;
      await get_relatedrc(String(last_open_page_rel["casa"]),"casa");
      console.log("PREV PAGE :::", last_open_page_rel["casa"]);
    }
  }
  populate_related_records(rel_data["casa"],document.getElementById("tblrel_casa"),document.getElementById("tbldepdtbtdrelhdr_casa"),"casa");
}
async function add_closed_accounts_adv() {
  
  if (document.getElementById("advCheckBox").checked) {
    console.log("Checked adv");
    closed_rel["adv"] = "N";
    populate_fb_advances(fb_adv, true);
  } else {
    closed_rel["adv"] = "N";
    populate_fb_advances(fb_adv, false);
     // get current page and check if it is > last open page 
    // Y - take to last open page
    // N - dont change page
    let page = document.getElementById("page_num_adv");
    console.log("ADV TOGGLE PAGE",page.title);
    if(parseInt(last_open_page_rel["adv"]) < parseInt(page.title)) {
      related_flg['adv'] = false;
      await get_relatedrc(String(last_open_page_rel["adv"]),"adv");
      console.log("PREV PAGE :::", last_open_page_rel["adv"]);
    }
  }
  populate_related_records(rel_data["adv"],document.getElementById("tblrel_adv"),document.getElementById("tbldepdtbtdrelhdr_adv"),"adv");
}

function getDataCrossSellData(){
  document.getElementById("snow-shimmer-div").classList.add("hide_shimmer");
  document.getElementById("crusPanel1").style.display = "none";
  display_panel_overlay("snow-shimmer-overlay",loader_html);
  error_div = document.getElementById("error_csus_div");
  call_crm_function("get_cross_sell_data",{custId : custid}).then((resp) => {
    // get data and append to current services
    document.getElementById("csusPanelList").innerHTML ="";
    console.log("CSUS DATA:: ",resp);
    if (resp.code == "NOT_ACTIVE") {
      error_div.innerHTML = "Please try again!";
      error_div.style.display = "block"
      throw Error("REST API NOT ACTIVE");
    }
    if (resp.code == "INVALID_DATA") {
      error_div.innerHTML = "Please try again!";
      error_div.style.display = "block"
      throw Error("INVALID DATA");
    }
    console.log(resp.details.output);
    data = JSON.parse(resp.details.output);
    console.log(data);
    data = JSON.parse(data.response);
    if (data.length == 0) {
      // document.getElementById("snow-shimmer-div").classList.remove("hide_shimmer");
      console.log("CSUS LIST", csusList,prd_description);
      csuslistElements = document.getElementById("csusPanelList");
      for (let i = 0; i < csusList.length; i++) {
        // const element = csusList[i];
        console.log("ALD PRD ::", csusList[i]);
        if (prd_description.hasOwnProperty(csusList[i]) && prd_description[csusList[i]] != "") {
          csuslistElements.innerHTML +=
          `<li class="blue-csus" onclick="openDescription(\`${prd_description[csusList[i]]}\`)">` + csusList[i] + `</li>`;
        }else{
          csuslistElements.innerHTML +=
          `<li>` + csusList[i] + `</li>`;
        }
      
      }
      RetailCorporate = document.getElementById("ctrtcorp2").innerHTML;
      if(RetailCorporate == "Retail"){
        if (prd_description.hasOwnProperty("Vehicle Loan") && prd_description["Vehicle Loan"] != "" ) {
          csuslistElements.innerHTML +=
          `<li class="blue-csus" onclick="openDescription(\`${prd_description["Vehicle Loan"]}\`)">Vehicle Loan</li>`;
        }else{
          csuslistElements.innerHTML +=
          `<li>Vehicle Loan</li>`;
        }
        if (prd_description.hasOwnProperty("Mutual Funds") && prd_description["Mutual Funds"] != "") {
          csuslistElements.innerHTML +=
          `<li  class="blue-csus" onclick="openDescription(\`${prd_description["Mutual Funds"]}\`)">Mutual Funds</li>`;
        }else{
          csuslistElements.innerHTML +=
          `<li>Mutual Funds</li>`;
        }
        // csusList.push("Vehicle Loan");
      }
      document.getElementById("crusPanel1").style.display = "block";
      hide_panel_overlay("snow-shimmer-overlay");
      return;
    }else{
      // data is there
      console.log("ADDITIONAL DATA::: ",data);
      // csusList = document.getElementById("csusPanelList").getElementsByTagName("li");
      flg = false;
      add_data = [];
      for (let i=0; i<data.length; i++) {
        console.log("CSUS ALD ",data[i], "CSUS NEW ", data[i].PRODUCT_TYPE);
        if (!csusList.includes(data[i].PRODUCT_TYPE)) {
          console.log("CSUS NEW", data[i].PRODUCT_TYPE);
          add_data.push({"product":data[i].PRODUCT_TYPE,"desc":data[i].DESC});
          // csusList.push(data[i].PRODUCT_TYPE);
          flg = true;
        }
      }
      if (flg){
        // append data to li
        csusListOL = document.getElementById("csusPanelList");
        console.log("HERE1");
        for (let i=0; i<add_data.length; i++) {
          console.log("ADDITIONAL DATA ::: ",add_data[i]);
          if (add_data[i].desc != '' ) {
              console.log("DESC PRESENT :: ", add_data[i].desc);
              csusListOL.innerHTML += `<li style="font-style: italic;" onclick="openDescription('${add_data[i].desc}')"> 
              <a class="blue-csus">${add_data[i].product}</a>
          </li>`;
            }else{
            csusListOL.innerHTML += `<li style="font-style: italic;"> 
        ${add_data[i].product}
        </li>`;
          }
        }
        document.getElementById("crusPanel1").style.display = "block";
        hide_panel_overlay("snow-shimmer-overlay");
        // return;
      }else{
        // show as it is
        console.log("nothing to add");
        document.getElementById("crusPanel1").style.display = "block";
        hide_panel_overlay("snow-shimmer-overlay");
        // return;
      }
      // add the already extising services
      console.log("CSUS LIST", csusList,prd_description);
      csuslistElements = document.getElementById("csusPanelList");
      for (let i = 0; i < csusList.length; i++) {
        // const element = csusList[i];
        console.log("ALD PRD ::", csusList[i]);
        if (prd_description.hasOwnProperty(csusList[i]) && prd_description[csusList[i]] != "") {
          csuslistElements.innerHTML +=
          `<li class="blue-csus" onclick="openDescription(\`${prd_description[csusList[i]]}\`)">` + csusList[i] + `</li>`;
        }else{
          csuslistElements.innerHTML +=
          `<li>` + csusList[i] + `</li>`;
        }
      
      }
      RetailCorporate = document.getElementById("ctrtcorp2").innerHTML;
      if(RetailCorporate == "Retail"){
        if (prd_description.hasOwnProperty("Vehicle Loan") && prd_description["Vehicle Loan"] != "" ) {
          csuslistElements.innerHTML +=
          `<li class="blue-csus" onclick="openDescription(\`${prd_description["Vehicle Loan"]}\`)">Vehicle Loan</li>`;
        }else{
          csuslistElements.innerHTML +=
          `<li>Vehicle Loan</li>`;
        }
        if (prd_description.hasOwnProperty("Mutual Funds") && prd_description["Mutual Funds"] != "") {
          csuslistElements.innerHTML +=
          `<li  class="blue-csus" onclick="openDescription(\`${prd_description["Mutual Funds"]}\`)">Mutual Funds</li>`;
        }else{
          csuslistElements.innerHTML +=
          `<li>Mutual Funds</li>`;
        }
        // csusList.push("Vehicle Loan");
      }

    }
    // csusList = document.getElementById("csusPanelList").getElementsByTagName("li");
    // check duplicate
    
    // for (const s of csusList) {
    //   if (s.innerHTML == ) {
        
    //   }
      
    // }
  }).catch((e) => {
    console.log("ERROR in FUNCTION CALL",e);
    // show backdrop
    console.log("CSUS LIST", csusList,prd_description);
    csuslistElements = document.getElementById("csusPanelList");
    for (let i = 0; i < csusList.length; i++) {
      // const element = csusList[i];
      console.log("ALD PRD ::", csusList[i]);
      if (prd_description.hasOwnProperty(csusList[i]) && prd_description[csusList[i]] != "") {
        csuslistElements.innerHTML +=
        `<li class="blue-csus" onclick="openDescription(\`${prd_description[csusList[i]]}\`)">` + csusList[i] + `</li>`;
      }else{
        csuslistElements.innerHTML +=
        `<li>` + csusList[i] + `</li>`;
      }
      if (prd_description.hasOwnProperty("Mutual Funds") && prd_description["Mutual Funds"] != "") {
        csuslistElements.innerHTML +=
        `<li  class="blue-csus" onclick="openDescription(\`${prd_description["Mutual Funds"]}\`)">Mutual Funds</li>`;
      }else{
        csuslistElements.innerHTML +=
        `<li>Mutual Funds</li>`;
      }
    }
    RetailCorporate = document.getElementById("ctrtcorp2").innerHTML;
    if(RetailCorporate == "Retail"){
      if (prd_description.hasOwnProperty("Vehicle Loan") && prd_description["Vehicle Loan"] != "" ) {
        csuslistElements.innerHTML +=
        `<li class="blue-csus" onclick="openDescription(\`${prd_description["Vehicle Loan"]}\`)">Vehicle Loan</li>`;
      }else{
        csuslistElements.innerHTML +=
        `<li>Vehicle Loan</li>`;
      }
      // csusList.push("Vehicle Loan");
    }
    document.getElementById("snow-shimmer-div").classList.remove("hide_shimmer");
    hide_panel_overlay("snow-shimmer-overlay");
  });
}






function fetchPersonalisedOffer(){
  let panelId="personalisedPanel";
  let panelOverlayId="psPanelOverlay";
  let errorId="error_ps_div";
  let panelBody=document.getElementById("psPanelOl");
  let panelOverlay=document.getElementById(panelOverlayId);
  let panelElem=document.getElementById(panelId);
  let custID=custid;
  // custID="1000540101";
  // panelBody.innerHTML="";'
  if(panelElem)
  {
    let panelLoaded=panelElem.getAttribute("panelLoaded");
    if(!panelLoaded||panelLoaded!="true")
    {
      //hit API call here

    //Call API to fetch data from Mobile usage table
  let sqlQuery="select \"OFFER DATE\" , \"VALID TILL\", \"PRODUCT\", \"BUSINESS_NAME\", \"OFFER AMOUNT\", \"SCHEME CODE\" from \"Upload_EASE_PersonalizedOffers\" where \"CUSTOMER ID\"='"+custID+"'";
  let sqlQueryEncoded=encodeURI(sqlQuery);
  let analyticsOwnerEmail=encodeURI("crmadmin1@unionbankofindia.bank");
  let workspaceName=encodeURI("Zoho CRM Analytics");
  let viewName="Upload_EASE_PersonalizedOffers";
  let analyticsUrl="https://analytics.unionbankofindia.co.in/api/"+analyticsOwnerEmail+"/"+workspaceName+"/"+viewName+`?ZOHO_ACTION=EXPORT&ZOHO_OUTPUT_FORMAT=JSON&ZOHO_ERROR_FORMAT=JSON&ZOHO_API_VERSION=1.0&KEY_VALUE_FORMAT=True&ZOHO_SQLQUERY=${sqlQueryEncoded}`;
  let analyticsReqData={
    headers:{
      "ZANALYTICS-ORGID":"11606"
    },
    method:"POST",
    url:analyticsUrl
  };
  let exportConnection="analyticsdata";
  ZOHO.CRM.CONNECTION.invoke(exportConnection, analyticsReqData).then((resp)=>{

    

    if(resp.code=="SUCCESS")
    {
      
      let dataRows=resp.details.statusMessage.data;
      console.log("value---->",dataRows);

      let currentPersonalOffer;
      
      if (dataRows && dataRows.length > 0)
      {
        panelOverlay.classList.add("hide");
      for(i=0;i<dataRows.length;i++)
        {
          let liElem=document.createElement("li");
          currentPersonalOffer=dataRows[i];
          liElem.classList.add("blue-csus");
          liElem.innerHTML=dataRows[i].PRODUCT;
          panelBody.appendChild(liElem);
          liElem.addEventListener("click",(evt)=>{
            showPersonalisedOfferMoreInfo(currentPersonalOffer);
          // panelBody.innerHTML+=`<li class="blue-csus">` +personalisedOffers[i].PRODUCT+ `</li>`;
        });
        }
        panelOverlay.classList.add("hide");
      }
      else
      {
        // panelElem.classList.add("hide");
        display_panel_overlay(panelOverlayId,"No Personalised Offers");
      }
    
    }
  }).catch((err)=>{
    console.error("Fetch Personalised Offer Fetch Failed",err);
    // panelElem.classList.add("hide");
    display_panel_overlay(panelOverlayId,"No Personalised Offers");
  }).finally(()=>{
    // panelOverlay.classList.add("hide");
  });
  panelElem.setAttribute("panelLoaded","true");
    }
    
  }
  
}


//
function showPersonalisedOfferMoreInfo(personalisedOffers){
  let popUp=createDynamicPopUp();
  let popUpBody=popUp.querySelector("#popUpBody");
  let tableClone=document.getElementById("personalisedOffersTableClone");
  if(tableClone)
  {
    let table=tableClone.cloneNode(true);
    table.id+=dynamicDropCount++;
    table.innerHTML+=`<tr><td>${personalisedOffers["OFFER DATE"]}</td><td>${personalisedOffers["VALID TILL"]}</td><td>${personalisedOffers["PRODUCT"]}</td><td>${personalisedOffers["BUSINESS_NAME"]}</td><td>${personalisedOffers["OFFER AMOUNT"]}</td><td>${personalisedOffers["SCHEME CODE"]}</td></tr>`;
    table.classList.remove("hide");
    popUpBody.innerHTML=``;
    popUpBody.appendChild(table);
    popUpBody.style.paddingRight="2%";
    popUp.children[0].classList.add("greyify-bg");
  }
}









function format_last_update_time(n) {
  // create Y, N and -
  console.log("last updated date", n);
  n = n || "-";
  days = n.split(" ")[0];
  curr = new Date();
  day1 = new Date(days);
  if (curr.getDate() < day1.getDate()) {
    return "Yes";
  } else {
    return "No";
  }
  // return "-";
}
function format_string(n) {
  try {
    if (n == "-") {
      return n;
    }
    return n.substring(-1, 4) + "..";
  } catch (e) {
    return n;
  }
}
function resolve_y_n(code) {
  if (code == "Y" || code == "y") {
    return "Yes";
  } else if (code == "N" || code == "n") {
    return "No";
  } else {
    return code;
  }
}
function resolve_account_type(code) {
  if (code == "CAA") {
    return "Current Account";
  } else if (code == "SBA") {
    return "Savings Bank Account";
  } else if (code == "TDA") {
    return "Term Deposit Account";
  } else {
    return code;
  }
}
function resolve_account_status(code) {
  if (code == "A") {
    return "Active";
  } else if (code == "I") {
    return "Inactive";
  } else if (code == "D") {
    return "Dormant";
  } else {
    return code;
  }
}
function find_res_status(res_status) {
  if (res_status == "1") {
    return "Resident";
  } else if (res_status == "2") {
    return "NRI";
  } else if (res_status == "2") {
    return "PIO";
  }
  return "Foreign National";
}
function search_record_crm(module, criteria) {
  let func_name = "Search_Record";
  let params = {
    Module: module,
    Criteria: criteria,
  };
  let req = {
    arguments: JSON.stringify(params),
  };
  return ZOHO.CRM.FUNCTIONS.execute(func_name, params);
}
function getAge(today, dob) {
  if (dob == "-") {
    return "-";
  }
  diff_in_year = today.getFullYear() - dob.getFullYear();
  diff_in_month = today.getMonth() - dob.getMonth();
  if (diff_in_year < 0) {
    return "-";
  } else {
    if (diff_in_month < 0) {
      diff_in_year -= 1;
      if (diff_in_year < 0) {
        return "-";
      }
      diff_in_month = 12 + diff_in_month;
      return `(${diff_in_year}Y, ${diff_in_month}M)`;
    } else {
      return `(${diff_in_year}Y, ${diff_in_month}M)`;
    }
  }
}
function get_empflg(){
    if (!deposits_flg) {
      return employee_account_format(new_deposits[0].Emp_flag || "-");
    }else if (!advances_flg) {
      return employee_account_format(new_advances[0].Emp_Flag || "-");
    }
  

}
function cal_cust_info_common_values(n){
  let interestIncm = 0;
  let nonInterestIncm = 0;
  let sanctionLmtWC = 0;
  let sanctionLmtTL = 0;
  let ttlsncLmt = 0;
  let sncLmtBG = 0;
  let businessValue = 0;
  let highest_sma = "";

  if (n == "nfb") {
    console.log("Called cust common NFB");
    clearInterval(custComInterval1);
    let stadatt = new_non_funds;
    // stadatt = stadatt.concat(new_non_funds);
    console.log("Call data",stadatt.length);
   
    for (let i = 0; i < stadatt.length; i++) {
      const stadat = stadatt[i];
      // Non Fund Based
      if (stadat.hasOwnProperty("Amount")) {
        let exp_date = stadat.Expiry_Date || "-";
        let close_date = stadat.Date_Closed || "-";
        let today = new Date();
        let close_d = new Date(close_date.split(" ")[0]);
        if (today.getDate() < close_d.getDate()) {
          continue;
        }
        if (stadat.hasOwnProperty("Non_Fund_Type")) {
          if (stadat.Non_Fund_Type == "Bank Guarantee") {
            console.log("CURR CODE::",stadat.Currency_Code,parseFloat(stadat.Amount || "0"),parseFloat(stadat.Amount || "0")*curr_conv[stadat.Currency_Code]);
            if (curr_conv.hasOwnProperty(stadat.Currency_Code) && stadat.Currency_Code != "INR") {
              sncLmtBG += parseFloat(stadat.Amount || "0")*curr_conv[stadat.Currency_Code];
            }else{
              sncLmtBG += parseFloat(stadat.Amount || "0");
            }
            
          }
          if (stadat.Non_Fund_Type == "Letter of Credit") {
            console.log("CURR CODE::",stadat.Currency_Code,parseFloat(stadat.Amount || "0"),parseFloat(stadat.Amount || "0")*curr_conv[stadat.Currency_Code]);
            if (curr_conv.hasOwnProperty(stadat.Currency_Code) && stadat.Currency_Code != "INR") {
              ttlsncLmt += parseFloat(stadat.Amount || "0")*curr_conv[stadat.Currency_Code];
            }else{
              ttlsncLmt += parseFloat(stadat.Amount || "0");
            }
          }
        }
      }
      
    }
    console.log("Called VAl",nonInterestIncm, interestIncm, sanctionLmtWC, sanctionLmtTL, ttlsncLmt, sncLmtBG);
    
    // document.getElementById("ctttlsanclmtlc").innerHTML = format_bal4(ttlsncLmt==0?"0":ttlsncLmt || "-");
    // document.getElementById("ctsanclmtbg").innerHTML = format_bal4(sncLmtBG==0?"0":sncLmtBG || "-");
  }if (n == "dpadv") {
    console.log("Called cust common info");
    clearInterval(custComInterval);
  
    let npaHist = "No";
    let stadatt = new_deposits.concat(new_advances);
    // stadatt = stadatt.concat(new_non_funds);
    console.log("Call data",stadatt.length);
    for (let i = 0; i < stadatt.length; i++) {
      const stadat = stadatt[i];
      // Deposit Acc & Loan Acc
      // console.log();
      if (stadat.hasOwnProperty("Balance_Currency")) {
        businessValue +=  Math.abs(parseFloat(stadat.Balance_Currency||"0"));
        console.log("CALL",businessValue,stadat.Balance_Currency);
      }
      if (stadat.hasOwnProperty("Non_Interest_Income")) {
        
        nonInterestIncm += parseFloat(stadat.Non_Interest_Income || "0");
      }
      // Loan Acc
      if (stadat.hasOwnProperty("Interest_Income")) {
        console.log("INTEREST INCM",parseFloat( stadat.Interest_Income || "0"),interestIncm, stadat.Name);
        interestIncm += parseFloat( stadat.Interest_Income || "0");
        if( stadat.History_of_NPA == "Yes"){
          npaHist = "Yes";
        }
      }
      if (stadat.hasOwnProperty("SMA_Status") && stadat.hasOwnProperty("Account_Close_Flag")) {
        if (stadat.Account_Close_Flag == "N") highest_sma = compare_smas(highest_sma,stadat.SMA_Status)? highest_sma : stadat.SMA_Status;
      }
      // Deposit Acc
      if (stadat.hasOwnProperty("Sanctioned_Amount")) {
        if (stadat.hasOwnProperty("A_c_Type_Current_Saving")) {
          // console.log("CALL DP ACC",stadat);
          if (
            (stadat.A_c_Type_Current_Saving == "CCA"||
            stadat.A_c_Type_Current_Saving == "ODA"||
            stadat.A_c_Type_Current_Saving == "PCA"||
            stadat.A_c_Type_Current_Saving == "FBA") && (stadat.Account_Close_Flag == "N")
              ) {
                console.log("SANC AMT",stadat.Sanctioned_Amount);
            sanctionLmtWC += parseFloat(stadat.Sanctioned_Amount || "0");
          }
          if (stadat.A_c_Type_Current_Saving == "LAA" && stadat.Account_Close_Flag == "N") {

            sanctionLmtTL += parseFloat(stadat.Sanctioned_Amount || "0") ;
          }
        }
      }
      // Non Fund Based
      // if (stadat.hasOwnProperty("Amount")) {
      //   if (stadat.hasOwnProperty("Non_Fund_Type")) {
      //     if (stadat.Non_Fund_Type == "Bank Guarantee") {
      //       sncLmtBG += stadat.Amount;
      //     }
      //     if (stadat.Non_Fund_Type == "Letter of Credit") {
      //       ttlsncLmt += stadat.Amount;
      //     }
      //   }
      // } 
    }
    console.log("Called VAl",nonInterestIncm, interestIncm, sanctionLmtWC, sanctionLmtTL, ttlsncLmt, sncLmtBG);
    document.getElementById("ctnpahist").innerHTML = npaHist;
    // document.getElementById("ctnnintincm").innerHTML = format_bal4(nonInterestIncm==0?"0":nonInterestIncm || "-");
    // document.getElementById("ctintincm").innerHTML = format_bal4(interestIncm==0?"0":interestIncm || "-");
    // document.getElementById("ctsanclmtwc").innerHTML = format_bal4(sanctionLmtWC==0?"0":sanctionLmtWC || "-");
    // document.getElementById("ctsanclmttl").innerHTML =  format_bal4(sanctionLmtTL==0?"0":sanctionLmtTL || "-");
    // document.getElementById("ctttlsanclmtlc").innerHTML = format_bal4(ttlsncLmt==0?"0":ttlsncLmt || "-");
    // document.getElementById("ctsanclmtbg").innerHTML = format_bal4(sncLmtBG==0?"0":sncLmtBG || "-");
    
    console.log("CALL PRODUCT COUNT", services_availed);
    console.log("CALL BUSINESS VALUE", businessValue);
    console.log("CALL STRESS CAT", highest_sma);
    let crv_score_cal = 0;
    if (highest_sma == "NPA Loss"|| highest_sma == "NPA Doubtful" || highest_sma == "NPA Substandard") {
      crv_score_cal = 0.3*cal_service_availed(services_availed);
    }else{
      crv_score_cal = 0.5*cal_business_val(businessValue)+0.3*cal_service_availed(services_availed)+0.2*cal_stress_cat(highest_sma);
    }
    
    console.log("CALL CRV",crv_score_cal);
    crv_score_cal = crv_score_cal-0.4>Math.floor(crv_score_cal) ? Math.ceil(crv_score_cal) : Math.floor(crv_score_cal);
    console.log("CALL CRV", crv_score_cal);

    if (document.getElementById("ctrtcorp2").innerHTML == "Retail") document.getElementById("ctcrv2").innerHTML = crv_score_cal;
    var star = document.getElementById("ratingStars");
    document.getElementById('star_loader').classList.add('hide');
    star.classList.remove('hide');
    star.style.setProperty("--rating", crv_score_cal);
    // document.getElementById("scoreOf5").innerHTML = ` (${crv_score_cal}/5)`;
  }

}
function cal_business_val(n){
  if (n >= 10000000) return 5;
  else if(n < 10000000 && n>= 5000000) return 4;
  else if(n < 5000000 && n>= 3000000) return 3;
  else if(n < 3000000 && n>= 2000000) return 2;
  else if(n < 2000000) return 1;
}
function cal_service_availed(n){
  if (n >= 6) return 5; 
  if (n < 6 && n >= 3) return 4; 
  if (n < 3) return 3; 
}
function cal_stress_cat(n){
  let sma_array = ["SMA0-Overdue", "SMA1-Overdue", "SMA2-Overdue","NPA Loss","NPA Doubtful", "NPA Substandard"];
  if (n == "SMA0-Overdue") return 4; 
  if (n == "SMA1-Overdue") return 3; 
  if (n == "SMA2-Overdue") return 2; 
  if (n == "NPA Loss"|| n == "NPA Doubtful" || n == "NPA Substandard") return 0; 
  if (!sma_array.includes(n)) return 5; 
}
function getChequeDetails(acc,chq_start,totlal_lvs){
  console.log("CHQ::",acc, chq_start, totlal_lvs);
  // modal.style.zIndex = 1;
var modal4 = document.getElementById("myModal4");
var span4 = document.getElementById("modal4span");
modal4.style.display="block";
modal4.style.zIndex=4;
console.log("loading flex 3");
document.getElementById("loadingWrapper").style.display = "flex";
let table_id = "modalDataTable4z"; //No I18N
  let table_obj = document.getElementById(table_id);
  table_obj.innerHTML = "";
  let table_body = table_obj;
// table_body.innerHTML = `<tr><td class="crm-style-cell">Coming Soon!</td></tr>`;
let func_name = "Range_of_status_of_cheques_API";
let to_chq = parseInt(chq_start) + parseInt(totlal_lvs);
let params = { accn: acc, fromchqno:chq_start, Tochqno:`${to_chq}`};

call_crm_function(func_name, params)
.then((res) => {
  console.log("Range of Status of cheque",res);
  console.log("loading close 11");
  document.getElementById("loadingWrapper").style.display = "none";
  span4.onclick = () => {
    modal4.style.display = "none";
    $("#modalDataTable4 tr").remove();
    $("#modalDataTable4z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal4) {
      modal4.style.display = "none";
      $("#modalDataTable4 tr").remove();
      $("#modalDataTable4z tr").remove();
    }
  }
  if (res.code != "success") {
    console.log("error in cheque status API response",chq_data);
    table_obj.innerHTML = `<tr>
    <td>Cheque Details cant be fetched. Please try again in sometime!</td>
    </tr>`;
    return;
  }
  let chq_data = JSON.parse(res.details.output);
  if (chq_data.status != "00") {
    console.log("error in cheque status API response",chq_data);
    table_obj.innerHTML = `<tr>
    <td>Cheque Details cant be fetched. Please try again in sometime!</td>
    </tr>`;
    return;
  }
  if (chq_data.data.SuccessOrFailure != "Y") {
    console.log("error in cheque status API response",chq_data);
    table_obj.innerHTML = `<tr>
    <td>Cheque Details cant be fetched. Please try again in sometime!</td>
    </tr>`;
    return;
  }
  if (!chq_data.data.hasOwnProperty("ChqDetails")) {
    console.log("error in cheque status API response",chq_data);
    table_obj.innerHTML = `<tr>
    <td>Cheque Details not found!</td>
    </tr>`;
    return;
  }
  if (chq_data.data.hasOwnProperty("Error")) {
    console.log("error in cheque status API response",chq_data);
    table_obj.innerHTML = `<tr>
    <td>Cheque Details cant be fetched. Please try again in sometime!</td>
    </tr>`;
    return;
  }
  chq_data = chq_data.data.ChqDetails;
  console.log("CHQ DETAILS::",chq_data);
  let table_str = "";
  table_str += `<tr><th>Cheque Number</th><th>Status</th></tr>`;
  if (chq_data.length == 0) {
    let row = `<tr class="crm-style-row"><td >-</td><td >-</td></tr>`;
    table_str += row;
  }
  for (let chq of chq_data) {
    let row = `<tr class="crm-style-row"><td >${chq.CHQ_NUM}</td><td>${chq.CHEQUE_STATUS}</td></tr>`;
    table_str += row;
  }
  table_obj.innerHTML = table_str;
})
.catch((err) => {
  table_obj.innerHTML = `<tr>
  <td>Cheque Details cant be fetched. Please try again in sometime!</td>
  </tr>`;
  return;
});
}
function populate_cheque_book() {
  let acct_drop_down = document.getElementById("membership");
  console.log("account drop down is", acct_drop_down.options);
  acct_drop_down.style.display = "flex";
  let selected_acct =
    acct_drop_down.options[acct_drop_down.options.selectedIndex].value;
  document.getElementById("modalDataTable1").innerHTML = "";
  
  console.log("selected acct is", selected_acct);
  if (selected_acct == "No accounts associated") {
    console.log("returning out");
    return;
  }
  let t=document.getElementById("modalDataTable1");
  t.innerHTML=`<div style="position:relative;width:100%;height:120px;background-color:white;border-radius:4px;box-shadow: 0 2px 8px 0 #b1b1b1;">${block_loader_html}</div>`;
  //****//
  // Created a duplicate of chequebook api function in prod and replaced the url of new cheque book api
  // Changed the function name below
  let func_name = "chequebook_api";
  let params = { accno: selected_acct };
  span1.onclick = () => {
    modal1.style.display = "none";
    modal.style.display = "none";
    $("#modalDataTable1 tr").remove();
  };
  call_crm_function(func_name, params)
    .then(function (res) {
      // let res = JSON.parse(data);
      document.getElementById("modalDataTable1").innerHTML = "";
      console.log("loading close 12");
      document.getElementById("loadingWrapper").style.display = "none";
      modal.style.display = "block";
      // console.log(JSON.parse(res.details.output));
      try {
        if ("status" in res && res.status != 00) {
          throw Error(res.error);
        }
      } catch (error) {
        console.log("Here");
        console.log(res);
        res = JSON.parse(res);
        if (res.status != 200) {
          throw Error(res.error);
        }
      }
      if (
        res.status == 00 ||
        res.http_statusCode == 200 ||
        "status" in res == false
      ) {
        stadat = "";
        stadat = JSON.parse(res.details.output);
        stadat = stadat.data;
        // stadat=stadat;
        console.log("CHEQUE BOOK API RESPONSE ::",stadat);
        if (
          stadat.SuccessOrFailure == "Y"
          // stadat.ChqDetails.successorfailure == "S"
        ) {
          var table = document.getElementById("modalDataTable1");
          if (stadat.hasOwnProperty("ChqDetails")) 
          {
            
            let hdr = `<tr class="modalDataCb">
        <th>Starting Cheque Number</th>
        <th>Number of Leaves</th>
        <th>Issue Date</th>
        <th>Passed</th>
        <th>Unused</th>
        <th>Stopped</th>
        <th>Destroyed</th>
        </tr>`;
            /*
        Message
  : 
  "Success"
  availleaf1
  : 
  "20"
  chequebooksissued1
  : 
  "1"
  clearingAmt1
  : 
  "0"
  lastIssueDt1
  : 
  "17-07-2019"
  successorfailure
  : 
  "S"
         */
            //     hdr += `
            // <th>Number of cheque books issued</th>
            // <th>Number of available cheque leaf</th>
            // <th>Cheque Book Last Issued Date</th>
            // <th>Clearing Amount</th>
            // </tr>`;
            table.innerHTML += hdr;
                if (stadat.ChqDetails.hasOwnProperty("BEGIN_CHQ_NUM")) {
                  table.innerHTML += `<tr onclick="getChequeDetails('${selected_acct}','${stadat.ChqDetails.BEGIN_CHQ_NUM}','${stadat.ChqDetails.CHQ_NUM_OF_LVS}')">
                      <td>${stadat.ChqDetails.BEGIN_CHQ_NUM || ""}</td>
                      <td>${stadat.ChqDetails.CHQ_NUM_OF_LVS || ""}</td>
                      <td>${
                        format_date(stadat.ChqDetails.CHQ_ISSU_DATE) || ""
                      }</td>
                      <td>${stadat.ChqDetails.PASSED || ""}</td>
                      <td>${stadat.ChqDetails.UNUSED || ""}</td>
                      <td>${stadat.ChqDetails.STOPPED || ""}</td>
                      <td>${stadat.ChqDetails.DESTROYED || ""}</td>
                    </tr>`;
                } else {
            for (let i = 0; i < stadat.ChqDetails.length; i++) {
              const element = stadat.ChqDetails[i];

              var row = `<tr onclick="getChequeDetails('${selected_acct}','${stadat.ChqDetails[i].BEGIN_CHQ_NUM}','${stadat.ChqDetails[i].CHQ_NUM_OF_LVS}')">
                    <td>${stadat.ChqDetails[i].BEGIN_CHQ_NUM || ""}</td>
                    <td>${stadat.ChqDetails[i].CHQ_NUM_OF_LVS || ""}</td>
                    <td>${
                      format_date(stadat.ChqDetails[i].CHQ_ISSU_DATE) || ""
                    }</td>
                    <td>${stadat.ChqDetails[i].PASSED || ""}</td>
                    <td>${stadat.ChqDetails[i].UNUSED || ""}</td>
                    <td>${stadat.ChqDetails[i].STOPPED || ""}</td>
                    <td>${stadat.ChqDetails[i].DESTROYED || ""}</td>
                  </tr>`;
              /*
                  Unused fields
      
                    <td>${stadat.ChqDetails.UNUSED || ""}</td>
                    <td>${stadat.ChqDetails.STOPPED || ""}</td>
                    <td>${stadat.ChqDetails.DESTROYED || ""}</td>
                   */
              table.innerHTML += row;
            }
                }
              
                
             
          }else{
            table.innerHTML = `<tr>
            <td>Cheque Book are not available for this account</td>
            </tr>`;
          }
          
        } else {
          try {
            throw Error(stadat.replyMessage);
          } catch (error) {
            throw Error("Something went wrong. Please try again");
          }
        }
      }
      // if (res.code == "success") {
      //   stadat = "";
      //   stadat = JSON.parse(res.details.output);
      //   stadat = stadat.data;
      //   console.log(stadat);
      //   let resp = stadat.ChqDetails.successorfailure || "";
      //   console.log(resp);
      //   if (resp == "S") {
      //     var table = document.getElementById("modalDataTable1");
      //     let hdr = `<tr class="modalDataCb">
      // <th>Cheque book starting number</th>
      // <th>Number of available cheque leaf</th>
      // <th>Cheque Book Last Issued Date</th>
      // <th>Amount in Clearing</th>
      // </tr>`;
      //     table.innerHTML += hdr;
      //     var row = `<tr>
      //         <td>${stadat.ChqDetails.chequebooksissued1 || ""}</td>
      //         <td>${stadat.ChqDetails.availleaf1 || ""}</td>
      //         <td>${stadat.ChqDetails.lastIssueDt1 || ""}</td>
      //         <td>${stadat.ChqDetails.clearingAmt1 || ""}</td>
      //       </tr>`;
      //     table.innerHTML += row;
      //   } else {
      //     let errmsg = stadat.ChqDetails.Message || "";
      //     console.error("Cheque book API Error:", errmsg);
      //     document.getElementById("loadingWrapper").style.display = "none";
      //     modal1.style.display = "block";
      //     document.getElementById("mdlbdytxt1").innerHTML =
      //       "Error! <br/>" + errmsg + ". Please try again later.";
      //     // document.getElementById("aadhaarOtpDiv").style.display = "none";
      //     span1.onclick = () => {
      //       modal1.style.display = "none";
      //     };
      //     window.onclick = (event) => {
      //       if (event.target == modal1) {
      //         modal1.style.display = "none";
      //       }
      //     };

      //     var recordData = {
      //       API_Name: "Cheque book API Error",
      //       Error_Id: "36001215421",
      //       Error_Source: "Customer 360 Widget",
      //       Module_Name: "Contacts",
      //       Module_Record_Id: rid,
      //       Error_Description: errmsg.toString(),
      //     };
      //     ZOHO.CRM.API.insertRecord({
      //       Entity: "CRM_Error_Log",
      //       APIData: recordData,
      //       Trigger: ["workflow"],
      //     }).then(function (data) {
      //       console.log("-");
      //     });
      //   }
      // } else {
      //   console.log("res is", res);
      //   let errmsg = res.message || "";
      //   console.error("Cheque book API Error:", errmsg);
      //   document.getElementById("loadingWrapper").style.display = "none";
      //   modal1.style.display = "block";
      //   document.getElementById("mdlbdytxt1").innerHTML =
      //     "Error! <br/>" + errmsg + ". Please try again later.";
      //   // document.getElementById("aadhaarOtpDiv").style.display = "none";
      //   span1.onclick = () => {
      //     modal1.style.display = "none";
      //   };
      //   window.onclick = (event) => {
      //     if (event.target == modal1) {
      //       modal1.style.display = "none";
      //     }
      //   };

      //   var recordData = {
      //     API_Name: "Cheque book API Error",
      //     Error_Id: "36001215421",
      //     Error_Source: "Customer 360 Widget",
      //     Module_Name: "Contacts",
      //     Module_Record_Id: rid,
      //     Error_Description: errmsg.toString(),
      //   };
      //   ZOHO.CRM.API.insertRecord({
      //     Entity: "CRM_Error_Log",
      //     APIData: recordData,
      //     Trigger: ["workflow"],
      //   }).then(function (data) {
      //     console.log("-");
      //   });
      // }
      span.onclick = () => {
        modal.style.display = "none";
        modal1.style.display = "none";
        $("#modalDataTable1 tr").remove();
        
        // modal.style.display = "none";
      };
    })
    .catch((error) => {
      console.error("Cheque book API Error:", error);
      console.log("loading close 13");
      document.getElementById("loadingWrapper").style.display = "none";
      modal1.style.display = "block";
      document.getElementById("mdlbdytxt1").innerHTML =
        "Error! <br/>" + error + ". Please try again later.";
      // document.getElementById("aadhaarOtpDiv").style.display = "none";
      span.onclick = () => {
        modal.style.display = "none";
        $("#modalDataTable1 tr").remove();
        // modal.style.display = "none";
      };
    });
}
function isYesOrNo(input_arr){
  for(i=0;i<input_arr.length;i++)
  {
    if(input_arr[i]!=null && input_arr[i]!="NA" && input_arr[i]!="")
    {
      return "Yes"
    }
  }
  return "No"
}
function debit_card_popup() {
  if (!(deposits_flg && advances_flg)) {
    console.log(deposits_flg, advances_flg);
    console.log("Returned");
    return;
  } else {
    clearInterval(chqInterval);
    console.log("loading close 14");
    document.getElementById("loadingWrapper").style.display = "none";
  }
    document
    .getElementById("chequebook_btn")
    .setAttribute("style", "display:none !important");
  document.getElementById("mdlbdytxt").innerHTML = "";
  //hit liabilities module and fetch all the account numbers of current account & savings account
  document.getElementById("accountdropdown").style.display =
    "flex !important";
  document.getElementById("debitcard_btn").style.display =
    "inline-block";
  console.log("Here");

  let data = new_deposits.concat(new_advances);
  console.log("liabilities are", data);
  if (data.count == 0) {
    document.getElementById("membership").innerHTML =
      "<option selected>No accounts associated</option>";
  } else {
    let accounts = data;
    let flag = false;
    let options = ``;
    let count = 0;
    for (let i = 0; i < accounts.length; i++) {
      if (accounts[i].hasOwnProperty("A_c_Type")) {
        if (accounts[i].ACCT_CLS_FLG == "N" &&
            (accounts[i].A_c_Type == "Current" ||
            accounts[i].A_c_Type == "Saving" ||
            accounts[i].A_c_Type == "CAA" ||
            accounts[i].A_c_Type == "SBA")) {
              count++;
              if (!flag) {
                options += `<option selected val="${accounts[i].Name}">${accounts[i].Name}</option>`;
              } else {
                options += `<option val="${accounts[i].Name}">${accounts[i].Name}</option>`;
              }
        }
      }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
        if (accounts[i].Account_Close_Flag == "N" && 
        (accounts[i].A_c_Type_Current_Saving == "CCA" ||
        accounts[i].A_c_Type_Current_Saving == "ODA")) {
          count++;
          if (!flag) {
            options += `<option selected val="${accounts[i].Name}">${accounts[i].Name}</option>`;
          } else {
            options += `<option val="${accounts[i].Name}">${accounts[i].Name}</option>`;
          }
        }
      }
     
    }
    if (count == 0) {
      console.log("Count is 0 in debit card pop up");
      document.getElementById("membership").innerHTML =
        "<option selected>No accounts associated</option>";
    } else {
      document.getElementById("membership").innerHTML = options;
    }
    // document.getElementById("membership").innerHTML = options;
  }
  document.getElementById("accountdropdown").style.display = "flex";

  modal.style.display = "block";

  //API URL Assignment and Parameters Setting
  // var url8 = new URL("https://reqres.in/api/users");
  // // var url = new URL("https://cdn-api.co-vin.in/api/v2/admin/location/states");
  // var params8 = {page:1};
  // url8.search = new URLSearchParams(params8).toString();
  // var recordPromisem8 = new Promise(async (resolve, reject) => {
  //   // const stdat = await fetch("https://cdn-api.co-vin.in/api/v2/admin/location/states");
  //   const stdat = await fetch(url8);
  //   resolve(stdat);
  // });
  // recordPromisem8
  // .then((response)=>{
  //   // console.log(data.json());
  //   return response.json();
  // }).then((dt)=>{
  //   // console.log(dt.data);
  //   stadat="";
  //   stadat = dt.data;
  //   var table = document.getElementById('modalDataTable1');
  //   let hdr = `<tr class="modalDataDc">
  //   <th>Debit Card Number</th>
  //   <th>Daily Limit</th>
  //   <th>Card Status</th>
  //   <th>Last Used Date</th>
  //   </tr>`;
  //   table.innerHTML += hdr;
  //   for (var i = 0; i < stadat.length; i++){
  //     var row = `<tr>
  //             <td>${stadat[i].id}</td>
  //             <td>${stadat[i].first_name}</td>
  //             <td>${stadat[i].last_name}</td>
  //             <td>${stadat[i].email}</td>
  //           </tr>`
  //     table.innerHTML += row
  //   }
  // })
  span.onclick = () => {
    modal.style.display = "none";

    document.getElementById("chequebook_btn").style.display =
      "none !important";
    document.getElementById("debitcard_btn").style.display = "block";
    $("#modalDataTable1 tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
    }
  };
  
}
function cheque_book_popup() {
  if (!(deposits_flg && advances_flg)) {
    console.log(deposits_flg, advances_flg);
    console.log("Returned");
    return;
  } else {
    clearInterval(chqInterval);
    console.log("loading close 15");
    document.getElementById("loadingWrapper").style.display = "none";
  }
  document.getElementById("mdlbdytxt").innerHTML = "";
  // document.getElementById("accountdropdown").style.display = "block !important";
  document
    .getElementById("accountdropdown")
    .setAttribute("style", "display:none !important");
    console.log("loading flex 4");
  document.getElementById("loadingWrapper").style.display = "flex";
  document.getElementById("chequebook_btn").style.display = "inline-block";
  console.log("Here");
  document
    .getElementById("debitcard_btn")
    .setAttribute("style", "display:none !important");
  // modal.style.display = "block";

  try {
    console.log("liabilities are", new_deposits);
    console.log("loading close 16");
    document.getElementById("loadingWrapper").style.display = "none";
    if (new_deposits.count == 0 && new_advances.count == 0) {
      document.getElementById("membership").innerHTML =
        "<option selected>No accounts associated</option>";
    } else {
      let accounts = new_deposits.concat(new_advances);
      let flag = false;
      let options = ``;
      let count = 0;
      console.log(accounts);
      for (let i = 0; i < accounts.length; i++) {
        if (accounts[i].hasOwnProperty("A_c_Type")) {
          if ((accounts[i].A_c_Type == "Current" ||
              accounts[i].A_c_Type == "Saving" ||
              accounts[i].A_c_Type == "CAA" ||
              accounts[i].A_c_Type == "SBA") &&
              accounts[i].ACCT_CLS_FLG == "N") {
                count++;
          if (!flag) {
            options += `<option selected val="${accounts[i].Name}">${accounts[i].Name}</option>`;
            flag = true;
          } else {
            options += `<option val="${accounts[i].Name}">${accounts[i].Name}</option>`;
          }
          }
        }if (accounts[i].hasOwnProperty("A_c_Type_Current_Saving")) {
          if (accounts[i].Account_Close_Flag == "N" && 
          (accounts[i].A_c_Type_Current_Saving == "CCA" ||
          accounts[i].A_c_Type_Current_Saving == "ODA")) {
            count++;
          if (!flag) {
            options += `<option selected val="${accounts[i].Name}">${accounts[i].Name}</option>`;
            flag = true;
          } else {
            options += `<option val="${accounts[i].Name}">${accounts[i].Name}</option>`;
          }
          }
        }
        
      }
      console.log(options);
      if (count == 0) {
        document.getElementById("membership").innerHTML =
          "<option selected>No accounts associated</option>";
      } else {
        document.getElementById("membership").innerHTML = options;
      }
    }
  } catch (err) {
    console.log("Error in getting associated account numbers", err);
    document.getElementById("membership").innerHTML =
      "<option val='FF'>No accounts available</option>";
  }
  document.getElementById("accountdropdown").style.display = "flex";
  document.getElementById("accountdropdown").style.flexDirection = "row";
  document.getElementById("accountdropdown").style.alignItems = "center";
  document.getElementById("accountdropdown").style.marginBottom = "5px";
  document.getElementById("modalDataTable1").innerHTML = "";
  modal.style.display = "block";

  //API URL Assignment and Parameters Setting
  // var url8 = new URL("https://reqres.in/api/users");
  // // var url = new URL("https://cdn-api.co-vin.in/api/v2/admin/location/states");
  // var params8 = {page:1};
  // url8.search = new URLSearchParams(params8).toString();
  // var recordPromisem8 = new Promise(async (resolve, reject) => {
  //   // const stdat = await fetch("https://cdn-api.co-vin.in/api/v2/admin/location/states");
  //   const stdat = await fetch(url8);
  //   resolve(stdat);
  // });
  // recordPromisem8
  // .then((response)=>{
  //   // console.log(data.json());
  //   return response.json();
  // }).then((dt)=>{
  //   // console.log(dt.data);
  //   stadat="";
  //   stadat = dt.data;
  //   var table = document.getElementById('modalDataTable1');
  //   let hdr = `<tr class="modalDataDc">
  //   <th>Debit Card Number</th>
  //   <th>Daily Limit</th>
  //   <th>Card Status</th>
  //   <th>Last Used Date</th>
  //   </tr>`;
  //   table.innerHTML += hdr;
  //   for (var i = 0; i < stadat.length; i++){
  //     var row = `<tr>
  //             <td>${stadat[i].id}</td>
  //             <td>${stadat[i].first_name}</td>
  //             <td>${stadat[i].last_name}</td>
  //             <td>${stadat[i].email}</td>
  //           </tr>`
  //     table.innerHTML += row
  //   }
  // })

  span.onclick = () => {
    modal.style.display = "none";
    document.getElementById("chequebook_btn").style.display = "none !important";
    document.getElementById("debitcard_btn").style.display = "block";
    $("#modalDataTable1 tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      document.getElementById("chequebook_btn").style.display =
        "none !important";
      document.getElementById("debitcard_btn").style.display = "block";
      $("#modalDataTable1 tr").remove();
    }
  };
}

function display_panel_overlay(elem_id, msg) {
  let elem = document.getElementById(elem_id);
  elem.innerHTML = msg;
  elem.style.display = "flex";
}

function hide_panel_overlay(elem_id) {
  console.log("hiding element", elem_id);
  let elem = document.getElementById(elem_id);
  elem.style.display = "none";
}

function checkLogsFromFuncResponse(resp,logMsgId,storeLog)
{
  console.log("Log flow: received data",resp);
  try
  {
    if(Object.keys(resp).includes("details"))
    {
      respDetails=resp.details;
      if(Object.keys(respDetails).includes("output"))
      {
        respOutInfos=respDetails.userMessage;
        for(let i=0;i<respOutInfos.length;i++)
        {
          let line=respOutInfos[i];
          if(line=="Log Obj" && (i+1)<respOutInfos.length)
          {
            let nextLine=respOutInfos[i+1];
            let logObjJson=JSON.parse(nextLine);
            let funcApiName=logObjJson["Api_Name"];
            console.log("Log obj is",logObjJson);
            delete logObjJson["Api_Name"];
            if(storeLog)
            {
              api_logs[funcApiName]=logObjJson;
              if(logMsgId)
              {
                append_send_log("send_log_container_"+logMsgId,funcApiName);
              }
            }
            

          }
        }
      }
      else
      {
        if(storeLog)
        {
          api_logs[funcApiName]=resp;
        }
        if(logMsgId)
        {
          append_send_log("send_log_container_"+logMsgId,funcApiName);
        }
      }
    }
    else
    {
      if(storeLog)
      {
        api_logs[funcApiName]=resp;
      }
      if(logMsgId)
      {
        append_send_log("send_log_container_"+logMsgId,funcApiName);
      }
    }
  }
  catch(e)
  {
    console.error("Silently discarding log error from function response",e);
  }
}
//logMsgId - input to get the send log container number when fired from
// one of the service requests under service request tabs. 
// this input can also be used as a flag to control whether send log prompt should be triggered or not for an API call
function call_crm_function(func_name, params, logMsgId,storeLog) {
  // let func_name="Search_Record";
  // let params={
  //   "Module":module,
  //   "Criteria":criteria
  // };
  let req = {
    arguments: JSON.stringify(params),
  };
  let dataCpy;
  return ZOHO.CRM.FUNCTIONS.execute(func_name, params).then((data)=>{dataCpy=data; return data;}).finally(()=>{checkLogsFromFuncResponse(dataCpy,logMsgId,storeLog);});
}

async function new_module_search2(func_name, params) {
  let resp = await call_crm_function(func_name, params);
  console.log("async parsed - resp2 is", resp);
  console.log("async parsed - data2 is", JSON.parse(resp.details.output));
  let out = {};
  if (resp.code == "success") {
    let data = JSON.parse(resp.details.output);
    if (data.status == "success") {
      let parsed_resp = JSON.parse(data.response);
      console.log("async parsed - parsed_resp2 is", parsed_resp);
      out.info = { more_records: data.more_records, count: parsed_resp.length };
      out.data = parsed_resp;
      out.status = "success";
    } else {
      out.status = "failure";
      out.error_msg = data.error_msg;
    }
  } else {
    out.status = "failure";
    out.error_msg = "Function failure";
  }
  console.log("nms output is", out);
  return out;
}

async function new_module_search(func_name, params) {
  let resp = await call_crm_function(func_name, params);
  console.log("async parsed - resp is", resp);
  console.log("async parsed - data is", JSON.parse(resp.details.output));
  let out = {};
  if (resp.code == "success") {
    let data = JSON.parse(resp.details.output);
    if (data.status == "success") {
      let parsed_resp = JSON.parse(data.response);
      console.log("async parsed - parsed_resp is", parsed_resp);
      out.info = { more_records: data.more_records, count: parsed_resp.length };
      out.data = parsed_resp;
      out.status = "success";
    } else {
      out.status = "failure";
      out.error_msg = data.error_msg;
    }
  } else {
    out.status = "failure";
    out.error_msg = "Function failure";
  }
  console.log("nms output is", out);
  return out;
}
function redirect_to_desk(e) {
  var id = e.getAttribute("id"); //No I18N
  if (id == "null") {
    //No I18N
    id = ""; //No I18N
  }

  window.open(
    "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/details/" +
      id
  ); //No I18N
}

function create_contact() {
  //console.log("create contact fired");	//No I18N
  window.open(
    "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/contacts/new"
  ); //No I18N
}
function create_ticket() {
  //console.log("create contact fired");	//No I18N
  try{
    if(ds_record_id != "" && ds_record_id !=null)
    {
    window.open(
      "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/new#set?contactId="+ds_record_id+"&cf_is_existing_customer=Yes"
    ); //No I18N
    }
    else if(desk_created_contact_id != "" && desk_created_contact_id != null)
    {
      // console.log("no contact innn elif",desk_created_contact_id);
      window.open(
        "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/new#set?contactId="+desk_created_contact_id //+"&cf_is_existing_customer=Yes"
      );  
    }
    else if(crm_desk_id.details.statusMessage.id != "" && crm_desk_id.details.statusMessage.id !=null)
    {
    window.open(
      "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/new#set?contactId="+crm_desk_id.details.statusMessage.id+"&cf_is_existing_customer=Yes"
    ); //No I18N
    }
    else
    {
    window.open(
      "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/new"
    );
  } //No I18N
}
catch(e){
  console.log(e);
  window.open(
    "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/new"
  );
}
}
function contact_page() {
  try {
    if (
      ds_record_id != "" &&
      ds_record_id != null
    ) {
      window.open(
        "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/contacts/details/" +
          ds_record_id
      ); //No I18N
    } else {
      window.open(
        "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/contacts/list/all-contacts"
      );
    }
  } catch (e) {
    console.log("error in craete ticket", e);
    window.open(
      "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/contacts/list/all-contacts"
    );
  }
}

async function resolve_services_availed() {
  // Conditional Hyperlinks for Customer Service Data
  clearInterval(resolveInterval);
  elements = document.getElementsByClassName("ctsvincdlk");
  var i;
  var len;
  var eleid = [];
  len = elements.length;
  console.log("resolved elements",elements);
  for (var i = 0; i < len; i++) {
    eleid.push(elements[i].id);
    console.log("SERVICE ID",eleid[i] ,document.getElementById(eleid[i]).innerHTML);
    if(document.getElementById(eleid[i]).innerHTML == "Availed"){
      // console.log("");
      continue;
    } else if (document.getElementById(eleid[i]).innerHTML == "true") {
      document.getElementById(eleid[i]).innerHTML = "Availed";
      document.getElementById(eleid[i]).style.textDecoration = "none";
      // document.getElementById()
      document.getElementById("mdlbdytxt").innerHTML = "";
      // document.getElementById(eleid[i]).style.color="blue";
      // ----------------------------------------------------------------------------------
      if (eleid[i] == "ctlck") {
        document.getElementById("accountdropdown").style.display = "none";
        document.getElementById(eleid[i]).onclick = () => {
          document.getElementById("mdlbdytxt").innerHTML = "";
          document.getElementById("loadingWrapper").style.display = "flex";
          // document.getElementById("accountdropdown").style.display = "none !important";
          document
            .getElementById("accountdropdown")
            .setAttribute("style", "display:none !important");
          // modal.style.display = "block";

          let request = {
            url: "https://sandbox.zohoapis.in/crm/v2/functions/customer360services/actions/execute",
            params: {
              auth_type: "apikey",
              zapikey:
                "1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e",
              sat: "locker",
              cid: "D8608917",
              rt: "LOCKER",
            },
          };
          // LOCKER PROD
          let func_name = "Locker_API1";
          // LOCKER TEST
          // func_name = "locker_api11";
          call_crm_function(func_name, { ccid: custid })
            .then(function (res) {
              // let res = JSON.parse(data);
              console.log("inside locker API", res);
              document.getElementById("loadingWrapper").style.display = "none";
              modal.style.display = "block";
              // console.log(JSON.parse(res.details.output));
              if (res.code == "success") {
                stadat = "";
                stadat = JSON.parse(res.details.output);
                console.log("locker response is", stadat);
                stadat = stadat.data;
                console.log(stadat);
                let resp = stadat.SuccessOrFailure || "";
                console.log(resp);
                if (resp == "Y") {
                  var table = document.getElementById("modalDataTable1");
                  let hdr = `<tr class="modalDataCb">
                          <th>SOL ID</th>
                          <th>Locker Type</th>
                          <th>Locker Number</th>
                          <th>Annual Rent</th>
                          <th>Due Rent</th>
                          <th>Due Date</th>
                          <th>Savings Deposit Account</th>
                          <th>Joint Holder Available or not</th>
                          <th>Nominee Available or not</th>
                          </tr>`;
                  table.innerHTML += hdr;
                  console.log(stadat.LockerInfo.length);
                  for (
                    var i = 0;
                    i < stadat.LockerInfo.length;
                    i++
                  ) {
                    var row = `<tr>
                                  <td>${
                                    stadat.LockerInfo[i]
                                      .solId || ""
                                  }</td>
                                  <td>${
                                    stadat.LockerInfo[i]
                                      .lockerType || ""
                                  }</td>
                                  <td>${
                                    stadat.LockerInfo[i]
                                      .lockerNo || ""
                                  }</td>
                                  <td>${
                                    stadat.LockerInfo[i]
                                      .annualRent || ""
                                  }</td>
                                  <td>${
                                    stadat.LockerInfo[i]
                                      .dueRent || ""
                                  }</td>
                                  <td>${
                                    stadat.LockerInfo[i]
                                      .dueDate || ""
                                  }</td>
                                  <td>${
                                    stadat.LockerInfo[i]
                                      .SDAcct || ""
                                  }</td>
                                  <td>${
                                    stadat.LockerInfo[i]
                                      .JH1Name || "NA" != "NA" ? "Yes" : "No"
                                  }</td>
                                  <td>${
                                    stadat.LockerInfo[i]
                                      .nomineeName1 || "NA" != "NA" ? "Yes" : "No"
                                  }</td>
                                </tr>`;
                    table.innerHTML += row;
                  }
                } else {
                  console.log("no locker account linked");
                  let errmsg = stadat.Error_1 || stadat.RESULT_MSG;
                  errmsg = errmsg || "Locker API Technical Error";
                  console.error("Locker API Error:", errmsg);
                  document.getElementById("loadingWrapper").style.display =
                    "none";
                  modal1.style.display = "block";
                  document.getElementById("mdlbdytxt1").innerHTML = errmsg;
                  // document.getElementById("aadhaarOtpDiv").style.display = "none";
                  span1.onclick = () => {
                    modal1.style.display = "none";
                    modal.style.display = "none";
                  };
                  window.onclick = (event) => {
                    if (event.target == modal1) {
                      modal1.style.display = "none";
                      modal.style.display = "none";
                      $("#modalDataTable1 tr").remove();
                    }
                  };

                  var recordData = {
                    API_Name: "Locker API Error",
                    Error_Id: "3607830001",
                    Error_Source: "Customer 360 Widget",
                    Module_Name: "Contacts",
                    Module_Record_Id: rid,
                    Error_Description: errmsg,
                  };
                  ZOHO.CRM.API.insertRecord({
                    Entity: "CRM_Error_Log",
                    APIData: recordData,
                    Trigger: ["workflow"],
                  }).then(function (data) {
                    console.log("-");
                  });
                }
              } else {
                let errmsg = "API failure";
                console.error("Locker API Error:", errmsg);
                document.getElementById("loadingWrapper").style.display =
                  "none";
                modal1.style.display = "block";
                document.getElementById("mdlbdytxt1").innerHTML =
                  errmsg + ". Please try again later.";
                // document.getElementById("aadhaarOtpDiv").style.display = "none";
                span1.onclick = () => {
                  modal1.style.display = "none";
                  modal.style.display = "none";
                  $("#modalDataTable1 tr").remove();
                };
                window.onclick = (event) => {
                  if (event.target == modal1) {
                    modal1.style.display = "none";
                    modal.style.display = "none";
                    $("#modalDataTable1 tr").remove();
                  }
                };

                var recordData = {
                  API_Name: "Locker API Error",
                  Error_Id: "3607830001",
                  Error_Source: "Customer 360 Widget",
                  Module_Name: "Contacts",
                  Module_Record_Id: rid,
                  Error_Description: errmsg,
                };
                ZOHO.CRM.API.insertRecord({
                  Entity: "CRM_Error_Log",
                  APIData: recordData,
                  Trigger: ["workflow"],
                }).then(function (data) {
                  console.log("-");
                });
              }
            })
            .catch((error) => {
              console.error("Locker API Error:", error);
              document.getElementById("loadingWrapper").style.display = "none";
              modal1.style.display = "block";
              document.getElementById("mdlbdytxt1").innerHTML =
                "Error! <br/>" + error + ". Please try again later.";
              // document.getElementById("aadhaarOtpDiv").style.display = "none";
              span1.onclick = () => {
                modal1.style.display = "none";
                modal.style.display = "none";
                $("#modalDataTable1 tr").remove();
              };
              window.onclick = (event) => {
                if (event.target == modal1) {
                  modal1.style.display = "none";
                  modal.style.display = "none";
                  $("#modalDataTable1 tr").remove();
                }
              };

              var recordData = {
                API_Name: "Locker API Error",
                Error_Id: "3607830001",
                Error_Source: "Customer 360 Widget",
                Module_Name: "Contacts",
                Module_Record_Id: "" + rid,
                Error_Description: error.toString(),
              };
              ZOHO.CRM.API.insertRecord({
                Entity: "CRM_Error_Log",
                APIData: recordData,
                Trigger: ["workflow"],
              }).then(function (data) {
                console.log("-");
              });
            });
          /*
                  ZOHO.CRM.HTTP.get(request)
                  .then(function(data){
                    let res = JSON.parse(data);
                    document.getElementById('loadingWrapper').style.display = 'none';
                    modal.style.display = "block";
                    // console.log(JSON.parse(res.details.output));
                    if(res.code == "success")
                    {
                      stadat="";
                      stadat = JSON.parse(res.details.output);
                      stadat = stadat.data;
                      console.log(stadat);
                      let resp = stadat.SucOrFail || "";
                      console.log(resp);
                      if(resp == "Y")
                      {
                        var table = document.getElementById('modalDataTable1');
                        let hdr = `<tr class="modalDataCb">
                        <th>Locker Branch</th>
                        <th>Locker Number</th>
                        <th>Locker Rent</th>
                        <th>Overdue Rent</th>
                        <th>Due Date</th>
                        </tr>`;
                        table.innerHTML += hdr;
                        console.log((stadat.WhatsappBankingLockerAPIList).length);
                        for (var i = 0; i < (stadat.WhatsappBankingLockerAPIList).length; i++){
                        var row = `<tr>
                                <td>${stadat.WhatsappBankingLockerAPIList[i].SOL_ID || ""}</td>
                                <td>${stadat.WhatsappBankingLockerAPIList[i].LOCKER_NO || ""}</td>
                                <td>${stadat.WhatsappBankingLockerAPIList[i].TOTAL_RENT || ""}</td>
                                <td>${stadat.WhatsappBankingLockerAPIList[i].duerent || ""}</td>
                                <td>${stadat.WhatsappBankingLockerAPIList[i].duedt || ""}</td>
                              </tr>`
                        table.innerHTML += row
                        }
                      }
                      else
                      {
                        let errmsg =  stadat.replyMsg || stadat.RESULT_MSG ;
                        errmsg = errmsg || "Locker API Technical Error";
                        console.error('Locker API Error:', errmsg);
                        document.getElementById('loadingWrapper').style.display = "none";
                        modal1.style.display = "block";
                        document.getElementById("mdlbdytxt1").innerHTML = "Error! <br/>" + errmsg + ". Please try again later.";
                        // document.getElementById("aadhaarOtpDiv").style.display = "none";
                        span1.onclick = () => {
                            modal1.style.display = "none";
                        }
                        window.onclick = (event) => {
                            if (event.target == modal1) {
                                modal1.style.display = "none";
                            }
                        }
            
                        var recordData = {
                          "API_Name": "Locker API Error",
                          "Error_Id": "3607830001",
                          "Error_Source": "Customer 360 Widget",
                          "Module_Name": "Contacts",
                          "Module_Record_Id": rid,
                          "Error_Description": error.toString()
                        }
                        ZOHO.CRM.API.insertRecord({Entity:"CRM_Error_Log",APIData:recordData,Trigger:["workflow"]}).then(function(data){
                            console.log("-");
                            });
                      }
                    }
                    else
                    {
                      let errmsg =  stadat.replyMsg || stadat.RESULT_MSG ;
                      errmsg = errmsg || "Locker API Technical Error";
                      console.error('Locker API Error:', errmsg);
                      document.getElementById('loadingWrapper').style.display = "none";
                      modal1.style.display = "block";
                      document.getElementById("mdlbdytxt1").innerHTML = "Error! <br/>" + errmsg + ". Please try again later.";
                      // document.getElementById("aadhaarOtpDiv").style.display = "none";
                      span1.onclick = () => {
                          modal1.style.display = "none";
                      }
                      window.onclick = (event) => {
                          if (event.target == modal1) {
                              modal1.style.display = "none";
                          }
                      }
          
                      var recordData = {
                        "API_Name": "Locker API Error",
                        "Error_Id": "3607830001",
                        "Error_Source": "Customer 360 Widget",
                        "Module_Name": "Contacts",
                        "Module_Record_Id": rid,
                        "Error_Description": error.toString()
                      }
                      ZOHO.CRM.API.insertRecord({Entity:"CRM_Error_Log",APIData:recordData,Trigger:["workflow"]}).then(function(data){
                          console.log("-");
                          });
                    }                        
                  }).catch((error) => {
                    console.error('Locker API Error:', error);
                    document.getElementById('loadingWrapper').style.display = "none";
                    modal1.style.display = "block";
                    document.getElementById("mdlbdytxt1").innerHTML = "Error! <br/>" + error + ". Please try again later.";
                    // document.getElementById("aadhaarOtpDiv").style.display = "none";
                    span1.onclick = () => {
                        modal1.style.display = "none";
                    }
                    window.onclick = (event) => {
                        if (event.target == modal1) {
                            modal1.style.display = "none";
                        }
                    }
        
                    var recordData = {
                        "API_Name": "Locker API Error",
                        "Error_Id": "3607830001",
                        "Error_Source": "Customer 360 Widget",
                        "Module_Name": "Contacts",
                        "Module_Record_Id": rid,
                        "Error_Description": error.toString()
                    }
                    ZOHO.CRM.API.insertRecord({Entity:"CRM_Error_Log",APIData:recordData,Trigger:["workflow"]}).then(function(data){
                        console.log("-");
                        });
                  }); */
        };
        span.onclick = () => {
          console.log("CLOSE CLICK");
          modal.style.display = "none";
          $("#modalDataTable1 tr").remove();
        };
        window.onclick = (event) => {
          if (event.target == modal) {
            modal.style.display = "none";
            $("#modalDataTable1 tr").remove();
          }
        };
      } 
      else if (eleid[i] == "ctcrdcd") {

        document.getElementById(eleid[i]).addEventListener("click",()=>{
          let genericPopUp=createGenericPopUp();
          let genericPopUpzIndex=window.getComputedStyle(genericPopUp).getPropertyValue("z-index");
          //test for firefox
          if((genericPopUpzIndex==null)||(genericPopUpzIndex==undefined))
          {
            genericPopUpzIndex=window.getComputedStyle(genericPopUp).getPropertyValue("zIndex");
          }
          let genericPopUpContentContainer=genericPopUp.querySelector("#modalCloneBody");
          let func_name = "creditcardencryption";
          call_crm_function(func_name, { customerId: custid })
            .then((res) => {
              console.log("inside credit card API", res);
              if(res.code=="success")
              {
                let apiResp=JSON.parse(res.details.output);
                console.log("Api resp is",apiResp);
                if(apiResp.statusCode=="SUCCESS")
                {
                  let cardProfiles=apiResp.cardProfile;
                  let creditCardDetails=document.getElementById("creditCardITTableClone");
                  let creditCardDetailsTableClone=creditCardDetails.cloneNode(true);
                  creditCardDetailsTableClone.id+=""+cloneCount++;
                  for(let cardProfile of cardProfiles)
                  {
                    let cardRow=document.createElement("tr");
                    cardRow.classList.add("clickable");
                    cardRow.innerHTML=`<td>${cardProfile.maskCardNo||"-"}</td><td>${cardProfile.cardVariant||"-"}</td><td>${cardProfile.cardStatus||"-"}</td>`;
                    cardRow.addEventListener("click",(evt)=>{displayCreditCardDetails(evt,genericPopUpzIndex,cardProfile)});
                    creditCardDetailsTableClone.appendChild(cardRow);
                    creditCardDetailsTableClone.classList.remove("hide");
                  }
                  if(creditCardDetailsTableClone.innerHTML==``)
                  {
                   creditCardDetailsTableClone.innerHTML=`<tr><td>-</td><td>-</td><td>-</td></tr>`; 
                  }
                  genericPopUpContentContainer.innerHTML=``;
                  genericPopUpContentContainer.appendChild(creditCardDetailsTableClone);
                }
                else
                {
                  if(apiResp.errors.length>0)
                  {
                    // genericPopUpContentContainer.innerHTML="Credit card data could not be fetched: ";
                    genericPopUpContentContainer.innerHTML=apiResp.errors[0].errDesc;
                    console.log("Error in credit card API", apiResp);
                    return;
                  }
                  else
                  {
                    genericPopUpContentContainer.innerHTML=`Credit card data couldn't be fetched`;
                    console.log("Error in credit card API", apiResp);
                  }
                }
                
              }
              else
              {
                genericPopUpContentContainer.innerHTML="Credit card data could not be fetched";
                console.log("Error in credit card API", res);
              }
            })
            .catch((err) => {
              console.log("Error in credit card API", err);
              genericPopUpContentContainer.innerHTML="Credit card data could not be fetched";
            });
        });

        /*
        // if (document.getElementById("ctrtcorp2").innerHTML == "Retail") {
        //   csuslistElements +=
        // `<li> ` + document.getElementById(eleid[i]).title + ` </li>`;
        // }
        
        document.getElementById("accountdropdown").style.display = "none";
        document.getElementById(eleid[i]).onclick = () => {
        document.getElementById("mdlbdytxt").innerHTML = "";
        modal.style.display = "block";
        // document.getElementById("accountdropdown").style.display = "none !important";
        document
          .getElementById("accountdropdown")
          .setAttribute("style", "display:none !important");
        //API URL Assignment and Parameters Setting
        var table = document.getElementById("modalDataTable1");
        table.innerHTML = "";
        // let hdr = `<tr class="modalDataCc">
        //         <th>Credit Card Number</th>
        //         <th>Outstanding Amount</th>
        //         <th>Card Status</th>
        //         </tr>`;
        // table.innerHTML += hdr;
        // for (var i = 0; i < stadat.length; i++) {
        //   var row = `<tr>
        //                   <td>${stadat[i].id}</td>
        //                   <td>${stadat[i].first_name}</td>
        //                   <td>${stadat[i].last_name}</td>
        //                 </tr>`;
        //   // table.innerHTML += row
        // }
        table.innerHTML += `<tr>
                <td>This service is not available yet</td>
              </tr>`;

        };
        span.onclick = () => {
          modal.style.display = "none";
          $("#modalDataTable1 tr").remove();
        };
        window.onclick = (event) => {
          if (event.target == modal) {
            modal.style.display = "none";
            $("#modalDataTable1 tr").remove();
          }
        };
        */
      } 
      else if (eleid[i] == "ctintbk") {
        console.log("inside internet banking");
        document.getElementById("accountdropdown").style.display =
          "none !important";
        console.log("Internet Banking");
        document.getElementById(eleid[i]).onclick = () => {
          document.getElementById("loadingWrapper").style.display = "flex";
          console.log("loading.....");
          
          document
            .getElementById("accountdropdown")
            .setAttribute("style", "display:none !important");

          // document.getElementById("accountdropdown").style.display = "none !important";
          //API URL Assignment and Parameters Setting

          let func_name = "Lien_Inqury";
          call_crm_function(func_name, { CustId: custid })
            .then((res) => {
              console.log("inside internet banking API", res);
              document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "block";
              document
                .getElementById("accountdropdown")
                .setAttribute("cssText", "display:none !important");
              // document.getElementById("accountdropdown").style.display = "none !important";
              console.log("Internet banking API response is", res);

              var table = document.getElementById("modalDataTable1");
              table.innerHTML = "";
              if (res.code != "success") {
                // document.getElementById("mdlbdytxt").innerHTML =
                //   "API call failed! Please try again later or contact your administrator.";
                table.innerHTML = `<tr>
                <td>API call failed! Please try again later or contact your administrator.</td>
              </tr>`;
                // table.style.display = "block";
                console.log("Error in internet banking API", res);
              } else {
                let output = res.details.output;
                let output_in_json = JSON.parse(output);
                console.log("IB resp : ", output_in_json);
                
                  console.log("internet banking output is", output_in_json);
                  
                  if(output_in_json.length < 1)
                  {
                    table.innerHTML = `<tr>
                    <td>${"No Data Available in Finacle"}</td>
                    </tr>`;
                    document.getElementById("loadingWrapper").style.display = "none";
                    console.log("Status : Api response is Empty");
                    return;
                  }
                  let hdr = `<tr  class="modalDataFc">
                        <th>User ID</th>      
                        <th>Facility</th>
                        <th>Last Login Date</th>
                        <th>Login Password Expiry</th>
                        <th>Transaction Password Expiry</th>
                        <th>Limit Scheme</th>
                        </tr>`;
                  table.innerHTML += hdr;
                  for (let i = 0; i < output_in_json.length; i++) {
                    var row = `<tr>
                                <td>${output_in_json[i].ChannelUserId}</td>
                                <td>${output_in_json[i].FacilityType}</td>
                                <td>${format_date(
                                  output_in_json[i].LastLoginDate
                                )}</td>
                                <td>${format_date(
                                  output_in_json[i].LoginPassExpDate
                                )}</td>
                                <td>${format_date(
                                  output_in_json[i].TxnPassExpDate
                                )}</td>
                                <td>${output_in_json[i].LimitScheme}</td>
                              </tr>`;
                    table.innerHTML += row;
                  }
                  if (output_in_json.length == 0) {
                    table.innerHTML += `<tr>
                                <td>-</td>
                                <td>-</td>
                                <td>-</td>
                                <td>-</td>
                              </tr>`;
                  }
                
              }
              document.getElementById("loadingWrapper").style.display = "none";
            })
            .catch((err) => {
              document.getElementById("loadingWrapper").style.display = "none";
              document.getElementById("mdlbdytxt").innerHTML =
                "Oops! Something went wrong! Please try again later or contact your administrator.";
              console.log("Error in internet banking API", err);
            });
            

        };
        span.onclick = () => {
          console.log("hererere");
          document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "none";

          $("#modalDataTable1 tr").remove();
        };
        window.onclick = (event) => {
          if (event.target == modal) {
            console.log("closing modal");
            document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "none";
            $("#modalDataTable1 tr").remove();
          }
        };
      }
      //  else if (eleid[i] == "ctumbl") {
      //   document.getElementById("accountdropdown").style.display =
      //     "none !important";
      //   console.log("Umobile");
      //   document.getElementById(eleid[i]).onclick = () => {
      //     document.getElementById("mdlbdytxt").innerHTML = "";
      //     modal.style.display = "block";
      //     // document.getElementById("accountdropdown").style.display = "none !important";
      //     document
      //       .getElementById("accountdropdown")
      //       .setAttribute("style", "display:none !important");
      //     //API URL Assignment and Parameters Setting
      //     var url4 = new URL("https://reqres.in/api/users");
      //     // var url = new URL("https://cdn-api.co-vin.in/api/v2/admin/location/states");
      //     var params4 = { page: 1 };
      //     url4.search = new URLSearchParams(params4).toString();
      //     var recordPromisem4 = new Promise(async (resolve, reject) => {
      //       // const stdat = await fetch("https://cdn-api.co-vin.in/api/v2/admin/location/states");
      //       const stdat = await fetch(url4);
      //       resolve(stdat);
      //     });
      //     recordPromisem4
      //       .then((response) => {
      //         // console.log(data.json());
      //         return response.json();
      //       })
      //       .then((dt) => {
      //         // console.log(dt.data);
      //         stadat = "";
      //         stadat = dt.data;
      //         var table = document.getElementById("modalDataTable1");
      //         let hdr = `<tr class="modalDataLLd">
      //                 <th>Last Login Date</th>
      //                 </tr>`;
      //         table.innerHTML += hdr;
      //         for (var i = 0; i < stadat.length; i++) {
      //           var row = `<tr>
      //                           <td>${stadat[i].id}</td>
      //                         </tr>`;
      //           // table.innerHTML += row
      //         }
      //         table.innerHTML += `<tr>
      //                 <td>This service is not available yet</td>
      //               </tr>`;
      //       });
      //   };
      //   span.onclick = () => {
      //     modal.style.display = "none";
      //     $("#modalDataTable1 tr").remove();
      //   };
      //   window.onclick = (event) => {
      //     if (event.target == modal) {
      //       modal.style.display = "none";
      //       $("#modalDataTable1 tr").remove();
      //     }
      //   };
      // } 
      else if (eleid[i] == "ctdmac") {
        document.getElementById("accountdropdown").style.display =
          "none !important";
        console.log("Demat");
        document.getElementById(eleid[i]).onclick = () => {
          document.getElementById("loadingWrapper").style.display = "flex";
          console.log("loading.....");
          // call demat crm function 
          // hide the loader and get the data in table
          document
          .getElementById("accountdropdown")
          .setAttribute("style", "display:none !important");
          let pan_no = document.getElementById("ctpan").innerHTML.trim() || "-";
          pan_no=customerPanNoUnmasked || "-";
          console.log("Customer PAN is",pan_no);
          var table = document.getElementById("modalDataTable1");
          table.innerHTML = "";
          if (pan_no == "-") {
           

            table.innerHTML = `<tr>
            <td>PAN not available for this Customer</td>
          </tr>`;
          modal.style.display = "block";

          document.getElementById("loadingWrapper").style.display = "none";
          }
          console.log(pan_no);
          call_crm_function("Test_SMS11", {pan_no: pan_no}).then((resp) => {
            console.log("inside Demat Api");
            console.log("response of Demat Api", resp);

            // check function executed successfully
            // Connection Timeout
            // if code is INVALID_DATA
            if (resp.code == "INVALID_DATA") {
           

            table.innerHTML = `<tr>
            <td>API Failed to respond. Please contact to your administrator</td>
          </tr>`;
          modal.style.display = "block";

          document.getElementById("loadingWrapper").style.display = "none";
          return;
            }
            if (resp.code != "success") {
             

            table.innerHTML = `<tr>
            <td>Something went wrong. Please try again in sometime!</td>
          </tr>`;
          modal.style.display = "block";

          document.getElementById("loadingWrapper").style.display = "none";
          return;
            }else{
              // getting SUCCESS response
              // check whether 
              let dematData = JSON.parse(resp.details.output);
              console.log("DEMAT DATA", dematData);
              if (dematData.response_Code != 200) {
               
    
                table.innerHTML = `<tr>
                <td>${dematData.response_Code_Description}</td>
              </tr>`;
              modal.style.display = "block";
    
              document.getElementById("loadingWrapper").style.display = "none";
              return;
              }
              if (dematData.no_of_Linked_Dmat_Accounts > 0) {
                // demat accounts available
                // iterate and show accounts in table
                let listOfLinkedAccounts = dematData.dmat_Accounts_Details;
                if (listOfLinkedAccounts.length > 0) {
                  let hdr = `
                  <tr>
                  <th>Account Number</th>
                  <th>Client ID</th>
                  <th>Branch</th>
                  <th>Status</th>
                  <th>Total Holding Value</th>
                  </tr>
                  `;
                  table.innerHTML += hdr;
                  for (let i = 0; i < listOfLinkedAccounts.length; i++) {
                    // create rows and append to list of rows then to table then show table

                    let row = `
                    <tr>
                      <td>${listOfLinkedAccounts[i].linked_Account_Number}</td>
                      <td>${listOfLinkedAccounts[i].dP_Client_ID}</td>
                      <td>${listOfLinkedAccounts[i].branch_SOL_ID}</td>
                      <td>${listOfLinkedAccounts[i].status}</td>
                      <td>${listOfLinkedAccounts[i].total_Holding_Value}</td>
                    </tr>
                    `;   
                    table.innerHTML += row;                 
                  }
                  modal.style.display = "block";
                  document.getElementById("loadingWrapper").style.display = "none";
                }else{
                
                table.innerHTML = `<tr>
                <td>No Accounts Linked</td>
              </tr>`;
              modal.style.display = "block";
    
              document.getElementById("loadingWrapper").style.display = "none";
              return;
                }
              }else{
                // no accounts in demat
               
    
                table.innerHTML = `<tr>
                <td>No Accounts Linked</td>
              </tr>`;
              modal.style.display = "block";
    
              document.getElementById("loadingWrapper").style.display = "none";
              return;
              }
            }
            // check api responded successfully

          }).catch((err) => {
            console.log("Error in Demat Api", err);
            document
            .getElementById("accountdropdown")
            .setAttribute("style", "display:none !important");
            var table = document.getElementById("modalDataTable1");
            table.innerHTML = "";
            table.innerHTML = `<tr>
            <td>Something went wrong. Please try again in sometime!</td>
          </tr>`;
          modal.style.display = "block";

          document.getElementById("loadingWrapper").style.display = "none";
          return;
          });

          // document
          //   .getElementById("accountdropdown")
          //   .setAttribute("style", "display:none !important");

          //   var table = document.getElementById("modalDataTable1");
          //   table.innerHTML = "";
          //   table.innerHTML = `<tr>
          //   <td>This service is not available yet</td>
          // </tr>`;
          // modal.style.display = "block";

          // document.getElementById("loadingWrapper").style.display = "none";
          //API URL Assignment and Parameters Setting

          // var url5 = new URL("https://reqres.in/api/users");
          // // var url = new URL("https://cdn-api.co-vin.in/api/v2/admin/location/states");
          // var params5 = { page: 1 };
          // url5.search = new URLSearchParams(params5).toString();
          // var recordPromisem5 = new Promise(async (resolve, reject) => {
          //   // const stdat = await fetch("https://cdn-api.co-vin.in/api/v2/admin/location/states");
          //   const stdat = await fetch(url5);
          //   resolve(stdat);
          // });
          // recordPromisem5
          //   .then((response) => {
          //     // console.log(data.json());
          //     return response.json();
          //   })
          //   .then((dt) => {
          //     // console.log(dt.data);
          //     stadat = "";
          //     stadat = dt.data;
          //     var table = document.getElementById("modalDataTable1");
          //     let hdr = `<tr class="modalDataS">
          //             <th>Sol Id</th>
          //             <th>Branch</th>
          //             <th>Account Number</th>
          //             <th>Balance</th>
          //             </tr>`;
          //     table.innerHTML += hdr;
          //     for (var i = 0; i < stadat.length; i++) {
          //       var row = `<tr>
          //                       <td>${stadat[i].id}</td>
          //                       <td>${stadat[i].first_name}</td>
          //                       <td>${stadat[i].last_name}</td>
          //                       <td>${stadat[i].email}</td>
          //                     </tr>`;
          //       // table.innerHTML += row
          //     }
          //     table.innerHTML += `<tr>
          //             <td>This service is not available yet</td>
          //           </tr>`;
          //   });
          span.onclick = () => {
            modal.style.display = "none";
            $("#modalDataTable1 tr").remove();
          };
          window.onclick = (event) => {
            if (event.target == modal) {
              modal.style.display = "none";
              $("#modalDataTable1 tr").remove();
            }
          };
        };
        span.onclick = () => {
          modal.style.display = "none";
          $("#modalDataTable1 tr").remove();
        };
        window.onclick = (event) => {
          if (event.target == modal) {
            modal.style.display = "none";
            $("#modalDataTable1 tr").remove();
          }
        };
      }
      //  else if (eleid[i] == "ctpasbk") {
      //   document.getElementById("accountdropdown").style.display =
      //     "none !important";
      //   // console.log("Passbook");
      //   document.getElementById(eleid[i]).onclick = () => {
      //     // document.getElementById("mdlbdytxt").innerHTML = "";
      //     modal.style.display = "block";
      //     // document.getElementById("accountdropdown").style.display = "none !important";
      //     document
      //       .getElementById("accountdropdown")
      //       .setAttribute("style", "display:none !important");
      //     //API URL Assignment and Parameters Setting
      //     // var url6 = new URL("https://reqres.in/api/users");
      //     // // var url = new URL("https://cdn-api.co-vin.in/api/v2/admin/location/states");
      //     // var params6 = { page: 1 };
      //     var table = document.getElementById("modalDataTable1");
      //     // let hdr = `<tr class="modalDataLPd">
      //     //             <th></th>
      //     //             </tr>`;
      //     // table.innerHTML += hdr;
      //     table.innerHTML += `<tr>
      //                 <td>This service is not available yet</td>
      //               </tr>`;
      //     /*
      //     url6.search = new URLSearchParams(params6).toString();
      //     var recordPromisem6 = new Promise(async (resolve, reject) => {
      //       // const stdat = await fetch("https://cdn-api.co-vin.in/api/v2/admin/location/states");
      //       const stdat = await fetch(url6);
      //       resolve(stdat);
      //     });
      //     recordPromisem6
      //       .then((response) => {
      //         // console.log(data.json());
      //         return response.json();
      //       })
      //       .then((dt) => {
      //         // console.log(dt.data);
      //         stadat = "";
      //         stadat = dt.data;
      //         var table = document.getElementById("modalDataTable1");
      //         let hdr = `<tr class="modalDataLPd">
      //                 <th>Last Printed Date</th>
      //                 </tr>`;
      //         table.innerHTML += hdr;
      //         for (var i = 0; i < stadat.length; i++) {
      //           var row = `<tr>
      //                           <td>${stadat[i].id}</td>
      //                         </tr>`;
      //           // table.innerHTML += row
      //         }
      //         table.innerHTML += `<tr>
      //                 <td>This service is not available yet</td>
      //               </tr>`;
      //       });
      //       */
      //   };
      //   span.onclick = () => {
      //     modal.style.display = "none";
      //     $("#modalDataTable1 tr").remove();
      //   };
      //   window.onclick = (event) => {
      //     if (event.target == modal) {
      //       modal.style.display = "none";
      //       $("#modalDataTable1 tr").remove();
      //     }
      //   };
      // } 
      else if (eleid[i] == "ctchqbk") {
        document.getElementById("accountdropdown").style.display =
          "none !important";
        console.log("Chequebook");
        let acno = "";
        document.getElementById(eleid[i]).onclick = () => {
          console.log(deposits_flg, advances_flg);
          if (!(deposits_flg && advances_flg)) {
            document.getElementById("loadingWrapper").style.display = "flex";
            console.log("LOADING WRAPPER");
            chqInterval = setInterval(() => {
              cheque_book_popup();
              console.log("FUNCTION CALLED");
            }, 3000);
          } else {
            cheque_book_popup();
          }
        };
      } else if (eleid[i] == "ctdbtcd") {
        document.getElementById("accountdropdown").style.display =
        "none !important";
        console.log("Debit Card");
        document.getElementById(eleid[i]).onclick = () => {
          if (!(deposits_flg && advances_flg)) {
            document.getElementById("loadingWrapper").style.display = "flex";
            document.getElementById("modalDataTable1").innerHTML = "";
            console.log("LOADING WRAPPER");
            chqInterval = setInterval(() => {
              debit_card_popup();
              console.log("FUNCTION CALLED");
            }, 3000);
          } else {
            document.getElementById("modalDataTable1").innerHTML = ""; 
            debit_card_popup();
          }
        };
      } 
      // else if (eleid[i] == "ctsmsbk") {
      //   document.getElementById("accountdropdown").style.display =
      //     "none !important";
      //   console.log("SMS Banking");
      //   document.getElementById(eleid[i]).onclick = () => {
      //     document.getElementById("mdlbdytxt").innerHTML = "";
      //     modal.style.display = "block";
      //     // document.getElementById("accountdropdown").style.display = "none !important";
      //     document
      //       .getElementById("accountdropdown")
      //       .setAttribute("style", "display:none !important");
      //     //API URL Assignment and Parameters Setting
      //     var url9 = new URL("https://reqres.in/api/users");
      //     // var url = new URL("https://cdn-api.co-vin.in/api/v2/admin/location/states");
      //     var params9 = { page: 1 };
      //     url9.search = new URLSearchParams(params9).toString();
      //     var recordPromisem9 = new Promise(async (resolve, reject) => {
      //       // const stdat = await fetch("https://cdn-api.co-vin.in/api/v2/admin/location/states");
      //       const stdat = await fetch(url9);
      //       resolve(stdat);
      //     });
      //     recordPromisem9
      //       .then((response) => {
      //         // console.log(data.json());
      //         return response.json();
      //       })
      //       .then((dt) => {
      //         // console.log(dt.data);
      //         stadat = "";
      //         stadat = dt.data;
      //         var table = document.getElementById("modalDataTable1");
      //         let hdr = `<tr class="modalDataLUd">
      //                 <th>Last Used Date</th>
      //                 </tr>`;
      //         table.innerHTML += hdr;
      //         for (var i = 0; i < stadat.length; i++) {
      //           var row = `<tr>
      //                           <td>${stadat[i].id}</td>
      //                         </tr>`;
      //           // table.innerHTML += row
      //         }
      //         table.innerHTML += `<tr>
      //                 <td>This service is not available yet</td>
      //               </tr>`;
      //       });
      //   };
      //   span.onclick = () => {
      //     modal.style.display = "none";
      //     $("#modalDataTable1 tr").remove();
      //   };
      //   window.onclick = (event) => {
      //     if (event.target == modal) {
      //       modal.style.display = "none";
      //       $("#modalDataTable1 tr").remove();
      //     }
      //   };
      // } 
      // else if (eleid[i] == "ctgtbpd") {
      //   document.getElementById("accountdropdown").style.display =
      //     "none !important";
      //   console.log("Govt BP");
      //   document.getElementById(eleid[i]).onclick = () => {
      //     // document.getElementById("accountdropdown").style.display = "none !important";

      //     document.getElementById("mdlbdytxt").innerHTML = "";
      //     document
      //       .getElementById("accountdropdown")
      //       .setAttribute("style", "display:none !important");
      //     modal.style.display = "block";
      //     //API URL Assignment and Parameters Setting
      //     var url10 = new URL("https://reqres.in/api/users");
      //     // var url = new URL("https://cdn-api.co-vin.in/api/v2/admin/location/states");
      //     var params10 = { page: 1 };
      //     url10.search = new URLSearchParams(params10).toString();
      //     var recordPromisem10 = new Promise(async (resolve, reject) => {
      //       // const stdat = await fetch("https://cdn-api.co-vin.in/api/v2/admin/location/states");
      //       const stdat = await fetch(url10);
      //       resolve(stdat);
      //     });
      //     recordPromisem10
      //       .then((response) => {
      //         // console.log(data.json());
      //         return response.json();
      //       })
      //       .then((dt) => {
      //         // console.log(dt.data);
      //         stadat = "";
      //         stadat = dt.data;
      //         var table = document.getElementById("modalDataTable1");
      //         let hdr = `<tr class="modalDataS">
      //                 <th>Sol Id</th>
      //                 <th>Branch</th>
      //                 <th>Account Number</th>
      //                 <th>Maturity Date</th>
      //                 <th>Balance Details</th>
      //                 <th>Maturity Amount</th>
      //                 <th>Nominee</th>
      //                 </tr>`;
      //         table.innerHTML += hdr;
      //         for (var i = 0; i < stadat.length; i++) {
      //           var row = `<tr>
      //                           <td>${stadat[i].id}</td>
      //                           <td>${stadat[i].first_name}</td>
      //                           <td>${stadat[i].last_name}</td>
      //                           <td>${stadat[i].email}</td>
      //                           <td>${stadat[i].first_name}</td>
      //                           <td>${stadat[i].last_name}</td>
      //                           <td>${stadat[i].email}</td>
      //                         </tr>`;
      //           // table.innerHTML += row
      //         }
      //         table.innerHTML += `<tr>
      //                 <td>This service is not available yet</td>
      //               </tr>`;
      //       });
      //   };
      //   span.onclick = () => {
      //     modal.style.display = "none";
      //     $("#modalDataTable1 tr").remove();
      //   };
      //   window.onclick = (event) => {
      //     if (event.target == modal) {
      //       modal.style.display = "none";
      //       $("#modalDataTable1 tr").remove();
      //     }
      //   };
      // } 
      else if (eleid[i] == "ctmtfd") {

        document.getElementById(eleid[i]).onclick = () => {
        getMutualFund(customerPanNoUnmasked);
        };
        /*
        console.log("inside Mutual Fund");
        document.getElementById("accountdropdown").style.display =
          "none !important";
        document.getElementById(eleid[i]).onclick = () => {
          document.getElementById("loadingWrapper").style.display = "flex";
          console.log("loading.....");
          
          document
            .getElementById("accountdropdown")
            .setAttribute("style", "display:none !important");

          // document.getElementById("accountdropdown").style.display = "none !important";
          //API URL Assignment and Parameters Setting

          let func_name = "ServiceAvailedDataFetch";
          call_crm_function(func_name, { custId: custid })
            .then((res) => {
              console.log("inside Mutual Fund API", res);
              document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "block";
              document
                .getElementById("accountdropdown")
                .setAttribute("cssText", "display:none !important");
              // document.getElementById("accountdropdown").style.display = "none !important";
              // console.log("POS API response is", res);

              var table = document.getElementById("modalDataTable1");
              table.innerHTML = "";
              if (res.code != "success") {
                // document.getElementById("mdlbdytxt").innerHTML =
                //   "API call failed! Please try again later or contact your administrator.";
                table.innerHTML = `<tr>
                <td>API call failed! Please try again later or contact your administrator.</td>
              </tr>`;
                // table.style.display = "block";
                console.log("Error in FastTag API", res);
              } else {
                let output = res.details.output;
                let hdr = `<tr  class="modalDataFc">
                        <th>Folio Number</th>
                        <th>Amount Invested</th>
                        <th>Scheme Name</th>
                        <th>NAV</th>
                        <th>Present Value</th>
                        <th>Import Date</th>
                        </tr>`;
                  table.innerHTML += hdr;
                if(output == ""){
                  table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                    document.getElementById("loadingWrapper").style.display = "none";
                    return;
                }
                let output_in_json = JSON.parse(output);
                console.log(output_in_json);
                
                if (output_in_json == "" || output_in_json.data.length == 0) {
                  table.innerHTML = `<tr>
                  <td>Service not available</td>
                  </tr>`;
                    document.getElementById("loadingWrapper").style.display = "none";
                    return;
                } else {
                  console.log("Mutual Fund output is", output_in_json.data);
                  get_MTFD_services = [];
                  for(let service of output_in_json.data){
                    // if(service.)
                    console.log("Services from Module : ",service);
                    if (service.Name.toUpperCase() == "MUTUAL FUND") get_MTFD_services.push(service);
                  }
                  console.log("Mutual Fund DATA",get_MTFD_services);
                  
                  for (let i = 0; i < get_MTFD_services.length; i++) {
                    var row = `<tr>
                                <td>${get_MTFD_services[i].Folio_Number || "-"}</td>
                                <td>${
                                  get_MTFD_services[i].Amount_Invested || "-"}</td>
                                <td>${
                                  get_MTFD_services[i].Scheme_Name || "-"}</td>
                                <td>${
                                  get_MTFD_services[i].NAV || "-"}</td>
                                <td>${
                                  get_MTFD_services[i].Present_Value || "-"}</td>
                                <td>${
                                  format_date(get_MTFD_services[i].Import_Date || "-")}</td>
                              </tr>`;
                    table.innerHTML += row;
                  }
                  if (get_MTFD_services.length == 0) {
                    table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                  }
                }
              }
              document.getElementById("loadingWrapper").style.display = "none";
            })
            .catch((err) => {
              document.getElementById("loadingWrapper").style.display = "none";
              document.getElementById("mdlbdytxt").innerHTML =
                "Oops! Something went wrong! Please try again later or contact your administrator.";
              console.log("Error in internet banking API", err);
            });
            

        };
        span.onclick = () => {
          console.log("hererere");
          document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "none";

          $("#modalDataTable1 tr").remove();
        };
        window.onclick = (event) => {
          if (event.target == modal) {
            console.log("closing modal");
            document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "none";
            $("#modalDataTable1 tr").remove();
          }
        };
        */
      } 
      else if (eleid[i] == "ctlfinc") {
        console.log("inside Health Ins");
        document.getElementById("accountdropdown").style.display =
          "none !important";
        document.getElementById(eleid[i]).onclick = () => {
          getInsuranceForCustomer(custid,"life");
          /*
          document.getElementById("loadingWrapper").style.display = "flex";
          console.log("loading.....");
          
          document
            .getElementById("accountdropdown")
            .setAttribute("style", "display:none !important");

          // document.getElementById("accountdropdown").style.display = "none !important";
          //API URL Assignment and Parameters Setting

          let func_name = "ServiceAvailedDataFetch";
          call_crm_function(func_name, { custId: custid })
            .then((res) => {
              console.log("inside Health Ins API", res);
              document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "block";
              document
                .getElementById("accountdropdown")
                .setAttribute("cssText", "display:none !important");
              // document.getElementById("accountdropdown").style.display = "none !important";
              // console.log("POS API response is", res);

              var table = document.getElementById("modalDataTable1");
              table.innerHTML = "";
              if (res.code != "success") {
                // document.getElementById("mdlbdytxt").innerHTML =
                //   "API call failed! Please try again later or contact your administrator.";
                table.innerHTML = `<tr>
                <td>API call failed! Please try again later or contact your administrator.</td>
              </tr>`;
                // table.style.display = "block";
                console.log("Error in Health Ins API", res);
              } else {
                let output = res.details.output;
                let hdr = `<tr  class="modalDataFc">
                        <th>Policy Number</th>
                        <th>Sum Assured</th>
                        <th>Maturity Date</th>
                        <th>Scheme Name</th>
                        <th>Premium Frequency</th>
                        <th>Import Date</th>
                        </tr>`;
                  table.innerHTML += hdr;
                if(output == ""){
                  table.innerHTML = `<tr>
                  <td>Service not available</td>
                  </tr>`;
                    document.getElementById("loadingWrapper").style.display = "none";
                    return;
                }
                let output_in_json = JSON.parse(output);
                console.log(output_in_json);
                
                if (output_in_json == "" || output_in_json.data.length == 0) {
                  table.innerHTML = `<tr>
                  <td>Service not available</td>
                  </tr>`;
                    document.getElementById("loadingWrapper").style.display = "none";
                    return;
                } else {
                  console.log("Health Ins output is", output_in_json.data);
                  get_HTINC_services = [];
                  for(let service of output_in_json.data){
                    // if(service.)
                    console.log("Services from Module : ",service);
                    if (service.Name.toUpperCase() == "LIFE INSURANCE") get_HTINC_services.push(service);
                  }
                  console.log("Health Ins DATA",get_HTINC_services);
                  
                  for (let i = 0; i < get_HTINC_services.length; i++) {
                    var row = `<tr>
                                <td>${get_HTINC_services[i].Policy_Number || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Sum_Assured || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Maturity_Date || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Insuarance_Scheme_Name || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Premium_Frequency || "-"}</td>
                                <td>${
                                  format_date(get_HTINC_services[i].Import_Date || "-")}</td>
                              </tr>`;
                    table.innerHTML += row;
                  }
                  if (get_HTINC_services.length == 0) {
                    table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                  }
                }
              }
              document.getElementById("loadingWrapper").style.display = "none";
            })
            .catch((err) => {
              document.getElementById("loadingWrapper").style.display = "none";
              document.getElementById("mdlbdytxt").innerHTML =
                "Oops! Something went wrong! Please try again later or contact your administrator.";
              console.log("Error in internet banking API", err);
            });
            */

        };
        span.onclick = () => {
          console.log("hererere");
          document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "none";

          $("#modalDataTable1 tr").remove();
        };
        window.onclick = (event) => {
          if (event.target == modal) {
            console.log("closing modal");
            document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "none";
            $("#modalDataTable1 tr").remove();
          }
        };
      } 

      else if (eleid[i] == "cthtinc") {
        console.log("inside Health Ins");
        document.getElementById("accountdropdown").style.display =
          "none !important";
        document.getElementById(eleid[i]).onclick = () => {

          getInsuranceForCustomer(custid,"health");
          /*
          document.getElementById("loadingWrapper").style.display = "flex";
          console.log("loading.....");
          
          document
            .getElementById("accountdropdown")
            .setAttribute("style", "display:none !important");

          // document.getElementById("accountdropdown").style.display = "none !important";
          //API URL Assignment and Parameters Setting

          let func_name = "ServiceAvailedDataFetch";
          call_crm_function(func_name, { custId: custid })
            .then((res) => {
              console.log("inside Health Ins API", res);
              document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "block";
              document
                .getElementById("accountdropdown")
                .setAttribute("cssText", "display:none !important");
              // document.getElementById("accountdropdown").style.display = "none !important";
              // console.log("POS API response is", res);

              var table = document.getElementById("modalDataTable1");
              table.innerHTML = "";
              if (res.code != "success") {
                // document.getElementById("mdlbdytxt").innerHTML =
                //   "API call failed! Please try again later or contact your administrator.";
                table.innerHTML = `<tr>
                <td>API call failed! Please try again later or contact your administrator.</td>
              </tr>`;
                // table.style.display = "block";
                console.log("Error in Health Ins API", res);
              } else {
                let output = res.details.output;
                let hdr = `<tr  class="modalDataFc">
                <th>Policy Number</th>
                <th>Sum Assured</th>
                <th>Maturity Date</th>
                <th>Scheme Name</th>
                <th>Premium Frequency</th>
                <th>Import Date</th>
                </tr>`;
          table.innerHTML += hdr;
                if(output == ""){
                  table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                    document.getElementById("loadingWrapper").style.display = "none";
                    return;
                }
                let output_in_json = JSON.parse(output);
                console.log(output_in_json);
                
                if (output_in_json == "" || output_in_json.data.length == 0) {
                  table.innerHTML = `<tr>
                  <td>Service not available</td>
                  </tr>`;
                    document.getElementById("loadingWrapper").style.display = "none";
                    return;
                } else {
                  console.log("Health Ins output is", output_in_json.data);
                  get_HTINC_services = [];
                  for(let service of output_in_json.data){
                    // if(service.)
                    console.log("Services from Module : ",service);
                    if (service.Name.toUpperCase() == "HEALTH INSURANCE") get_HTINC_services.push(service);
                  }
                  console.log("Health Ins DATA",get_HTINC_services);
                
                  for (let i = 0; i < get_HTINC_services.length; i++) {
                    var row = `<tr>
                                <td>${get_HTINC_services[i].Policy_Number || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Sum_Assured || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Maturity_Date || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Insuarance_Scheme_Name || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Premium_Frequency || "-"}</td>
                                <td>${
                                  format_date( get_HTINC_services[i].Import_Date || "-")}</td>
                              </tr>`;
                    table.innerHTML += row;
                  }
                  if (get_HTINC_services.length == 0) {
                    table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                  }
                }
              }
              document.getElementById("loadingWrapper").style.display = "none";
            })
            .catch((err) => {
              document.getElementById("loadingWrapper").style.display = "none";
              document.getElementById("mdlbdytxt").innerHTML =
                "Oops! Something went wrong! Please try again later or contact your administrator.";
              console.log("Error in internet banking API", err);
            });
            */

        };

        /*
        span.onclick = () => {
          console.log("hererere");
          document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "none";

          $("#modalDataTable1 tr").remove();
        };
        window.onclick = (event) => {
          if (event.target == modal) {
            console.log("closing modal");
            document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "none";
            $("#modalDataTable1 tr").remove();
          }
        };
        */
      }
      else if (eleid[i] == "ctgninc") {
        console.log("inside Health Ins");
        document.getElementById("accountdropdown").style.display =
          "none !important";
        document.getElementById(eleid[i]).onclick = () => {

          getInsuranceForCustomer(custid,"general");
          /*
          document.getElementById("loadingWrapper").style.display = "flex";
          console.log("loading.....");
          
          document
            .getElementById("accountdropdown")
            .setAttribute("style", "display:none !important");

          let func_name = "ServiceAvailedDataFetch";
          call_crm_function(func_name, { custId: custid })
            .then((res) => {
              console.log("inside Health Ins API", res);
              document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "block";
              document
                .getElementById("accountdropdown")
                .setAttribute("cssText", "display:none !important");

              var table = document.getElementById("modalDataTable1");
              table.innerHTML = "";
              if (res.code != "success") {
                table.innerHTML = `<tr>
                <td>API call failed! Please try again later or contact your administrator.</td>
              </tr>`;
                console.log("Error in Health Ins API", res);
              } else {
                let output = res.details.output;
                let hdr = `<tr  class="modalDataFc">
                        <th>Policy Number</th>
                        <th>Sum Assured</th>
                        <th>Maturity Date</th>
                        <th>Scheme Name</th>
                        <th>Premium Frequency</th>
                        <th>Import Date</th>
                        </tr>`;
                  table.innerHTML += hdr;
                if(output == ""){
                  table.innerHTML = `<tr>
                  <td>Service not available</td>
                  </tr>`;
                    document.getElementById("loadingWrapper").style.display = "none";
                    return;
                }
                let output_in_json = JSON.parse(output);
                console.log(output_in_json);
                
                if (output_in_json == "" || output_in_json.data.length == 0) {
                   table.innerHTML = `<tr>
                   <td>Service not available</td>
                   </tr>`;
                    document.getElementById("loadingWrapper").style.display = "none";
                    return;
                } else {
                  console.log("Health Ins output is", output_in_json.data);
                  get_HTINC_services = [];
                  for(let service of output_in_json.data){
                    console.log("Services from Module : ",service);
                    if (service.Name.toUpperCase() == "GENERAL INSURANCE") get_HTINC_services.push(service);
                  }
                  console.log("Health Ins DATA",get_HTINC_services);
                  
                  for (let i = 0; i < get_HTINC_services.length; i++) {
                    var row = `<tr>
                                <td>${get_HTINC_services[i].Policy_Number || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Sum_Assured || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Maturity_Date || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Insuarance_Scheme_Name || "-"}</td>
                                <td>${
                                  get_HTINC_services[i].Premium_Frequency || "-"}</td>
                                <td>${
                                  format_date(get_HTINC_services[i].Import_Date || "-")}</td>
                              </tr>`;
                    table.innerHTML += row;
                  }
                  if (get_HTINC_services.length == 0) {
                    table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                  }
                }
              }
              document.getElementById("loadingWrapper").style.display = "none";
            })
            .catch((err) => {
              document.getElementById("loadingWrapper").style.display = "none";
              document.getElementById("mdlbdytxt").innerHTML =
                "Oops! Something went wrong! Please try again later or contact your administrator.";
              console.log("Error in internet banking API", err);
            });
            */

        };
        /*
        span.onclick = () => {
          console.log("hererere");
          document.getElementById("mdlbdytxt").innerHTML = "";
          modal.style.display = "none";

          $("#modalDataTable1 tr").remove();
        };
        window.onclick = (event) => {
          if (event.target == modal) {
            console.log("closing modal");
            document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "none";
            $("#modalDataTable1 tr").remove();
          }
        };
        */
      }
      else if (eleid[i] == "ctmobbank") {
        document.getElementById(eleid[i]).addEventListener("click",()=>{
          let genericPopUp=createGenericPopUp();
          let genericPopUpContentContainer=genericPopUp.querySelector("#modalCloneBody");
          let func_name = "mobileBankingAPI";
          call_crm_function(func_name, { custId: custid })
            .then((res) => {
              console.log("inside mobile banking API", res);
              if(res.code=="success")
              {
                let apiResp=JSON.parse(res.details.output);
                console.log("Api resp is",apiResp);
                if(apiResp.responseCode=="00")
                {
                  let mbData=apiResp.responseParameter||"-";
                  let usrStatus=mbData.userStatus||"-";
                  let MBregistered=mbData.registerForMB||"-";
                  let UPIregistered=mbData.registerForUPI||"-";
                  let lastLogin=mbData.lastLoginDate||"-";
                  let mbRespTemp=document.getElementById("mbRespStrClone");
                  let mbRespTempClone=mbRespTemp.cloneNode(true);
                  mbRespTempClone.id=mbRespTempClone.id+""+genericPopUpCount;
                  let mbStatusTable=mbRespTempClone.querySelector("#MbStatusTable");
                  let mbTxnTable=mbRespTempClone.querySelector("#MbTxnTable");
                  /*
                  mbStatusTable.innerHTML=`<tr>
                  <td>User Status</td><td>${usrStatus}</td>
                  </tr>
                  <tr>
                    <td>Registered for UPI</td><td>${UPIregistered}</td>
                  </tr>
                  <tr>
                    <td>Last Login date</td><td>${format_date(lastLogin)+" "+lastLogin.split(" ")[1]}</td>
                  </tr>`;
                  */
                  let intraBankDetails=mbData.intraTxnAmtDetails;
                  let mBankingDetails=mbData.mbankingTxnAmtDetails;
                  let IMPSBankingDetails=mbData.impsTxnAmtDetails;
                  let ownAcctDetails=mbData.ownAccLmtTxnAmtDetails;
                  let NeftDetails=mbData.neftTxnAmtDetails;
                  let billRechargeDetails=mbData.billrechargeTxnAmtDetails;
                  let txnSt=``;
                  if((IMPSBankingDetails)&&(Object.values(IMPSBankingDetails).length>0))
                  {
                    txnSt+=`<tr><td>IMPS</td><td>${format_bal2(IMPSBankingDetails.dailyMaxLimit)||"-"}</td><td>${format_bal2(IMPSBankingDetails.usedDailyLimit)||"-"}</td><td>${format_bal2(IMPSBankingDetails.availableLimit)||"-"}</td></tr>`;
                    // removed columns <td>${IMPSBankingDetails.dailyPersonaliseLimit||"-"}</td><td>${IMPSBankingDetails.channel||"-"}</td>
                  }
                  else
                  {
                    txnSt+=`<tr><td>IMPS</td><td>-</td><td>-</td><td>-</td></tr>`;
                  }
                  if((NeftDetails)&&(Object.values(NeftDetails).length>0))
                  {
                    txnSt+=`<tr><td>NEFT</td><td>${format_bal2(NeftDetails.dailyMaxLimit)||"-"}</td><td>${format_bal2(NeftDetails.usedDailyLimit)||"-"}</td><td>${format_bal2(NeftDetails.availableLimit)||"-"}</td></tr>`;
                  }
                  else
                  {
                    txnSt+=`<tr><td>NEFT</td><td>-</td><td>-</td><td>-</td></tr>`;
                  }
                  if((intraBankDetails)&&(Object.values(intraBankDetails).length>0))
                  {
                    txnSt+=`<tr><td>Intra Bank Transfer</td><td>${format_bal2(intraBankDetails.dailyMaxLimit)||"-"}</td><td>${format_bal2(intraBankDetails.usedDailyLimit)||"-"}</td><td>${format_bal2(intraBankDetails.availableLimit)||"-"}</td></tr>`;
                  }
                  else
                  {
                    txnSt+=`<tr><td>Intra Bank Transfer</td><td>-</td><td>-</td><td>-</td></tr>`;
                  }
                  /*
                  if((mBankingDetails)&&(Object.values(mBankingDetails).length>0))
                  {
                    txnSt+=`<tr><td>M Banking</td><td>${mBankingDetails.availableLimit||"-"}</td><td>${mBankingDetails.usedDailyLimit||"-"}</td><td>${mBankingDetails.dailyPersonaliseLimit||"-"}</td><td>${mBankingDetails.channel||"-"}</td><td>${mBankingDetails.dailyMaxLimit||"-"}</td></tr>`;
                  }
                  else
                  {
                    txnSt+=`<tr><td>M Banking</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>`;
                  }
                  
                  if((ownAcctDetails)&&(Object.values(ownAcctDetails).length>0))
                  {
                    txnSt+=`<tr><td>Own Account</td><td>${ownAcctDetails.availableLimit||"-"}</td><td>${ownAcctDetails.usedDailyLimit||"-"}</td><td>${ownAcctDetails.dailyPersonaliseLimit||"-"}</td><td>${ownAcctDetails.channel||"-"}</td><td>${ownAcctDetails.dailyMaxLimit||"-"}</td></tr>`;
                  }
                  else
                  {
                    txnSt+=`<tr><td>Own Account</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>`;
                  }
                  
                  if((billRechargeDetails)&&(Object.values(billRechargeDetails).length>0))
                  {
                    txnSt+=`<tr><td>Bill Recharge</td><td>${billRechargeDetails.availableLimit||"-"}</td><td>${billRechargeDetails.usedDailyLimit||"-"}</td><td>${billRechargeDetails.dailyPersonaliseLimit||"-"}</td><td>${billRechargeDetails.channel||"-"}</td><td>${billRechargeDetails.dailyMaxLimit||"-"}</td></tr>`;
                  }
                  else
                  {
                    txnSt+=`<tr><td>Bill Recharge</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>`;
                  }
                  */
                 // appending status details onto txnSt
                 // style="background-color:#f9f9f9;box-shadow: 2px 2px 10px #c4c4c4;"
                 txnSt+=`<tr>
                 
                 <td><span class="status-key">User Status</span> <span class="status-value">${usrStatus}</span></td>
                 
                   <td><span class="status-key">Registered for UPI</span> <span class="status-value">${UPIregistered}</span></td>
                 
                   <td><span class="status-key">Last Login date</span> <span class="status-value">${format_date(lastLogin)+" "+lastLogin.split(" ")[1]}</span></td>
                   <td></td>
                 </tr>`;
                  mbTxnTable.innerHTML+=txnSt;
                  genericPopUpContentContainer.innerHTML="";
                  mbRespTempClone.classList.remove("hide");
                  genericPopUpContentContainer.appendChild(mbRespTempClone);
                }
                else if(apiResp.responseCode=="01")
                {
                  genericPopUpContentContainer.innerHTML=apiResp.msg;
                }
                else
                {
                  genericPopUpContentContainer.innerHTML="Mobile Banking data could not be fetched";
                  console.log("Mobile banking data could not be fetched",apiResp);
                }
              }
            })
            .catch((err) => {
              console.log("Error in mobile banking API", err);
              genericPopUpContentContainer.innerHTML="Mobile Banking data could not be fetched";
              console.log("Mobile banking data could not be fetched",err);
            });
        });
          
            

        }
        else if (eleid[i] == "ctpos") {
          console.log("inside POS");
          document.getElementById("accountdropdown").style.display =
            "none !important";
          console.log("POS");
          document.getElementById(eleid[i]).onclick = () => {
            document.getElementById("loadingWrapper").style.display = "flex";
            console.log("loading.....");
            
            document
              .getElementById("accountdropdown")
              .setAttribute("style", "display:none !important");
  
            // document.getElementById("accountdropdown").style.display = "none !important";
            //API URL Assignment and Parameters Setting
  
            let func_name = "ServiceAvailedDataFetch";
            call_crm_function(func_name, { custId: custid })
              .then((res) => {
                console.log("inside POS API", res);
                document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "block";
                document
                  .getElementById("accountdropdown")
                  .setAttribute("cssText", "display:none !important");
                // document.getElementById("accountdropdown").style.display = "none !important";
                // console.log("POS API response is", res);
  
                var table = document.getElementById("modalDataTable1");
                table.innerHTML = "";
                if (res.code != "success") {
                  // document.getElementById("mdlbdytxt").innerHTML =
                  //   "API call failed! Please try again later or contact your administrator.";
                  table.innerHTML = `<tr>
                  <td>API call failed! Please try again later or contact your administrator.</td>
                </tr>`;
                  // table.style.display = "block";
                  console.log("Error in POS API", res);
                } else {
                  let output = res.details.output;
                  let hdr = `<tr  class="modalDataFc">
                  <th>MID</th>
                  <th>TID</th>
                  <th>Vendor Name</th>
                  <th>Issue Date</th>
                  <th>SOL ID</th>
                  <th>Import Date</th>
                  </tr>`;
            table.innerHTML += hdr;
                  if(output == ""){
                    table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                    /*
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    */
                      document.getElementById("loadingWrapper").style.display = "none";
                      return;
                  }
                  let output_in_json = JSON.parse(output);
                  console.log(output_in_json);
                  
                  if (output_in_json == "" || output_in_json.data.length == 0) {
                    table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                    /*
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    */
                      document.getElementById("loadingWrapper").style.display = "none";
                      return;
                  } else {
                    console.log("POS output is", output_in_json.data);
                    get_POS_services = [];
                    for(let service of output_in_json.data){
                      // if(service.)
                      console.log("Services from Module : ",service);
                      if (service.Name.toUpperCase() == "POS") get_POS_services.push(service);
                    }
                    console.log("POS DATA",get_POS_services);
                   
                    for (let i = 0; i < get_POS_services.length; i++) {
                      var row = `<tr>
                                  <td>${get_POS_services[i].POS_MID || "-"}</td>
                                  <td>${
                                    get_POS_services[i].POS_TID || "-"}</td>
                                  <td>${
                                    get_POS_services[i].Vendor_Name || "-"}</td>
                                  <td>${format_date(
                                    get_POS_services[i].POS_Issue_Date)}</td>
                                  <td>${get_POS_services[i].POS_Branch_Sol_ID || "-"}</td>
                                  <td>${format_date(get_POS_services[i].Import_Date || "-")}</td>
                                </tr>`;
                      table.innerHTML += row;
                    }
                    if (get_POS_services.length == 0) {
                      table.innerHTML = `<tr>
                      <td>Service not available</td>
                      </tr>`;
                      /*
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      */
                    }
                  }
                }
                document.getElementById("loadingWrapper").style.display = "none";
              })
              .catch((err) => {
                document.getElementById("loadingWrapper").style.display = "none";
                document.getElementById("mdlbdytxt").innerHTML =
                  "Oops! Something went wrong! Please try again later or contact your administrator.";
                console.log("Error in internet banking API", err);
              });
              
  
          };
          span.onclick = () => {
            console.log("hererere");
            document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "none";
  
            $("#modalDataTable1 tr").remove();
          };
          window.onclick = (event) => {
            if (event.target == modal) {
              console.log("closing modal");
              document.getElementById("mdlbdytxt").innerHTML = "";
              modal.style.display = "none";
              $("#modalDataTable1 tr").remove();
            }
          };
        }
        else if (eleid[i] == "ctbqr") {
          console.log("inside BQR");
          document.getElementById("accountdropdown").style.display =
            "none !important";
          document.getElementById(eleid[i]).onclick = () => {
            document.getElementById("loadingWrapper").style.display = "flex";
            console.log("loading.....");
            
            document
              .getElementById("accountdropdown")
              .setAttribute("style", "display:none !important");
  
            // document.getElementById("accountdropdown").style.display = "none !important";
            //API URL Assignment and Parameters Setting
  
            let func_name = "ServiceAvailedDataFetch";
            call_crm_function(func_name, { custId: custid })
              .then((res) => {
                console.log("inside BQR API", res);
                document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "block";
                document
                  .getElementById("accountdropdown")
                  .setAttribute("cssText", "display:none !important");
                // document.getElementById("accountdropdown").style.display = "none !important";
                // console.log("POS API response is", res);
  
                var table = document.getElementById("modalDataTable1");
                table.innerHTML = "";
                if (res.code != "success") {
                  // document.getElementById("mdlbdytxt").innerHTML =
                  //   "API call failed! Please try again later or contact your administrator.";
                  table.innerHTML = `<tr>
                  <td>API call failed! Please try again later or contact your administrator.</td>
                </tr>`;
                  // table.style.display = "block";
                  console.log("Error in BQR API", res);
                } else {
                  let output = res.details.output;
                  let hdr = `<tr  class="modalDataFc">
                          <th>MID</th>
                          <th>TID</th>
                          <th>Issue Date</th>
                          <th>SOL ID</th>
                          <th>Import Date</th>
                          </tr>`;
                    table.innerHTML += hdr;
                  if(output == ""){
                    table.innerHTML = `<tr>
                      <td>Service not available</td>
                      </tr>`;
                      /*
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      */
                      document.getElementById("loadingWrapper").style.display = "none";
                      return;
                  }
                  let output_in_json = JSON.parse(output);
                  console.log(output_in_json);
                  
                  if (output_in_json == "" || output_in_json.data.length == 0) {
                    table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                    /*
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    */
                      document.getElementById("loadingWrapper").style.display = "none";
                      return;
                  } else {
                    console.log("BQR output is", output_in_json.data);
                    get_BQR_services = [];
                    for(let service of output_in_json.data){
                      // if(service.)
                      console.log("Services from Module : ",service);
                      if (service.Name.toUpperCase() == "BQR") get_BQR_services.push(service);
                    }
                    console.log("POS DATA",get_BQR_services);
                    
                    for (let i = 0; i < get_BQR_services.length; i++) {
                      var row = `<tr>
                                  <td>${get_BQR_services[i].BQR_MID || "-"}</td>
                                  <td>${
                                    get_BQR_services[i].BQR_TID || "-"}</td>
                                  <td>${format_date(
                                    get_BQR_services[i].BQR_Issue_Date)}</td>
                                  <td>${get_BQR_services[i].BQR_Branch_Sol_ID || "-"}</td>
                                  <td>${format_date(get_BQR_services[i].Import_Date || "-")}</td>
                                </tr>`;
                      table.innerHTML += row;
                    }
                    if (get_BQR_services.length == 0) {
                      table.innerHTML = `<tr>
                      <td>Service not available</td>
                      </tr>`;
                      /*
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      */
                    }
                  }
                }
                document.getElementById("loadingWrapper").style.display = "none";
              })
              .catch((err) => {
                document.getElementById("loadingWrapper").style.display = "none";
                document.getElementById("mdlbdytxt").innerHTML =
                  "Oops! Something went wrong! Please try again later or contact your administrator.";
                console.log("Error in internet banking API", err);
              });
              
  
          };
          span.onclick = () => {
            console.log("hererere");
            document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "none";
  
            $("#modalDataTable1 tr").remove();
          };
          window.onclick = (event) => {
            if (event.target == modal) {
              console.log("closing modal");
              document.getElementById("mdlbdytxt").innerHTML = "";
              modal.style.display = "none";
              $("#modalDataTable1 tr").remove();
            }
          };
        }
        else if (eleid[i] == "ctfstag") {
          console.log("inside FastTag");
          document.getElementById("accountdropdown").style.display =
            "none !important";
          document.getElementById(eleid[i]).onclick = () => {
            document.getElementById("loadingWrapper").style.display = "flex";
            console.log("loading.....");
            
            document
              .getElementById("accountdropdown")
              .setAttribute("style", "display:none !important");
  
            // document.getElementById("accountdropdown").style.display = "none !important";
            //API URL Assignment and Parameters Setting
  
            let func_name = "ServiceAvailedDataFetch";
            call_crm_function(func_name, { custId: custid })
              .then((res) => {
                console.log("inside FastTag API", res);
                document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "block";
                document
                  .getElementById("accountdropdown")
                  .setAttribute("cssText", "display:none !important");
                // document.getElementById("accountdropdown").style.display = "none !important";
                // console.log("POS API response is", res);
  
                var table = document.getElementById("modalDataTable1");
                table.innerHTML = "";
                if (res.code != "success") {
                  // document.getElementById("mdlbdytxt").innerHTML =
                  //   "API call failed! Please try again later or contact your administrator.";
                  table.innerHTML = `<tr>
                  <td>API call failed! Please try again later or contact your administrator.</td>
                </tr>`;
                  // table.style.display = "block";
                  console.log("Error in FastTag API", res);
                } else {
                  let output = res.details.output;
                  let hdr = `<tr  class="modalDataFc">
                  <th>Vehicle Number</th>
                  <th>Customer Name</th>
                  <th>Issue Date</th>
                  <th>Import Date</th>
                  </tr>`;
            table.innerHTML += hdr;
                  if(output == ""){
                    table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                    /*
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    */
                      document.getElementById("loadingWrapper").style.display = "none";
                      return;
                  }
                  let output_in_json = JSON.parse(output);
                  console.log(output_in_json);
                  
                  if (output_in_json == "" || output_in_json.data.length == 0) {
                    table.innerHTML = `<tr>
                    <td>Service not available</td>
                    </tr>`;
                    /*
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    <td>-</td>
                    */
                      document.getElementById("loadingWrapper").style.display = "none";
                      return;
                  } else {
                    console.log("FastTag output is", output_in_json.data);
                    get_FSTAG_services = [];
                    for(let service of output_in_json.data){
                      // if(service.)
                      console.log("Services from Module : ",service);
                      if (service.Name.toUpperCase() == "FASTTAG") get_FSTAG_services.push(service);
                    }
                    console.log("FastTag DATA",get_FSTAG_services);
                   
                    for (let i = 0; i < get_FSTAG_services.length; i++) {
                      var row = `<tr>
                                  <td>${get_FSTAG_services[i].Vehicle_Number || "-"}</td>
                                  <td>${
                                    get_FSTAG_services[i].Customer_Name || "-"}</td>
                                  <td>${format_date(
                                    get_FSTAG_services[i].Fast_Tag_Issue_Date)}</td>
                                  <td>${format_date(
                                    get_FSTAG_services[i].Import_Date)}</td>
                                </tr>`;
                      table.innerHTML += row;
                    }
                    if (get_FSTAG_services.length == 0) {
                      table.innerHTML = `<tr>
                      <td>Service not available</td>
                      </tr>`;
                      /*
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      <td>-</td>
                      */
                    }
                  }
                }
                document.getElementById("loadingWrapper").style.display = "none";
              })
              .catch((err) => {
                document.getElementById("loadingWrapper").style.display = "none";
                document.getElementById("mdlbdytxt").innerHTML =
                  "Oops! Something went wrong! Please try again later or contact your administrator.";
                console.log("Error in internet banking API", err);
              });
              
  
          };
          span.onclick = () => {
            console.log("hererere");
            document.getElementById("mdlbdytxt").innerHTML = "";
            modal.style.display = "none";
  
            $("#modalDataTable1 tr").remove();
          };
          window.onclick = (event) => {
            if (event.target == modal) {
              console.log("closing modal");
              document.getElementById("mdlbdytxt").innerHTML = "";
              modal.style.display = "none";
              $("#modalDataTable1 tr").remove();
            }
          };
        }
      
    } else {
      document.getElementById(eleid[i]).innerHTML = "Not Availed";
      // csusSvc.push(document.getElementById(eleid[i]).title);
      console.log("SERVICE REQUEST",eleid[i]);
      // if (document.getElementById("ctrtcorp2").innerHTML == "Corporate" && eleid[i] == "ctcrdcd") {
      //   console.log("SHOULD LOG CORPORATE CRDCRD");
      //   continue;
      // }
      // get description from analytics
      console.log("PROD DESC::: ",curr_conv,prd_description[document.getElementById(eleid[i]).title], document.getElementById(eleid[i]).title);
      
      // if (prd_description.hasOwnProperty(document.getElementById(eleid[i]).title) && prd_description[document.getElementById(eleid[i]).title] != "") {
      //   csuslistElements +=
      //   `<li class="blue-csus" onclick="openDescription(\`${prd_description[document.getElementById(eleid[i]).title]}\`)">` + document.getElementById(eleid[i]).title + `</li>`;
      // }else{
      //   csuslistElements +=
      //   `<li>` + document.getElementById(eleid[i]).title + `</li>`;
      // }
      RetailCorporate = document.getElementById("ctrtcorp2").innerHTML;
      if(RetailCorporate == "Retail"){
        if(eleid[i] == "ctlck" || eleid[i] == "ctcrdcd"){
          csusList.push(document.getElementById(eleid[i]).title);
        }
      
      }else{
        csusList.push(document.getElementById(eleid[i]).title);
      }
      
      document.getElementById(eleid[i]).style.color = "red";
      document.getElementById(eleid[i]).style.textDecoration = "none";
      document.getElementById(eleid[i]).style.pointerEvents = "none";
    }

    // console.log(csuslistElements);
  }
  // console.log("CAR LAON", prd_description["Vehicle Loan"]);
  // if (prd_description.hasOwnProperty("Mutual Funds") && prd_description["Mutual Funds"] != "") {
  //   csuslistElements +=
  //   `<li  class="blue-csus" onclick="openDescription(\`${prd_description["Mutual Funds"]}\`)">Mutual Funds</li>`;
  // }else{
  //   csuslistElements +=
  //   `<li>Mutual Funds</li>`;
  // }
  // RetailCorporate = document.getElementById("ctrtcorp2").innerHTML;
  // if(RetailCorporate == "Retail"){
  //   if (prd_description.hasOwnProperty("Vehicle Loan") && prd_description["Vehicle Loan"] != "" ) {
  //     csuslistElements +=
  //     `<li class="blue-csus" onclick="openDescription(\`${prd_description["Vehicle Loan"]}\`)">Vehicle Loan</li>`;
  //   }else{
  //     csuslistElements +=
  //     `<li>Vehicle Loan</li>`;
  //   }
  //   csusList.push("Vehicle Loan");
  // }
  
  csuslistElements += `</ol>`;
  // csusList.push("Mutual Funds");
 
  document.getElementById("crusPanel1").innerHTML = csuslistElements;
}
async function load_product_desc(){
  resp = await call_crm_function("getDescriptionCSUS",{});
  console.log("DESCRIPTION::: ", resp);
  data = JSON.parse(resp.details.output);
  data = JSON.parse(data.response)
  console.log("DESCRIPTION DATA::: ",data);
  for (const i of data) {
    prd_description[i.PRODUCT_TYPE_1] = i.DESC || "";
    // curr_conv[i.Currency] = i["INR Equivalent"];
  }
}
function populate_related_records(data, table,hdr,d){
  console.log("REL DATA::",rel_data);
  console.log("Related table", table);
  // rel_table_hdr = document.getElementById("tbldepdtbtdrelhdr_"+d);
  rel_table_bdy = document.getElementById(d+"tabrel");
  console.log("REL BDY::",rel_table_bdy);
  current_page = document.getElementById("page_num_"+d);
  err_div = document.getElementById("err_rel_"+d);
  page = current_page.title;
  if (data.length == 0) {
    err_div.innerHTML =`No Accounts Found`;
    err_div.style.display = "block";
    hdr.style.display="none";
    rel_table_bdy.style.display="none";
    // paging.style.display = "none";
    table_wrapper.style = `
    display:${"none"};
    max-height:250px;
    `;
  }
  table.innerHTML = "";

  // show header
  // hdr.style.display = "contents";
  let stadat = data;
  

  if (closed_rel[d] == "N" && stadat.length == 201) {
    // check last account is open
    // if - Y - allow next page
    // else - block next page
    if (d == "td" || d == "casa") {
      console.log("LAST ELE ::",stadat[stadat.length-1].ACCT_CLS_FLG);
      if(stadat[stadat.length-1].ACCT_CLS_FLG != "N"){
        //dont allow next page
        console.log( document.getElementById("next_page_"+d));
        document.getElementById("next_page_"+d).classList.add("round_button_disabled");
        document.getElementById("next_page_"+d).classList.remove("round_button");
        document.getElementById("next_page_"+d).onclick = null;
      }else{
        document.getElementById("next_page_"+d).classList.remove("round_button_disabled");
        document.getElementById("next_page_"+d).classList.add("round_button");
        document.getElementById("next_page_"+d).onclick = ()=>{getPage(d,1)};
      }
    }else{
      console.log("LAST ELE ::",stadat[stadat.length-1].Account_Close_Flag);
      if(stadat[stadat.length-1].Account_Close_Flag != "N"){
        //dont allow next page
        console.log( document.getElementById("next_page_"+d));
        document.getElementById("next_page_"+d).classList.add("round_button_disabled");
        document.getElementById("next_page_"+d).classList.remove("round_button");
        document.getElementById("next_page_"+d).onclick = null;
      }else{
        document.getElementById("next_page_"+d).classList.remove("round_button_disabled");
        document.getElementById("next_page_"+d).classList.add("round_button");
        document.getElementById("next_page_"+d).onclick = ()=>{getPage(d,1)};
      }
    }
    
  }
    
  for (let i = 0; i < stadat.length; i++) {
  
    if (d == "td") {
      if(closed_rel[d] == "N" && stadat[i].ACCT_CLS_FLG == "Y"){ 
        continue;
      }
      let close_flag = "No";
      if (stadat[i].ACCT_CLS_FLG == "Y") {
        
        close_flag = "Yes";
      }
      var row = `<tr id="${stadat[i].id}">
          <td class="tabdatTitle" colspan=2 onclick="tdClk(this,${i},1)">${
        stadat[i].Name || "-"
      }</td>
          
          <td class="tabdat" colspan=2>${stadat[i].Branch || "-"}</td>
          <td class="tabdat" colspan=2>${stadat[i].Scheme_Code || "-"}</td>
          <td class="tabdat" colspan=2>${format_date(
            stadat[i].A_c_Open_Date
          )}</td>
          <td class="tabdat" colspan=2>${stadat[i].Relationship_Type}</td>
          <td class="tabdat" colspan=2>${
            format_bal2(stadat[i].Deposit_Amount || "-")
          }</td>
          <td class="tabdat" colspan=2>${format_date(
            stadat[i].Maturity_Date
          )}</td>
          
          <td class="tabdat" colspan=2>${close_flag}</td>
</tr>`;
      table.innerHTML += row;
    }
    if (d == "casa") {
      if(closed_rel[d] == "N" && stadat[i].ACCT_CLS_FLG == "Y"){ 
        continue;
      }
      let close_flag = "No";
      if (stadat[i].ACCT_CLS_FLG == "Y") {
        close_flag = "Yes";
      }
      var row = `<tr id="${stadat[i].id}" >
      <td class="tabdatTitle" colspan=2 onclick="casaClk(this,${i},1)">${
      stadat[i].Name || "-"
    }</td>
      
      <td class="tabdat" colspan=2>${stadat[i].Branch}</td>
      <td class="tabdat" colspan=2>${stadat[i].Scheme_Code || "-"}</td>
      <td class="tabdat" colspan=2>${format_date(
        stadat[i].A_c_Open_Date
      )}</td>
      <td class="tabdat" colspan=2>${stadat[i].Relationship_Type }</td>
      <td class="tabdat" colspan=2>${
        format_bal2(stadat[i].Balance_Currency || "-")
      }</td>
      <td class="tabdat" colspan=2>${format_bal2(stadat[i].Lien_Amount || "-")}</td>
      <td class="tabdat" colspan=2>${
        stadat[i].Account_Status || "-"
      }</td>
      
      <td class="tabdat" colspan=2>${close_flag}</td>
      </tr>`;
    table.innerHTML += row;
    }if (d == "adv") {
      if(closed_rel[d] == "N" && stadat[i].Account_Close_Flag == "Y"){ 
        continue;
      }
      let close_flag = "No";
      if (stadat[i].Account_Close_Flag == "Y") {
        close_flag = "Yes";
      }
      var row = `<tr id="${stadat[i].id}">
          <td class="tabdatTitle" colspan=2 title="${
            stadat[i].Name
          }" onclick="advClk(this,${i},1)">${stadat[i].Name || "-"}</td>
      
          <td class="tabdat" colspan=2>${stadat[i].Branch_Name	 || "-"}</td>
          <td class="tabdat" colspan=2>${stadat[i].Scheme_Code || "-"}</td>
          <td class="tabdat" colspan=2>${
            format_date(stadat[i].A_c_Open_Date) || "-"
          }</td>
          <td class="tabdat" colspan=2>${
            format_bal2(stadat[i].Sanctioned_Amount || "-")
          }</td>
          <td class="tabdat" colspan=2>${
           stadat[i].Relationship_Type
          }</td>
          <td class="tabdat" colspan=2>${
           format_bal3( stadat[i].Balance_Currency || "-")
          }</td>
          <td class="tabdat" colspan=2>${
            format_bal2(stadat[i].Overdue_Amount || "-")
          }</td>
    
          <td class="tabdat" colspan=2>${close_flag}</td>
          </tr>`;
      table.innerHTML += row;
    }
  }
  let rows_couns = $("#"+table.id+" tr").length;
  console.log("ROWS COUNTs ::", rows_couns);
  // check for the last page with open accounts
  console.log("LAST PAGE OPEN ::",last_open_page_rel);
  if(rows_couns != 201){
    //dont allow next page
    console.log( document.getElementById("next_page_"+d));
    document.getElementById("next_page_"+d).classList.add("round_button_disabled");
    document.getElementById("next_page_"+d).classList.remove("round_button");
    document.getElementById("next_page_"+d).onclick = null;
  }else{
    document.getElementById("next_page_"+d).classList.remove("round_button_disabled");
    document.getElementById("next_page_"+d).classList.add("round_button");
    document.getElementById("next_page_"+d).onclick = ()=>{getPage(d,1)};
  }
  count = 0;
  for (const ele of stadat) {
    if (d != "adv" && ele.ACCT_CLS_FLG == "N") {
      count+=1;
    }if (d == "adv" && ele.Account_Close_Flag == "N") {
      count +=1;
    }
  }
  if(closed_rel[d] == "N" && count > 0){
    last_open_page_rel[d] = last_open_page_rel[d]<page?page:last_open_page_rel[d];
  }
  console.log("LAST PAGE OPEN ::",last_open_page_rel, count,rel_table_bdy);
  if(rows_couns == 0){
    // no open accounts
    err_div.innerHTML =`No Accounts Found`;
    // if(stadat.length>0) err_div.innerHTML =`No Open Accounts. Check for closed accounts`;
    
    err_div.style.display = "block";
    
    hdr.style.display="none";
    rel_table_bdy.style.display="none";
    paging.style.display = "none";
    table_wrapper.style = `
    display:${"none"};
    max-height:250px;
    `;
  }else{
    err_div.style.display = "none";
    rel_table_hdr.style.display="contents";
    rel_table_bdy.style.display="inline-table";
    paging.style.display = "flex";
    table_wrapper.style = `
    display:${"block"};
    max-height:250px
    `;
  }
  current_page.innerHTML = String(((page-1)*offset)+1) + "-" + String(((page-1)*offset)+rows_couns);
}
async function showRelatedRecords(tab){
  // check if data is empty
  // yes - replace the header with empty msg
  // no - show the body and call getRealtedRecordsAAS with ids
  //set header to hide or show
  if(!show_table[tab]){
    document.getElementById("hdr_"+tab).innerHTML = ` <strong>Related Accounts</strong>`;
    document.getElementById("hdr_"+tab).parentElement.style.borderBottom = "1.5px solid #fff";
  }
  else{
    document.getElementById("hdr_"+tab).innerHTML = ` <strong>Show Related Accounts</strong>`;
    document.getElementById("hdr_"+tab).parentElement.style.borderBottom = "1.5px solid #d7e2ed";
  }
  document.getElementById("hdr_"+tab).classList.toggle('active');
  err_div = document.getElementById("err_rel_"+tab);
  tableDiv = document.getElementById("relatedTableDiv_"+tab);
  if (!related_flg[tab]) {
    // show the table first
    console.log("CLOSED ACC ::",closed_rel);
    closed_rel[tab] = "N";
    if (tab == "adv") {
      closed_rel[tab] = document.getElementById("nfb_check_box").checked ? "Y":"N";
    }else if(tab == "td"){
      closed_rel[tab] = document.getElementById("tdCheckBox").checked ? "Y":"N";
    }else if(tab == "casa"){
      closed_rel[tab] = document.getElementById("casaCheckBox").checked ? "Y":"N";
    }
    console.log("CLOSED ACC ::",closed_rel);
    tableDiv.style.display = "block";
    await get_relatedrc(1,tab); 
    if (rel_rec_g.length > 0) {
      // show paging
      document.getElementById(tab+"_paging").style.display = "flex";
      document.getElementById("page_num_"+tab).innerHTML = "1-200";
    }
  
  }
  
  // if (rel_rec_g.length == 0) {
  //   // hide all body
  //   if (tab == "casa") {
  //     // show error div
  //     err_div.innerHTML = `<th colspan="18">No Casa Related Accounts Found</th>`;
  //     err_div.style.display = show_table[tab]? "none":"contents";
  //   }else if (tab == "td") {
  //     err_div.innerHTML = `<th colspan="16">No Term Deposit Related Accounts Found</th>`;
  //     err_div.style.display = show_table[tab]? "none":"contents";
  //   }else if (tab == "adv") {
  //     err_div.innerHTML = `<th colspan="16">No Fund Based Related Accounts Found</th>`;
  //     err_div.style.display = show_table[tab]? "none":"contents";
  //   }
  //   show_table[tab] = show_table[tab]?false:true;
    
  // }
  
  //Decision to show or hide the related accounts table
  if (show_table[tab]) {
    tableDiv.style.display = "none";
    show_table[tab] = show_table[tab]?false:true;
  }else{
    tableDiv.style.display = "block";
    getRelatedAASRecords(tab);
    show_table[tab] = show_table[tab]?false:true;
  }
  console.log("SHOW TABLE",show_table);
}
async function getRelatedAASRecords(d){
  // fetched the data if not fetched 
  if (!related_flg[d]) {
    closed_rel[d] = "N";
    if (d == "adv") {
      closed_rel[d] = document.getElementById("nfb_check_box").checked ? "Y":"N";
    }else if(d == "td"){
      closed_rel[d] = document.getElementById("tdCheckBox").checked ? "Y":"N";
    }else{
      closed_rel[d] = document.getElementById("casaCheckBox").checked ? "Y":"N";
    }
    await get_relatedrc(1,d); 
  }
 
  // check data present
  table_wrapper = document.getElementById(d+"_tblwrapper");
  err_div = document.getElementById("err_rel_"+d);

  paging = document.getElementById(d+"_paging");
  rel_table_hdr = document.getElementById("tbldepdtbtdrelhdr_"+d);
  rel_table_bdy = document.getElementById(d+"tabrel");
  // tableDiv = document.getElementById("relatedTableDiv_"+d);
  rel_table = document.getElementById("tblrel_"+d);
  // td_rel_table = document.getElementById("tbldepdtbtdrel");
  d_table={
    "td":document.getElementById("tbldepdtbtd"),
    "casa":document.getElementById("tbldepdtbcs"),
    "adv":document.getElementById("tbladvdtb")
  };
  // td_table = document.getElementById("tbldepdtbtd");

  // // dep_rel_table_hdr = document.getElementById("ctdeptnrel");
  // // dep_tableDiv = document.getElementById("casaRelatedRec");
  // // dep_rel_table = document.getElementById("tbldepdtbcsrel");
  // dep_table = document.getElementById("tbldepdtbcs");

  // // adv_rel_table_hdr = document.getElementById("tbladvdtbrelhdr");
  // // adv_tableDiv = document.getElementById("advtablerel");

  // adv_table = document.getElementById("tbladvdtb");

  

      // show data in specific table
      // sort for td and dep
      // let td_data = []
      // let dep_data = []
      // let adv_data = []
      // for (let i = 0; i < rel_rec_g.length; i++) {
      //   for (let j = 0; j < fb_casa.length; j++) {
      //     let close_flg = fb_casa[j].ACCT_CLS_FLG || "-";
      //     if (close_flg == "-" || close_flg == "Y") {
      //       continue;
      //     }
      //     // test commit
      //     if (
      //       (fb_casa[j].A_c_Type == "Current" ||
      //         fb_casa[j].A_c_Type == "Saving" ||
      //         fb_casa[j].A_c_Type == "CAA") &&
      //       fb_casa[j].Scheme_Code != "RDNLX" &&
      //       fb_casa[j].Scheme_Code != "RDFLX"
      //     ) {
      //       if (fb_casa[j].ACID == rel_rec_g[i].Name) {
      //         let record = fb_casa[j];
      //         record["index"] = j;
      //         dep_data.push(record);
      //       }
      //     }
      //     if (
      //       fb_casa[j].A_c_Type == "TDA" ||
      //       fb_casa[j].Scheme_Code == "RDNLX" ||
      //       fb_casa[j].Scheme_Code == "RDFLX"
      //     ) {
      //       if (fb_casa[j].ACID == rel_rec_g[i].Name) {
      //         let record = fb_casa[j];
      //         console.log("RECORD TD", record);
      //         record["index"] = j;
      //         td_data.push(record);
      //       }
      //     }
      //   }
      // }
          
      // loop through not empty data
      // let dep_rel_data = [];
      // let td_rel_data = [];
      // let adv_rel_data = [];
      console.log(rel_data[d]);
      if (rel_data[d].length == 0) {
        err_div.innerHTML =`No Accounts Found`;
        err_div.style.display = "block";
        rel_table_hdr.style.display="none";
        rel_table_bdy.style.display="none";
        paging.style.display = "none";
        table_wrapper.style = `
        display:${"none"};
        height:250px
        `;
      }else{
        // table_wrapper.style.display = show_table[d]?"none":"block";
        err_div.style.display = "none";
        rel_table_hdr.style.display="contents";
        rel_table_bdy.style.display="inline-table";
        paging.style.display = "flex";
        table_wrapper.style = `
        display:${"block"};
        height:250px
        `;
        populate_related_records(rel_data[d], rel_table,rel_table_hdr,d);
        d_table[d].style.maxHeight = "50%";
      }
      rel_rec_g = rel_data[d];
      for (let i = 0; i < rel_rec_g.length; i++) {
        // skip empty response
        let record = rel_rec_g[i];
        record.index = i;
        rel_rec_g[i] = record;
        // if (rel_rec_g[i].ACID == "") {
        //   continue;
        // }
        
        // if (rel_rec_g[i].hasOwnProperty("A_c_Type_Current_Saving")) {
        //   // from loan accounts
        //   // check for adv accounts
        
        //   // adv_rel_data.push(rel_rec_g[i])
        // }
        
        // if (rel_rec_g[i].hasOwnProperty("A_c_Type")) {
        //   // from liabilities
        //   // check for casa accounts
        //   if (
        //     (rel_rec_g[i].A_c_Type == "Current" ||
        //       rel_rec_g[i].A_c_Type == "Saving" ||
        //       rel_rec_g[i].A_c_Type == "CAA") &&
        //     rel_rec_g[i].Scheme_Code != "RDNLX" &&
        //     rel_rec_g[i].Scheme_Code != "RDFLX"
        //   ) {
        //     let record = rel_rec_g[i];
        //     record.index = i;
        //     rel_rec_g[i] = record;
        //     // dep_rel_data.push(rel_rec_g[i]);
        //   }
        //   // check for td accounts
        //   if (
        //     rel_rec_g[i].A_c_Type == "TDA" ||
        //     rel_rec_g[i].Scheme_Code == "RDNLX" ||
        //     rel_rec_g[i].Scheme_Code == "RDFLX"
        //   ) {
        //     let record = rel_rec_g[i];
        //     record.index = i;
        //     rel_rec_g[i] = record;
        //   }
        // }
      }
      if (rel_data[d].length >0) {
        rel_data[d] = rel_rec_g;
      }
      
      console.log("REL DATA", rel_data);
      
        // if (rel_data[d].length == 0) {
        //   // set_error_msg_rel("*No Term Deposit Related Accounts Found","red");
        //   // td_rel_table.style.display = "none";
        //   // hide the table body and replace the table header to error msg
  
        //   // document.getElementById("relatedTableDiv").style.display = "none";
        //   return;
        // }
        
      
      // console.log("TD data ", td_rel_data);
      // console.log("DEP data ", dep_rel_data);
      // console.log("ADV data ", adv_rel_data);
      

      // if (show_table[d]) {
      //   // hide table
      //   // if (casa_rel_data.length ==0) {
      //   //   err_div.style.display = "none";
      //   // }if (td_rel_data.length ==0) {
      //   //   err_div.style.display = "none";
      //   // }if (adv_rel_data.length ==0) {
      //   //   err_div.style.display = "none";
      //   // }
      //   if (rel_data[d].length == 0) {
      //     err_div.style.display = "none";
      //   }else{
      //     table_wrapper.style.display = "none";
      //     rel_table_hdr.style.display="none";
      //   }
      //   // if (d== "td") {
      //   //   // err hdr wrapper
      //   //   else{
            
      //   //   }
        
          
    
      //   // }else if (d =="casa") {
      //   //   else{
      //   //     table_wrapper.style.display = "none";
      //   //     rel_table_hdr.style.display="none";
      //   //   }
        
      //   // }else{
      //   //   else{
      //   //     table_wrapper.style.display = "none";
      //   //     rel_table_hdr.style.display="none";
      //   //   }
        
      //   // }
        
      // }else{
      //   // show table
      //   // if (casa_rel_data.length ==0) {
      //   //   err_div.style.display = "block";
      //   // }if (td_rel_data.length ==0) {
      //   //   err_div.style.display = "none";
      //   // }if (adv_rel_data.length ==0) {
      //   //   err_div.style.display = "none";
      //   // }
      //   if (rel_data[d].length == 0) {
      //     err_div.style.display = "block";
      //   }else{
      //     table_wrapper.style.display = "block";
      //     rel_table_hdr.style.display="contents";
      //   }

      // }
      // err_div.style.display = show_table[d]?"none":"block";
     
      
     
      // show_table[d] = show_table[d]?false:true;
  
      // tableDiv.style.display = show_table[d]?"none":"block";

      // toggle to show/hide table
      // if (show_table[d]) {
      //   show_table[d] = false;
      // }else{
      //   show_table[d] = true;
      // }
      // console.log("TOGGLE SHOW TABLE::", show_table);
      // console.log("TOGGLE SHOW TABLE::", table_wrapper,rel_table_hdr,err_div,rel_table);
     
      
      // if (d == "td") {
      //   if (td_rel_data.length == 0) {
      //     // set_error_msg_rel("*No Term Deposit Related Accounts Found","red");
      //     // td_rel_table.style.display = "none";
      //     // hide the table body and replace the table header to error msg

      //     // document.getElementById("relatedTableDiv").style.display = "none";
      //     return;
      //   }
      //   //show related table div and set height to 50% for above table
        
      //   // d_table[d].style.maxHeight = "50%";
      //   // show page number 
      //   // document.getElementById("page_num_td").innerHTML = page_num_td;
        
        
      // }else if(d == "casa"){
      //   if (dep_rel_data.length == 0){
      //     // set_error_msg_rel("*No CASA Related Accunts Found","red");
      //     // dep_rel_table.style.display = "none";
      //     // document.getElementById("casaRelatedRec").style.display = "none";
      //     return;
      //   }
      //   // set rows
        
      //   // d_table[d].style.maxHeight = "50%";
      //   // document.getElementById("page_num_casa").innerHTML = page_num_casa;
      //   // populate_related_records(dep_rel_data, rel_table,rel_table_hdr);
      // }else if (d == "adv") {
      //   if (adv_rel_data.length == 0){
      //     // set_error_msg_rel("*No Loan Related Accounts Found","red");
      //     // adv_rel_table.style.display = "none";
      //     // document.getElementById("casaRelatedRec").style.display = "none";
      //     return;
      //   }
      //   // set rows
      //   // d_table[d].style.maxHeight = "50%";
      //   // document.getElementById("page_num_adv").innerHTML = page_num_adv;
      //   // populate_related_records(adv_rel_data, rel_table,rel_table_hdr);
      // }


}

function openDescription(t){
  console.log("CSUS DESC:: ",t);
  modal3.style.display = "block";
  modal3.setAttribute("data-backdrop","false");
  table = document.getElementById("modalDataTable3");
  // text = t.replace(".",".\n\n");
  // text = t.replace(/\s+/g, ' ');
  // text = text.replace(/\s+([.,])/g, '$1');
  // text = text.replace(/\s*\/\s*/g, '\n');
  text = t.trim();
  table.innerHTML = `
  <tr>
  <div style="padding:10px;">
  `+
  text
  +`
  </div>
  </tr>
  `;
  span3.onclick = () => {
    modal3.style.display = "none";
    $("#modalDataTable3 tr").remove();
    $("#modalDataTable3z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal3) {
      modal3.style.display = "none";
      $("#modalDataTable3 tr").remove();
      $("#modalDataTable3z tr").remove();
    }
  };
  // document.getElementById('p_text').innerHTML = t;
  // $("#more-ot-alert").fadeIn("fast");
  
  // document.getElementById("close-ot").onclick = (event) => {
  //   $("#more-ot-alert").fadeOut("fast");
  // };
//   window.onclick = (event) => {
//     $("#more-ot-alert").fadeOut("fast");
//   };
}


function append_addresses(line1, line2) {
  let add = "";
  if (line1 != null) {
    add += line1;
  }
  if (line2 != null) {
    add += ", " + line2;
  }
  if (add == "") {
    add = "-";
  }
  return add;
}
function cut_leading_zeros(digits) {
  console.log(typeof digits);
  for (let i = 0; i < digits.length; i++) {
    if (digits[i] != "0") {
      return digits.substring(i);
    }
  }
}
function getErrorMessage() {
  return `-`;
}
function employee_account_format(n){
  if (n == "Y" || n == "E") {
    return "Yes";
  }else{
    return "No";
  }
}
function format_date_fb_adv(date_St){
  console.log("FORMAT DATE ADV", date_St);
  try {
    if (date_St == null || date_St == undefined || date_St == "" || date_St == "") {
      return "-";
    }
    console.log("received relationship date is", date_St);
    let date = new Date(date_St.split("-")[0]);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = String(date.getFullYear());

    const formattedDate = `${day}-${month}-${year}`;
    console.log(formattedDate);
    return formattedDate; 
  } catch (e) {
    console.log("format date error", e);
    return date_St;
  }
}
function format_date(date_St) {
  console.log("FORMAT DATE", date_St);
  try {
    if (date_St == null || date_St == undefined || date_St == "-") {
      return "-";
    }
    if(date_St.includes("Z"))
    {
      date_St=convertUTCStrToLocalDateTime(date_St);
      if(date_St.includes(" "))
      {
        date_St=date_St.split(" ")[0];
        date_St=date_St.replaceAll("/","-");
      }
    }
    console.log("received relationship date is", date_St);
    let date_arr = date_St.split("-");
    console.log("inside format date", date_arr);
    if (date_arr[0].length == 4) {
      if (date_arr[2].length > 2) {
        if (date_arr[2].includes("T")) {
          date_arr[2] = date_arr[2].split("T")[0];
        } else if (date_arr[2].includes(" ")) {
          date_arr[2] = date_arr[2].split(" ")[0];
        }
      }
      return date_arr[2] + "-" + date_arr[1] + "-" + date_arr[0];
    } else if (date_arr[2].length == 4) {
      return date_arr[0] + "-" + date_arr[1] + "-" + date_arr[2];
    } else {
      return "-";
    }
  } catch (e) {
    console.log("format date error", e);
    return date_St;
  }
}
function mask_str(plain_str,type)
{
  if(plain_str=="-")
  {
    return "-";
  }
  else if(type==null)
  {
    let result="";
    for(i=0;i<plain_str.length;i++)
    {
      result+=mask_char;
    }
    return result;
  }
  else if(type=="aadhaar")
  {
    let result="";
    for(i=0;i<plain_str.length;i++)
    {
      if(i<8)
      {
        result+=mask_char;
      }
      else
      {
        result+=plain_str[i];
      }
      if((i%4)==3)

      {
        result+=" ";
      }
    }
    return result;
  }
  else if(type=="card")
  {
    let result="";
    let plain_str_len=plain_str.length
    for(i=0;i<plain_str_len;i++)
    {
      //if((i<6)||((plain_str_len-i)<=4 ))
      if((plain_str_len-i)<=4)
      {
        result+=plain_str[i];
      }
      /*
      else
      {
        result+=mask_char;
      }
      if((i%4)==3)
      {
        result+=" ";
      }
      */
    }
    return result;
  }
  else if(type=="pan")
  {
    let result="";
    let plain_str_len=plain_str.length
    for(i=0;i<plain_str_len;i++)
    {
      if((i<1)||((i>=3)&&(i<5))||((plain_str_len-i)<=2 ))
      {
        result+=plain_str[i];
      }
      else
      {
        result+=mask_char;
      }
    }
    return result;
  }
}
function check_box_click() {
  let chk_box = document.getElementById("range_chkbox").checked;
  if (chk_box) {
    //show range and call range API
    document.getElementById("cheque_range_row").style.display = "table-row";
    document.getElementById("cheque_range_row2").style.display = "table-row";
    document.getElementById("cheque_number_row").style.display = "none";
  } else {
    //show cheque number and call cheque status API
    document.getElementById("cheque_range_row").style.display = "none";
    document.getElementById("cheque_range_row2").style.display = "none";
    document.getElementById("cheque_number_row").style.display = "table-row";
  }
}
function check_box_click_stop_cheque() {
  let chk_box = document.getElementById("stop_range_chkbox").checked;
  if (chk_box) {
    //show range and call range API
    document.getElementById("stop_cheque_range_row").style.display = "table-row";
    document.getElementById("stop_cheque_range_row2").style.display = "table-row";
    document.getElementById("stop_cheque_number_row").style.display = "none";
  } else {
    //show cheque number and call cheque status API
    document.getElementById("stop_cheque_range_row").style.display = "none";
    document.getElementById("stop_cheque_range_row2").style.display = "none";
    document.getElementById("stop_cheque_number_row").style.display = "table-row";
  }
}
function verify() {
  document.getElementById("v_pop_up_backdrop").classList.remove("hide"); //No I18N
  document.getElementById("v_pop_up_backdrop").classList.add("flex-row"); //No I18N
  document.getElementById("cust_verification_pop_up").classList.remove("hide"); //No I18N
  $("body").css("overflow", "hidden");

  //var sess_store = window.sessionStorage;
  //sess_store.setItem("cust_id",'388365000000255187');	//No I18N

  //console.log("calling authentication widget");	//No I18N
  //document.getElementById('verify_loader_table').classList.remove('hide');	//No I18N
  try {
    $("#verify_parent").load("cust_authO.html"); //No I18N
  } catch (err) {
    $("#verify_parent").text("Aww something snapped" + err); //No I18N
    //console.log("Error in loading verify widget");	//No I18N
  }

  //console.log("authentication widget called");	//No I18N
}
function setTimeoutForAnalytics(){}
function close_verification() {
  document.getElementById("v_pop_up_backdrop").classList.add("hide"); //No I18N
  document.getElementById("v_pop_up_backdrop").classList.remove("flex-row"); //No I18N
  document.getElementById("cust_verification_pop_up").classList.add("hide"); //No I18N
  $("body").css("overflow", "auto");
  //console.log("calling authentication widget");	//No I18N
  $("#verify_parent").remove("cust_auth.html"); //No I18N
  //console.log("authentication widget called");	//No I18N
  if (deposit_timer != null) {
    clearTimeout(deposit_timer);
  }
}
function close_verification2() {
  document
    .getElementById("v_success_notification_pop_up")
    .classList.add("hide"); //No I18N
  document
    .getElementById("v_success_notification_pop_up")
    .classList.remove("flex-row"); //No I18N
  document.getElementById("v_pop_up_backdrop").classList.add("hide"); //No I18N
  document.getElementById("v_pop_up_backdrop").classList.remove("flex-row"); //No I18N

  document.getElementById("verify_indicator").innerHTML = "Verified";
  // "<i class='fa fa-check-circle-o'></i> Verified"; //No I18N
  document.getElementById("verify_indicator").classList.remove("verify-btn"); //No I18N
  document.getElementById("verify_indicator").classList.add("verified"); //No I18N
  document.getElementById("verify_indicator").style.marginTop = "-1px"; //No I18N
  document.getElementById("verify_indicator").onclick = ""; //No I18N
}
function close_verification3() {
  document
    .getElementById("v_failure_notification_pop_up")
    .classList.add("hide"); //No I18N
  document
    .getElementById("v_failure_notification_pop_up")
    .classList.remove("flex-row"); //No I18N
  document.getElementById("v_pop_up_backdrop").classList.add("hide"); //No I18N
  document.getElementById("v_pop_up_backdrop").classList.remove("flex-row"); //No I18N
}

const verify_event = new Event("verify_event"); //No I18N
const verification_failure_event = new Event("v_fail_event"); //No I18N
document.addEventListener("verify_event", verification_event_listener); //No I18N
document.addEventListener("v_fail_event", v_fail_event_listener); //No I18N

function v_fail_event_listener(e) {
  //console.log("verify_event caught");	//No I18N
  document.getElementById("cust_verification_pop_up").classList.add("hide"); //No I18N
  //console.log("calling authentication widget");	//No I18N
  $("#verify_parent").remove("cust_auth.html"); //No I18N
  //console.log("authentication widget called");	//No I18N
  document
    .getElementById("v_failure_notification_pop_up")
    .classList.remove("hide"); //No I18N
  document
    .getElementById("v_failure_notification_pop_up")
    .classList.add("flex-row"); //No I18N
  document.getElementById("v_failure_message").textContent =
    "Customer verification failed. Verification logs are stored in authenticated customer module"; //No I18N
  document.getElementById("v_fail_ok_btn").onclick = close_verification3; //No I18N
}
function getRelatedCustomerDetails(custID){
  console.log(custID);
  // get customer Details

  // if (related_cust) return;
  // related_cust = true;

  console.log("Function Called !!!");
  let func_name = "wrapper_related_party";
  let params = { recID: "",custID:custID};
  let span6 = document.getElementById("modal6spanback");
  

  req_data = {
    "url" : "https://ucrmapi.unionbankofindia.co.in/crm/v5/Contacts/"+custID,
    "method" : "GET",
    "param_type" : 1
  }

  document.getElementById("modalDataTable6").style.display = "none";
  span6.style.visibility="visible";
  span6.style.pointerEvents = "auto";
  table = document.getElementById("modalDataTable6z");
  table.style.display = "table";

  let hdr = `<tr class="modalDataCb">
  <th>Name</th>
  <th>Email</th>
  <th>Customer ID</th>
  </tr>`;
  table.innerHTML = hdr;  
  table.innerHTML += `<tr class="modalDataCb">
  <td>${glowLoader}</th>
  <td>${glowLoader}</th>
  <td>${glowLoader}</th>
  </tr>
  <tr class="modalDataCb">
  <td>${glowLoader}</th>
  <td>${glowLoader}</th>
  <td>${glowLoader}</th>
  </tr> `; 

  span6.onclick = () => {
    document.getElementById("modalDataTable6").style.display = "table";
    table.style.display = "none";
    span6.style.visibility="hidden";
    span6.style.pointerEvents = "none";
  };

  ZOHO.CRM.CONNECTION.invoke("zohocrm",req_data).then((res) => {
    console.log("CONNECTION CUST RECORD : ", res);

    // related_cust = false;
    
    if(res.code != "SUCCESS"){
      console.log("Error in API Call", res);
      throw Error(res);
    }

    if( res.details.status != "true"){
      console.log("Error : ", res);
      throw Error(res);
    }

    data = res.details.statusMessage;
    console.log("Related Customer Detail: ",data);

    let hdr = `<tr class="modalDataCb">
        <th>Name</th>
        <th>Email</th>
        <th>Customer ID</th>
        </tr>`;
    table.innerHTML = hdr;

    if (data == "" || data.data.length == 0) {
      table.innerHTML += `<tr colspan=2>-</tr>`;
    }else{
        data = data.data;

        
          val = data[0];
          console.log(val.Full_Name);
          console.log(val.Email);
          console.log(val.CustomerID);
          let row = `
            <tr>
              <td>${val.Full_Name || "-"}</td>
              <td>${val.Email || "-"}</td>
              <td>${val.CustomerID || "-"}</td>
            </tr>
          `;
          table.innerHTML += row;
    }

  }).catch((err) =>{
    console.log("Error in fetching Related Customer Details : ", err);
  });

  // call_crm_function(func_name, params).then((res) => {
  //   document.getElementById("modalDataTable6").style.display = "none";
  //   span6.style.visibility="visible";
  //   span6.style.pointerEvents = "auto";
  //   table = document.getElementById("modalDataTable6z");
  //   table.style.display = "table";
  //   console.log(res);
  //   if(res.code != "success"){
  //     console.log("Error in Related Party function", res);
  //     throw Error(res);
  //   }

  //   data = res.details.output;
  //   console.log("Related Customer Detail: ",data);

  //   let hdr = `<tr class="modalDataCb">
  //       <th>Name</th>
  //       <th>Email</th>
  //       <th>Customer ID</th>
  //       </tr>`;
  //   table.innerHTML = hdr;
  //   if (data == "" || data.length == 0) {
  //     table.innerHTML += `<tr colspan=2>-</tr>`;
  //   }else{
  //     val = JSON.parse(data.trim());
  //     console.log(val);
      
  //     if(val.status_code == 204){
  //       table.innerHTML += `<tr colspan=2>-</tr>`;
  //     }else if(val.status_code == 200){
  //       val = val.f_output;
  //       console.log(val.Full_Name);
  //       console.log(val.Email);
  //       console.log(val.CustomerID);
  //       let row = `
  //         <tr>
  //           <td>${val.Full_Name || "-"}</td>
  //           <td>${val.Email || "-"}</td>
  //           <td>${val.CustomerID || "-"}</td>
  //         </tr>
  //       `;
  //       table.innerHTML += row;
  //     }else{
  //       table.innerHTML += `<tr colspan=2>${val.status_msg}</tr>`;
  //     }
      
      
  //   }
  //   span6.onclick = () => {
  //     document.getElementById("modalDataTable6").style.display = "table";
  //     table.style.display = "none";
  //     span6.style.visibility="hidden";
  //     span6.style.pointerEvents = "none";
  //   };
  // }).catch((err) =>{
  //   span6.onclick = () => {
  //     document.getElementById("modalDataTable6").style.display = "table";
  //     table.style.display = "none";
  //     span6.style.visibility="hidden";
  //     span6.style.pointerEvents = "none";
  //   };
  //   console.log("Error in fetching Related Customer Details : ", err);
  // });
}
// Changes for Related Parties - 310724
function miniStatementOpen(accNo){
  // modal.style.zIndex = 1;
var modal4 = document.getElementById("myModal4");
var span4 = document.getElementById("modal4span");
modal4.style.display="block";
modal4.style.zIndex=100;
document.getElementById("loadingWrapper").style.display = "flex";
let table_id = "modalDataTable4z"; //No I18N
  let table_obj = document.getElementById(table_id);
  table_obj.innerHTML = "";
  let table_body = table_obj;
// table_body.innerHTML = `<tr><td class="crm-style-cell">Coming Soon!</td></tr>`;
let func_name = "Mini_Statement_API";
let params = { accno: accNo };

call_crm_function(func_name, params)
.then((res) => {
  console.log("Mini Statement data",res);

  document.getElementById("loadingWrapper").style.display = "none";
  span4.onclick = () => {
    modal4.style.display = "none";
    $("#modalDataTable4 tr").remove();
    $("#modalDataTable4z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal4) {
      modal4.style.display = "none";
      $("#modalDataTable4 tr").remove();
      $("#modalDataTable4z tr").remove();
    }
  };
  let data = res.details.output;
  // data = data.details.output;
  var table = document.getElementById("modalDataTable4z");
  if (data == "" || data == null) {
    table.innerHTML = `<tr><td>No data Found</td></tr>`;
    document.getElementById("loadingWrapper").style.display = "none";
    return;
  }
  if (data.code == "114") {
    table.innerHTML = `<tr><td>${data.status}</td></tr>`;
    document.getElementById("loadingWrapper").style.display = "none";
    return;
  }
  data = JSON.parse(data);
  if (data.responseCode == "114") {
    table.innerHTML = `<tr><td>${data.status}</td></tr>`;
    document.getElementById("loadingWrapper").style.display = "none";
    return;
  }
  if (data.status == 01 || data.status == "01" || data.responseCode == "991" || data.responseCode == "907") {
    table.innerHTML = `<tr><td>Oops! Something went wrong. Please try again in some time</td></tr>`;
    document.getElementById("loadingWrapper").style.display = "none";
    return;
  }
  console.log("inside mini statement API call back", data);

  let status = data.status;
  //remove existing table rows
  let table_id = "modalDataTable4z"; //No I18N
  let table_obj = document.getElementById(table_id);
  table_obj.innerHTML = "";
  let table_body = table_obj;
  let table_rows = table_body;
  //removing all the rows except header row
  for (let i = 1; i < table_rows.length; i++) {
    table_rows[i].remove();
    i--;
  }
  //populating table
  let lien_json = data.data;

  console.log("lien json inside mini statement call back", lien_json);
  let hdr = `<tr>
                                    <th >Tran ID</th>
                                    <th >Date</th>
                                    <th >Tran Type</th>
                                    <th colspan=2>Particulars</th>
                                    <th >Withdrawal Amount</th>
                                    <th >Deposit Amount</th>
                                    <th >Balance</th>
                         
                                    </tr>`;
  table_body.innerHTML += hdr;
  if (lien_json.length == 0) {
    new_tr_ele = document.createElement("tr"); //No I18N
    new_tr_ele.innerHTML = `<td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          <td class="crm-style-cell">-</td>
          `;
    new_tr_ele.classList.add("crm-style-row"); //No I18N
    table_body.appendChild(new_tr_ele);
  }
  for (let d of lien_json) {
    let dorc = "Credit";
    if (d.drCRIndicator == "D") {
      dorc = "Debit";
    }
    new_tr_ele = document.createElement("tr"); //No I18N
    new_tr_ele.innerHTML = `<td class="crm-style-cell">${d.tranId}</td>
          <td class="crm-style-cell">${format_date(d.tranDate)}</td>
          <td class="crm-style-cell">${d.tranType}/${d.tranSubType}</td>
          <td class="crm-style-cell" colspan=2>${d.tranParticulars}</td>
          <td class="crm-style-cell">${dorc == "Debit"?d.tranAmount:""}</td>
          <td class="crm-style-cell">${dorc == "Credit"?d.tranAmount:""}</td>
          <td class="crm-style-cell">${d.balAfterTran}</td>
          `;
    new_tr_ele.classList.add("crm-style-row"); //No I18N
    table_body.appendChild(new_tr_ele);
  }
  //
  document.getElementById("loadingWrapper").style.display = "none";
  span4.onclick = () => {
    modal4.style.display = "none";
    $("#modalDataTable4 tr").remove();
    $("#modalDataTable4z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal4) {
      modal4.style.display = "none";
      $("#modalDataTable4 tr").remove();
      $("#modalDataTable4z tr").remove();
    }
  };
});

span4.onclick = () => {
  modal4.style.display = "none";
  $("#modalDataTable4 tr").remove();
  $("#modalDataTable4z tr").remove();
};
window.onclick = (event) => {
  if (event.target == modal4) {
    modal4.style.display = "none";
    $("#modalDataTable4 tr").remove();
    $("#modalDataTable4z tr").remove();
  }
};

}
// Changes for Related Parties - 310724
function getRelatedParty(acid){
  // from ACID fetch related customer
  // check whether api is in progress
  // if(related_cust) return;
  // related_cust = true;
  
  console.log(acid);
  let func_name = "wrapper_related_party";
  let params = { recID: acid,custID:""};
  let modal6 = document.getElementById("myModal6");
  let span6 = document.getElementById("modal6span");
  let back6 = document.getElementById("modal6spanback");
  back6.style.visibility="hidden";
  back6.style.pointerEvents="none";
  
  req_data = {
    "url" : "https://ucrmapi.unionbankofindia.co.in/crm/v5/coql",
    "method" : "POST",
    "param_type" : 2,
    "parameters" : { 
      "select_query" : "select id,Customer.Full_Name as Name,Customer.id as c_id,Loan_Account.id as L_id,Loan_Account.Name as L_Acc,Deposit.id as D_id,Deposit.Name as D_Acc,Relationship_Type, Customer.CustomerID as custId  from Related_Accounts where Name = '" + acid + "'"
    }
  };

  modal6.style.display = "block";
  modal6.setAttribute("data-backdrop","false");
  table = document.getElementById("modalDataTable6");
  table.style.display = "table";
  document.getElementById("modalDataTable6z").style.display = "none";
  modal6.style.zIndex = 100;

  let hdr = `<tr class="modalDataCb">
  <th colspan=2>Related Customer</th>
  </tr>`;
  table.innerHTML = hdr;
  table.innerHTML += `<tr class="modalDataCb">
  <td>${glowLoader}</th>
  <td>${glowLoader}</th>
  </tr>
  <tr class="modalDataCb">
  <td>${glowLoader}</th>
  <td>${glowLoader}</th>
  </tr>`;
  
  span6.onclick = () => {
    modal6.style.display = "none";
    $("#modalDataTable6 tr").remove();
    $("#modalDataTable6z tr").remove();
  };

  ZOHO.CRM.CONNECTION.invoke("zohocrm",req_data).then((res) => {
    console.log("CONNECTION RES : ", res);
    // related_cust = false;
    if(res.code != "SUCCESS"){
      console.log("Error in API Call", res);
      throw Error(res);
    }

    if( res.details.status != "true"){
      console.log("Error : ", res);
      throw Error(res);
    }
    
    // table data

    data = res.details.statusMessage;
   
    console.log("Related Customers : ",data);
    let hdr = `<tr class="modalDataCb">
        <th>Related Customer</th>
        <th>Customer ID</th>
        <th colspan='2'>Relationship Type</th>
        </tr>`;
    table.innerHTML = hdr;
    if (data == "" || data.info.count == 0) {
      table.innerHTML += `<tr colspan=2>-</tr>`;
    }else{
        data = data.data;
        let count = 0;
        for(let i=0; i<data.length; i++){
          
          let val = data[i];
          console.log(val);
          if(val.Relationship_Type != "M"){
            let row = `
              <tr class="blue-csus" onclick="getRelatedCustomerDetails('${val.c_id}')">
                <td>
                  ${val.Name}
                </td>
                <td>
                ${val.custId||"-"}
                </td>
                <td colspan="2">
                ${val.Relationship_Type||"-"}
                </td>
              </tr>
            `
            table.innerHTML += row;
          }else count +=1;
        }
        if(count == data.length) table.innerHTML += `<tr colspan=2>-</tr>`;
    }

  }).catch((err) => {
    console.log("Error in calling Related party : ", err);
    // related_cust = false;
  });
  
  // call_crm_function(func_name, params).then((res) => {
  //   console.log(res);

  //   if(res.code != "success"){
  //     console.log("Error : ", res);
  //     throw Error(res);
  //   }

  //   // show small popup
    
  //   modal6.style.display = "block";
  //   modal6.setAttribute("data-backdrop","false");
  //   table = document.getElementById("modalDataTable6");
  //   table.style.display = "table";
  //   document.getElementById("modalDataTable6z").style.display = "none";
  //   modal6.style.zIndex = 3;
    
  //   // table data
    
  //   data = res.details.output;
  //   console.log("Related Customers : ",data);
  //   let hdr = `<tr class="modalDataCb">
  //       <th colspan=2>Related Customer</th>
  //       </tr>`;
  //   table.innerHTML = hdr;
  //   if (data == "" || data.length == 0) {
  //     table.innerHTML += `<tr colspan=2>-</tr>`;
  //   }else{
  //     data = JSON.parse(data.trim());
  //     console.log(data);
  //     if(data.status_code == 204){
  //       table.innerHTML += `<tr colspan=2>-</tr>`;
  //     }else if(data.status_code == 200){
  //       data = data.f_output.data;
  //       let count = 0;
  //       for(let i=0; i<data.length; i++){
          
  //         let val = data[i];
  //         console.log(val);
  //         if(val.Relationship_Type != "M"){
  //           let row = `
  //             <tr class="blue-csus" onclick="getRelatedCustomerDetails('${val.c_id}')">
  //               <td>
  //                 ${val.Name}
  //               </td>
  //               <td></td>
  //             </tr>
  //           `
  //           table.innerHTML += row;
  //         }else count +=1;
  //       }
  //       if(count == data.length) table.innerHTML += `<tr colspan=2>-</tr>`;
  //     }else{
  //       table.innerHTML += `<tr colspan=2>${data.status_msg}</tr>`;
  //     }
      
  //   }
  //   span6.onclick = () => {
  //     modal6.style.display = "none";
  //     $("#modalDataTable6 tr").remove();
  //     $("#modalDataTable6z tr").remove();
  //   };
  //   // <div class="tooltiptextRP">Vehicle Loan Description</div>
  // }).catch((err) => {
  //   console.log("Error in calling Related party : ", err);

  //   span6.onclick = () => {
  //     modal6.style.display = "none";
  //     $("#modalDataTable6 tr").remove();
  //     $("#modalDataTable6z tr").remove();
  //   };
  // });
}
// Changes for Related Parties - 310724
// Popup Toggle
function togglePopupDropdown(breadCrumb) {
  var dropdown = document.querySelector(".dropdown-container");
  dropdown.classList.toggle("active");
}
//
/////
//
function verification_event_listener(e) {
  //console.log("verify_event caught");	//No I18N
  document.getElementById("cust_verification_pop_up").classList.add("hide"); //No I18N
  //console.log("calling authentication widget");	//No I18N
  $("#verify_parent").remove("cust_auth.html"); //No I18N
  //console.log("authentication widget called");	//No I18N
  document
    .getElementById("v_success_notification_pop_up")
    .classList.remove("hide"); //No I18N
  document
    .getElementById("v_success_notification_pop_up")
    .classList.add("flex-row"); //No I18N
  document.getElementById("v_success_message").textContent =
    "Customer verified successfully. Verification logs are stored in authenticated customer module"; //No I18N
  document.getElementById("v_ok_btn").onclick = close_verification2; //No I18N
  document.getElementById("mainBody").style.overflowY = "auto";
  show_tabs_on_verification(true);
}

async function focus_close_side_bar_arrow(parent) {
  console.log("focus close side bar");
  parent.style.opacity = 1; //No I18N
}

async function unfocus_close_side_bar_arrow(parent) {
  console.log("unfocus close side bar");

  parent.style.transition = "opacity 0.5s";
  parent.style.opacity = 0.5; //No I18N
}

async function close_side_bar(parent) {
  let tact = parent.getAttribute("tact"); //No I18N
  if (tact == "close") {
    // console.log("opened");
    // document.getElementsByClassName("ctperinfsvc").style = "width: 50vw; height: 392px;"
    var styl = `
    display: flex;
    flex-direction: row;
    width: 100%;
    transition: 2s
    `;

    var styl1 = `
    transition:1s
    `;

    // document.getElementById("row1").style = styl;
    // document.getElementById("row2").style = styl;
    // document.getElementById("row3").style = styl;
    // document.getElementById("row4").style = styl;

    //No I18N
    parent.setAttribute("tact", "open"); //No I18N
    // document.getElementById('main_side_nav').style=`width:0px; transition:1s`; 	//No I18N

    document.getElementById("main_side_nav").classList.remove("slide-right"); //No I18N
    document.getElementById("main_side_nav").classList.add("slide-left"); //No I18N
    // document.getElementById("main_side_nav").style =
    console.log(parent.classList[0]);
    if (parent.classList[0] != "sidenav-close-btn-1") {
      parent.classList.remove("slide-right"); //No I18N
      parent.classList.add("slide-left"); //No I18N
    }
    document.getElementById("arrow_icon").classList.remove("fa-chevron-left"); //No I18N
    document.getElementById("arrow_icon").classList.add("fa-chevron-right"); //No I18N
    parent.style.opacity = 0.5; //No I18N
    //document.getElementById('main_side_nav').style.width='0px';	//No I18N
    await new Promise((resolve) => setTimeout(resolve, 150));
    // document.getElementById("verNavDiv").style = styl1;
    // document.getElementById("main_section").style = styl1;
    // document.getElementsByClassName("main-without-left").style = styl1;
    document.getElementById("main_section").classList.remove("main"); //No I18N
    document.getElementById("main_section").classList.add("main-without-left"); //No I18N
    // document.getElementById("SRChild").classList.remove("SrContainer"); //No I18N
    // document.getElementById("SRChild").classList.add("SrContainer-left"); //No I18N

    document.getElementById("sr_op").classList.add("full-width"); //No I18N
    let op_sections = document.getElementsByClassName("sr-output-section"); //No I18N
    for (i = 0; i < op_sections.length; i++) {
      op_sections[i].classList.add("full-width"); //No I18N
    }
    let tables = document.getElementsByClassName("crm-style-table"); //No I18N
    for (i = 0; i < tables.length; i++) {
      tables[i].classList.add("full-width"); //No I18N
    }
  } else {
    var styl = `
    display: flex;
    flex-direction: row;
    width: 100%;
    transition:1.2s
    `;

    var styl1 = `
    transition:1.2s
    `;

    // document.getElementById("row1").style = styl;
    // document.getElementById("row2").style = styl;
    // document.getElementById("row3").style = styl;
    // document.getElementById("row4").style = styl;

    // document.getElementsByClassName("ctperinfsvc").style = "width: 10vw; height: 392px;"
    parent.setAttribute("tact", "close"); //No I18N
    // document.getElementById('main_side_nav').style=`width:400px; transition:1s`; 	//No I18N
    document.getElementById("main_side_nav").classList.remove("slide-left"); //No I18N
    document.getElementById("main_side_nav").classList.add("slide-right"); //No I18N
    if (parent.classList[0] != "sidenav-close-btn-1") {
      parent.classList.remove("slide-left"); //No I18N
      parent.classList.add("slide-right"); //No I18N
    }

    document.getElementById("arrow_icon").classList.remove("fa-chevron-right"); //No I18N
    document.getElementById("arrow_icon").classList.add("fa-chevron-left"); //No I18N
    parent.style.opacity = 1;
    await new Promise((resolve) => setTimeout(resolve, 150));
    // document.getElementById("verNavDiv").style = styl1;
    // document.getElementById("main_section").style = styl1;
    // document.getElementsByClassName("main").style = styl1;
    document.getElementById("main_section").classList.add("main"); //No I18N
    document
      .getElementById("main_section")
      .classList.remove("main-without-left"); //No I18N
    // document.getElementById("SRChild").classList.add("SrContainer"); //No I18N
    // document.getElementById("SRChild").classList.remove("SrContainer-left"); //No I18N
    document.getElementById("sr_op").classList.remove("full-width"); //No I18N
    let tables = document.getElementsByClassName("crm-style-table"); //No I18N
    for (i = 0; i < tables.length; i++) {
      tables[i].classList.remove("full-width"); //No I18N
    }
    let op_sections = document.getElementsByClassName("sr-output-section"); //No I18N
    for (i = 0; i < op_sections.length; i++) {
      op_sections[i].classList.remove("full-width"); //No I18N
    }
    //
  }
  let vertical_navigation=document.getElementById('verNavDiv');
  vertical_navigation.classList.toggle('pad-vernav');
}

//Change by Adi
Date.prototype.today = function () {
  return (
    (this.getDate() < 10 ? "0" : "") +
    this.getDate() +
    "/" +
    (this.getMonth() + 1 < 10 ? "0" : "") +
    (this.getMonth() + 1) +
    "/" +
    this.getFullYear()
  );
};

//Change by Adi
Date.prototype.timeNow = function () {
  return (
    (this.getHours() < 10 ? "0" : "") +
    this.getHours() +
    ":" +
    (this.getMinutes() < 10 ? "0" : "") +
    this.getMinutes() +
    ":" +
    (this.getSeconds() < 10 ? "0" : "") +
    this.getSeconds()
  );
};
//End of Change
//----------------------------------------------------------------------------------------------------------------------------
ZOHO.embeddedApp.on("PageLoad", (data) => {
  document.getElementById("mainDisplayDiv").appendChild(document.getElementById("outboundCallChild"));
  console.log("invoking logged-in user");
  get_logged_in_user();
  //load configuration files
  loadConfigFiles();
  let vertical_navigation=document.getElementById('verNavDiv');
  vertical_navigation.classList.toggle('pad-vernav');
  //activating sr table loaders
  block_mobiles();
  let t_l = ["tbladvdtb", "tbldepdtbcs", "tbldepdtbtd", "tblbgrdtb"];
  add_loader_to_table(t_l);
  load_fields();

  show_tabs_on_verification(false);

  // show_tabs_on_verification(true); //testing
  poll_deposits_for_SR_pops();
  let current_home_id = "addrLink";
  let current_home_elem = document.getElementById(current_home_id);
  displayNav(current_home_elem);
  //SR table loaders
  /*
  let table_loaders = document.getElementsByClassName("sr-tb-loader");
  for (i = 0; i < table_loaders.length; i++) {
    table_loaders[i].classList.remove("hide_tab_imp");
  }
  */
  // SR table skeletons hiding
  /*
  let tables = document.getElementsByClassName("sr-tb");
  for (i = 0; i < tables.length; i++) {
    tables[i].classList.add("hide");
  }
  */
  //

  //change by Adi

  let time_stamps = document.getElementsByClassName("time-stamp");
  let current_date_time = new Date().today() + " " + new Date().timeNow();
  for (let ts of time_stamps) {
    ts.innerHTML = current_date_time;
  }
  //account dropdowns loader
  /*
  let drop_boxes=document.getElementsByClassName('drop-box');
  for(i=0;i<drop_boxes.length;i++)
  {
    drop_boxes[i].innerHTML+=block_loader_html;
    drop_boxes[i].classList.add('no-border'); //border: 2px solid #3c9df7;
  }
  let sr_tables=document.getElementsByClassName('crm-style-table');
  for(i=0;i<sr_tables.length;i++)
  {
    sr_tables[i].innerHTML+=table_loader_html;
    sr_tables[i].classList.add('no-border');
    // drop_boxes[i].style.border="none"; //border: 2px solid #3c9df7;
  }
  */
  //End of change
  console.log("invoked data is", data);
  if (data.c_id != null) {
    rid = [data.c_id];
    is_cust_fetched = true;
  } else if (data.cust_id != null) {
    console.log("cust id present");
    let base_url = `https://ucrmapi.unionbankofindia.co.in/crm/v2/Contacts/search?criteria=(CustomerID:equals:${data.cust_id})`;
    let req_data = {
      method: "GET",
      url: base_url,
    };
    ZOHO.CRM.CONNECTION.invoke("zohocrm", req_data)
      .then((data) => {
        console.log("fetch customer data is", data);
        if (data.code == "SUCCESS") {
          if (data.details.status == "true") {
            let c_data = data.details.statusMessage.data;
            let particular_customer = c_data[0];
            rid = [particular_customer.id];
            console.log("customer record id fetched", rid);
            is_cust_fetched = true;

            load_cust_data();
          } else {
            console.log("connection failed while getting customer data", data);
            is_cust_fetched = true;
            // rid = [1068000482088246]; //Dinil Joseph
            // rid = [1068001170603209]; //TEST 1
            // rid = [1068000671640386]; //Ashish Kumar
            // write error log module
            write_to_error_log_module("Customer search API using CUSTOMER ID",data);
            load_cust_data();
          }
        } else {
          console.log("connection failed while getting customer data", data);
          is_cust_fetched = true;
          // rid = [1068000482088246]; //Dinil Joseph
          // rid = [1068001170603209]; //TEST 1
          // rid = [1068000671640386]; //Ashish Kumar
          load_cust_data();
          // write error log module
          write_to_error_log_module("Customer search API using CUSTOMER ID",data); 
        }
      })
      .catch((err) => {
        console.log("error in fetching customer with cust id", err);
        is_cust_fetched = true;
        // rid = [1068000482088246]; //Dinil Joseph
        // rid = [1068001170603209]; //TEST 1
        // rid = [1068000671640386]; //Ashish Kumar
        // load_cust_data();
        // write error log module
        write_to_error_log_module("Customer search API using CUSTOMER ID",err);

      });
  } else {
    // rid=[1068000745194245]; //Neel
    // rid= [1068001166096736]; //Nitu Devi
    // rid = [1068000482088246]; //Dinil Joseph
    // rid = [1068001170603209]; //TEST 1
    // rid = [1068000671640386]; //Ashish Kumar
    // rid = [1068000533201521]; //Standing inst
    // rid= [1068000310299571] //Exalt Engineering
    redirect_to_cust_searh();
    is_cust_fetched = true;
    // write error log module
    write_to_error_log_module("Customer search API using CUSTOMER ID",data);
  }

  console.log("rid is ", rid);
  console.log("Page load data is ", data);
  // idstr.setItem("id",rid);
  // console.log("ID: " + rid);
  // await ZOHO.embeddedApp.init();
  ZOHO.CRM.UI.Resize({
    height: "90%",
    width: "90%",
  }).then((d) => {
    console.log("resize result", d);
  });

  if (is_cust_fetched) {
    load_cust_data();
  }

  /*

  ZOHO.CRM.API.getRelatedRecords({
    Entity: "Contacts",
    RecordID: rid,
    RelatedList: "Deals",
  })
    .then((data) => {
      stadat = data.data;

      buildTable(stadat);
      buildTablee(stadat);

      function buildTable(data) {
        if (document.getElementById("tbloprrdt") != null) {
          var table = document.getElementById("tbloprrdt");
          // table.style.display = "block";
          for (var i = 0; i < data.length; i++) {
            if (
              data[i].Status != "Closed" &&
              data[i].Product1 != "Credit Card"
            ) {
              var row = `<tr  class="opdat" id="${
                data[i].id
              }" onclick="oprClk(this)">
                            <td>${data[i].id || "-"}</td>
                            <td>${data[i].Deal_Name || "-"}</td>
                            <td>${data[i].Amount || "-"}</td>
                            <td>${data[i].Closing_Date || "-"}</td>
                                    <td>${data[i].Account_Number || "-"}</td>
                            <td>${data[i].Product1 || "-"}</td>
                            <td>${data[i].Branch || "-"}</td>
                                    <td>${data[i].Status || "-"}</td>
                          </tr>`;
              table.innerHTML += row;
            }
          }
        }
      }

      function buildTablee(data) {
        if (document.getElementById("tbloprrdtb") != null) {
          var table = document.getElementById("tbloprrdtb");

          for (var i = 0; i < data.length; i++) {
            if (
              data[i].Status == "Closed" ||
              data[i].Product1 == "Credit Card"
            ) {
              var row = `<tr id="${data[i].id}" onclick="oprClk(this)">
                              <td>${data[i].id || "-"}</td>
                            <td>${data[i].Deal_Name || "-"}</td>
                            <td>${data[i].Amount || "-"}</td>
                            <td>${data[i].Closing_Date || "-"}</td>
                                    <td>${data[i].Account_Number || "-"}</td>
                            <td>${data[i].Product1 || "-"}</td>
                            <td>${data[i].Branch || "-"}</td>
                                    <td>${data[i].Status || "-"}</td>
                              </tr>`;
              table.innerHTML += row;
            }
          }
        }
      }
    })
    .catch((error) => {
      console.log(error);
    });
     
     */
});
function load_photo(){
  let API_url="https://ucrmapi.unionbankofindia.co.in/crm/v2/Contacts/"+rid[0]+"/photo";
  let req_data = {
    method: "GET",
    url: API_url,
  };
  call_crm_function("get_record_image",{record_id:rid[0]}).then((d)=>{
    try{
      console.log("Base64 string is",d.details.output);
      let api_resp=JSON.parse(d.details.output);
      let file_type=api_resp.image_type;
      const base64Data=api_resp.base64_str;
      const byteCharacters = atob(base64Data);
      const byteNumbers = new Array(byteCharacters.length);
      for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
      }

      document.getElementById('userimg').classList.add("img-preload");
      const byteArray = new Uint8Array(byteNumbers);
      const img_blob = new Blob([byteArray], {type: "image/"+file_type});
      // const base64 = await fetch(base64Data);
      // let img_blob=new Blob(d.details.output,{type:'imgae/png'});
      let img_url=URL.createObjectURL(img_blob);
      document.getElementById('userimg').src=img_url;
      document.getElementById('userimg').classList.add("img-loaded");
      
      }
      catch(e)
      {
        console.log("cannot render image",e);
        if (stadat[0].Custo_Class == "Corporate") {
          document.getElementById("userimg").setAttribute("src","images/corporate.png");
        }else{
          if (stadat[0].Gender == "Female") {
            document.getElementById("userimg").setAttribute("src","images/fuser.png");
          }
          else{
            document.getElementById("userimg").setAttribute("src","images/muser.png");
          }
        }
      }
    
  })
  
}
function load_customer_info(){

  service_table = document.getElementById("ctsvcinf");
  table = document.getElementById("ctaddrinf");
//   <!-- <tr>
//   <td class="tabdatt">Relationship Duration*</td>
//   <td class="tabdat" id="ctreldur"></td>
// </tr> -->
RetailorCorp = document.getElementById("ctrtcorp2").innerHTML || "";
if (RetailorCorp != "" ) {
  console.log("CUSTOMERR IS ::",RetailorCorp);
  if (RetailorCorp == "Retail") {
    table.innerHTML += `
<tr>
  <td class="tabdatt">Date of Birth/Incorporation</td>
  <td class="tabdat" id="ctdobincrp"></td>
  <td class="tabdatt">Minor Flag</td>
  <td class="tabdat" id="ctmnrflg"></td>
</tr>
<tr>
  <td class="tabdatt">Residential Status</td>
  <td class="tabdat" id="ctressts"></td>
  <td class="tabdatt">Senior Citizen</td>
  <td class="tabdat" id="ctsnrctzn"></td>
</tr>
<tr>
  <td class="tabdatt">Aadhaar</td>
  <td class="tabdat" id="ctaadhar"></td>
  <td class="tabdatt">PAN</td>
  <td class="tabdat" id="ctpan"></td>
</tr>
<tr>
  <td class="tabdatt">Marital Status</td>
  <td class="tabdat" id="ctmrtlsts"></td>
  <td class="tabdatt">Occupation</td>
  <td class="tabdat" id="ctoccupation"></td>
</tr>
<tr>
 <td class="tabdatt">Community</td>
  <td class="tabdat" id="ctcommunity"></td>
  <td class="tabdatt">Caste</td>
  <td class="tabdat" id="ctcaste"></td>
</tr>
<tr>
  <td class="tabdatt">RAROC</td>
  <td class="tabdat" id="ctraroc2"></td>
  <td class="tabdatt">Annual Income</td>
  <td class="tabdat" id="ctannlincm"></td>
</tr>
<tr>
  <td class="tabdatt">CRV</td>
  <td class="tabdat" id="ctcrv2"></td>
  <td class="tabdatt">Internal Credit Rating (Retail)</td>
  <td class="tabdat" id="ctintrcrdratret"></td>
</tr>
  <tr>
  
  <td class="tabdatt">NPA History</td>
  <td class="tabdat" id="ctnpahist" ></td>
  <td class="tabdatt" >Employee Account</td>
  <td class="tabdat" id="ctempflg" ></td>
  </tr>

  <tr>
  
  <td class="tabdatt">NRI Flag</td>
  <td class="tabdat" id="ctnriflag" ></td>
  <td class="tabdatt" >Fatca Declaration Taken</td>
  <td class="tabdat" id="ctfactdecltaken" ></td>
  </tr>
  <tr>
  
  <td class="tabdatt">SMS Alert Minimum Credit</td>
  <td class="tabdat" id="ctnsmsalertmincredit1" ></td>
  <td class="tabdatt" >SMS Alert Minimum Debit</td>
  <td class="tabdat" id="ctnsmsalertmindebit1" ></td>
  </tr>
  `;
  //change for adding new fields
  // show hide retail services
  service_table.innerHTML = `
    <tr>
    <th colspan="4">Services Availed</th>
  </tr>
  <tr>
    <td class="tabdatt">Locker</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="Locker" id="ctlck" class="ctsvincdlk"></a>
    </td>
    <td class="tabdatt">Credit Card</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="Credit Card" id="ctcrdcd" class="ctsvincdlk"></a>
    </td>
  </tr>
  <tr>
    <td class="tabdatt">Internet Banking</td>
    <td class="tabdat"><a href="javascript:void(0)" title="Internet Banking" id="ctintbk"
        class="ctsvincdlk"></a></td>
    <td class="tabdatt" >BQR</td>
    <td class="tabdat" >
      <a href="javascript:void(0)" title="BQR" id="ctbqr" class="ctsvincdlk"></a>
    </td>
  </tr>
  <tr>
    <td class="tabdatt">Demat A/C</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="Demat A/C" id="ctdmac" class="ctsvincdlk"></a>

    </td>
    <td class="tabdatt" >FastTag</td>
    <td class="tabdat" >
      <a href="javascript:void(0)" title="FastTag" id="ctfstag" class="ctsvincdlk"></a>
    </td>
  </tr>
  <tr>
    <td class="tabdatt">Cheque Book</td>
    <td class="tabdat"><a href="javascript:void(0)" title="Cheque Book" id="ctchqbk"
        class="ctsvincdlk">true</a></td>
    <td class="tabdatt">Debit Card</td>
    <td class="tabdat"><a href="javascript:void(0)" title="Debit Card" id="ctdbtcd" class="ctsvincdlk"></a>
    </td>
  </tr>
  <tr style="display: none;">
    <td class="tabdatt">SMS Banking</td>
    <td class="tabdat">
      <!-- <a href="javascript:void(0)" title="SMS Banking" id="ctsmsbk" class="ctsvincdlk"></a> -->
      Coming Soon
    </td>
    <td class="tabdatt">Govt. Business Product</td>
    <td class="tabdat">
      <!-- <a href="javascript:void(0)" title="Govt. Business Product" id="ctgtbpd" class="ctsvincdlk"></a> -->
      Coming Soon
      </td>
  </tr>
  <tr>
    <td class="tabdatt">Mutual Funds</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="Mutual Funds" id="ctmtfd" class="ctsvincdlk"></a>
    </td>
    <td class="tabdatt" >Life Insurance</td>
    <td class="tabdat" >
      <a href="javascript:void(0)" title="Life Insurance" id="ctlfinc" class="ctsvincdlk"></a>

      </td>
  </tr>
  <tr >
    <td class="tabdatt">Health Insurance</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="Health Insurance" id="cthtinc" class="ctsvincdlk"></a>

    </td>
    <td class="tabdatt" >General Insurance</td>
    <td class="tabdat" >
      <a href="javascript:void(0)" title="General Insurance" id="ctgninc" class="ctsvincdlk"></a>
      
    </td>
  </tr>
  <tr>
    <td class="tabdatt">VYOM</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="Mobile Banking" id="ctmobbank" class="ctsvincdlk"></a>

    </td>
    <td class="tabdatt">SMS Banking</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="SMS Banking" id="ctsmsbk" class="ctsvincdlk"></a>
    </td>
  </tr>

    `;
console.log("CUSTOMER IS RETAIL");
  }else if (RetailorCorp == "Corporate") {
    table.innerHTML += `<tr>
    <td class="tabdatt">Date of Birth/Incorporation</td>
    <td class="tabdat" id="ctdobincrp"></td>
    <td class="tabdatt">PAN</td>
  <td class="tabdat" id="ctpan"></td>
  </tr>
  <td class="tabdatt">Occupation</td>
  <td class="tabdat" id="ctoccupation"></td>
  <td class="tabdatt">Networth</td>
  <td class="tabdat" id="ctntwrth"></td>
</tr>
<tr>
  <td class="tabdatt">Internal Credit Rating (Corporate)</td>
  <td class="tabdat" id="ctintrcrdratcorp"></td>
  <td class="tabdatt">KYC Date</td>
  <td class="tabdat" id="ctkyc"></td>
</tr>
<tr>
  <td class="tabdatt">RAROC</td>
  <td class="tabdat" id="ctraroc2"></td>
  <td class="tabdatt" >Employee Account</td>
  <td class="tabdat" id="ctempflg" ></td>
</tr>
<tr>
  
  <td class="tabdatt">NRI Flag</td>
  <td class="tabdat" id="ctnriflag" ></td>
  <td class="tabdatt" >Fatca Declaration Taken</td>
  <td class="tabdat" id="ctfactdecltaken" ></td>
  </tr>
  <tr>
  
  <td class="tabdatt">SMS Alert Minimum Credit</td>
  <td class="tabdat" id="ctnsmsalertmincredit1" ></td>
  <td class="tabdatt" >SMS Alert Minimum Debit</td>
  <td class="tabdat" id="ctnsmsalertmindebit1" ></td>
  </tr>
<tr>
    
    <td class="tabdatt">NPA History</td>
  <td class="tabdat" id="ctnpahist" ></td>
  <td class="tabdatt"></td>
    <td class="tabdat" ></td>
  </tr>
  <tr>
    
    <td class="tabdatt"></td>
  <td class="tabdat"></td>
  <td class="tabdatt"></td>
    <td class="tabdat" ></td>
  </tr>
  <tr>
    
  <td class="tabdatt"></td>
  <td class="tabdat"></td>
  <td class="tabdatt"></td>
    <td class="tabdat" ></td>
  </tr>
  <tr>
    

  <td class="tabdatt"></td>
    <td class="tabdat" ></td>
  <td class="tabdatt"></td>
    <td class="tabdat" ></td>
  </tr>
  `;
  service_table.innerHTML = `
  <tr>
    <th colspan="4">Services Availed</th>
  </tr>

  <tr>
    <td class="tabdatt">Internet Banking</td>
    <td class="tabdat"><a href="javascript:void(0)" title="Internet Banking" id="ctintbk"
        class="ctsvincdlk"></a></td>
    <td class="tabdatt">Cheque Book</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="Cheque Book" id="ctchqbk" class="ctsvincdlk">true</a>
    </td>
  </tr>
  <tr>
    <td class="tabdatt">POS</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="POS" id="ctpos" class="ctsvincdlk"></a>
    </td>
    <td class="tabdatt" >FastTag</td>
    <td class="tabdat" >
      <a href="javascript:void(0)" title="FastTag" id="ctfstag" class="ctsvincdlk"></a>
    </td>
  </tr>

  
  <tr>
    <td class="tabdatt">Mutual Funds</td>
    <td class="tabdat">
      <a href="javascript:void(0)" title="Mutual Funds" id="ctmtfd" class="ctsvincdlk"></a>
    </td>
    <td class="tabdatt" >General Insurance</td>
    <td class="tabdat" >
      <a href="javascript:void(0)" title="General Insurance" id="ctgninc" class="ctsvincdlk"></a>
      
    </td>
  </tr>
 

  <tr >
    <td class="tabdatt" >BQR</td>
    <td class="tabdat" >
      <a href="javascript:void(0)" title="BQR" id="ctbqr" class="ctsvincdlk"></a>
    </td>
    
    <td class="tabdatt" ></td>
    <td class="tabdatt" ></td>
  </tr>
  `;  
  console.log("CUSTOMER IS CORP");
}
}
// table.innerHTML += `
// <tr>
//     <td class="tabdatt">Interest Income</td>
//     <td class="tabdat" id="ctintincm"></td>
//     <td class="tabdatt">Non Interest Income</td>
//   <td class="tabdat" id="ctnnintincm"></td>
//   </tr>
// <tr>
//     <td class="tabdatt">Sanction Limit (CC/OD)</td>
//     <td class="tabdat" id="ctsanclmtwc"></td>
//     <td class="tabdatt">Sanction Limit (TL)</td>
//   <td class="tabdat" id="ctsanclmttl"></td>
//   </tr>
// <tr>
//     <td class="tabdatt">Total Sanction Limit (LC)</td>
//     <td class="tabdat" id="ctttlsanclmtlc"></td>
//     <td class="tabdatt">Sanction Limit (BG)</td>
//   <td class="tabdat" id="ctsanclmtbg"></td>
//   </tr>
// `;
let row = `  
  <tr>
  <td class="tabdatt">Residential Status</td>
  <td class="tabdat" id="ctressts"></td>
  <td class="tabdatt">PAN</td>
  <td class="tabdat" id="ctpan"></td>
</tr>
<tr style="display: none;">
  <td class="tabdatt">State</td>
  <td class="tabdat" id="ctstate0"></td>

  <td class="tabdatt">Customer Status*</td>
  <td class="tabdat" id="ctcststs"></td>
</tr>
<tr>
  <td class="tabdatt">Aadhaar</td>
  <td class="tabdat" id="ctaadhar"></td>
  <td class="tabdatt">Occupation</td>
  <td class="tabdat" id="ctoccupation"></td>
</tr>
<tr>
  <td class="tabdatt">Marital Status</td>
  <td class="tabdat" id="ctmrtlsts"></td>
  <td class="tabdatt">Caste</td>
  <td class="tabdat" id="ctcaste"></td>
</tr>
<tr>
 <td class="tabdatt">Community</td>
  <td class="tabdat" id="ctcommunity"></td>
  <td class="tabdatt">Annual Income</td>
  <td class="tabdat" id="ctannlincm"></td>
</tr>
<tr>
  <td class="tabdatt">Networth</td>
  <td class="tabdat" id="ctntwrth"></td>
  <td class="tabdatt">Stress Category*</td>
  <td class="tabdat" id="ctstrsscat"></td>
</tr>
<tr>
  <td class="tabdatt">Risk Category*</td>
  <td class="tabdat" id="ctrskcat"></td>
  <td class="tabdatt">CRV</td>
  <td class="tabdat" id="ctcrv2"></td>
</tr>
<tr style="display: none;">
  <td class="tabdatt">Interest Income</td>
  <td class="tabdat" id="ctintrincm"></td>
  <td class="tabdatt">Non Interest Income (Charges taken)</td>
  <td class="tabdat" id="ctnonintrincm"></td>
</tr>
<tr style="display: none;">
  <td class="tabdatt">CSAT Score</td>
  <td class="tabdat" id="ctcsat"></td>
</tr>
<tr>
  <td class="tabdatt">RAROC</td>
  <td class="tabdat" id="ctraroc2"></td>
  <td class="tabdatt">Internal Credit Rating (Retail)</td>
  <td class="tabdat" id="ctintrcrdratret"></td>
</tr>
<tr>
  <td class="tabdatt">Internal Credit Rating (Corporate)</td>
  <td class="tabdat" id="ctintrcrdratcorp"></td>
  <td class="tabdatt">KYC Date*</td>
  <td class="tabdat" id="ctkyc"></td>
</tr>`;

  
}
function call_deposits_resolve_service(module){
  // clearInterval(checkIntervalForServicesinLiab);
  RetailorCorp = document.getElementById("ctrtcorp2").innerHTML || "";
  if (module == "dep") {
    console.log("searching liabilities for services availed",new_deposits);
    let d = new_deposits;
    if (d.length == 0) {
      //show no deposits yet on the screen.
      console.log("liabilities is empty", d);
      // resolve_services_availed();
      set_resolved[module] = true;
      console.log("SET RESOLVED::",set_resolved);
      return;
    }
    let chqbk = 0
    let passbk = 0
    let dbtcrd = 0
    console.log("FOR DATA:::", d);
    for (let i = 0; i < d.length; i++) {
      console.log("CHEQUE BOOK",d[i].Cheque_Book,"Debit Card",d[i].Debit_Card,d[i]);
      console.log("tt");
      if (d[i].Cheque_Book == "true") {
        //make the associated element true
        document.getElementById("ctchqbk").innerHTML = "true";
        chqbk = 1;
      }if (d[i].Debit_Card == "true" && RetailorCorp == "Retail") {
          //make the associated element true1
          document.getElementById("ctdbtcd").innerHTML = "true";
          // services_availed++;
          dbtcrd = 1;
        }
      }
    if (chqbk) {
      console.log("CALL CHQ Book");
      services_availed++;
    }if (dbtcrd) {
      console.log("CALL DBT CRD");
      services_availed++;
    }
    
  }else{
    console.log("searching advances for services availed",new_advances);
    let d = new_advances;
    let chqbk = 0
    if (d.length == 0) {
      //show no deposits yet on the screen.
      console.log("liabilities is empty", d);
      // resolve_services_availed();
      set_resolved[module] = true;
      console.log("SET RESOLVED::",set_resolved);
      return;
    }
    for (let i = 0; i < d.length; i++) {
      console.log("CHEQUE BOOK PB AND DBT CARD",typeof( d[i].Cheque_Availed), d[i].Cheque_Availed);
      console.log("tt");
      if (d[i].Cheque_Availed == "true" && document.getElementById("ctchqbk").innerHTML != "true") {
        //make the associated element true
        document.getElementById("ctchqbk").innerHTML = "true";
        chqbk = 1;
      } 
      
    }
    if (chqbk) {
      console.log("CALL CHQ Book");
      services_availed++;
    }
  }
  
  set_resolved[module] = true;
  console.log("SET RESOLVED::",set_resolved);
  // resolve_services_availed();
}
function load_cust_data() {
  // load_photo();
  let base_url =
    "https://ucrmapi.unionbankofindia.co.in/crm/v2/Contacts/" + rid;
  let req_data = {
    method: "GET",
    url: base_url,
  };
  ZOHO.CRM.CONNECTION.invoke("zohocrm", req_data)
    // ZOHO.CRM.API.getRecord({ Entity: "Contacts", RecordID: rid })
    .then(async (data) => {
      stadat = data.details.statusMessage.data;
      console.log("DATA LOADED",data);

      //data for communication logs in whatsapp - sms feature
      communicationLogs=stadat[0].Communication_Logs;
      ds_record_id = stadat[0].Desk_Record_Id || "";
      desk_created_contact_id=ds_record_id;
      last_name_for_desk = stadat[0].Full_Name || "";
      customerFullName=stadat[0].Full_Name;
      ds_cust_id = stadat[0].CustomerID;
      phone_for_desk=stadat[0].Phone;
      first_name_for_desk=stadat[0].First_Name;
      middle_name_for_desk=stadat[0].Middle_Name;
      last_name_for_desk=stadat[0].Last_Name;
      mail_for_desk=stadat[0].Email; 
      desk_contat_data = {
        "Last_Name_Finacle":stadat[0].Last_Name_Finacle,
        "Home_Country":stadat[0].Home_Country,
        "Home_City":stadat[0].Home_City,
        "Home_State":stadat[0].Home_State,
        "Home_ZIP":stadat[0].Home_ZIP,
        "Customer_Title":stadat[0].Customer_Title,
        "HOME_ADDRESS_LINE1":stadat[0].HOME_ADDRESS_LINE1,
        "HOME_ADDRESS_LINE2":stadat[0].HOME_ADDRESS_LINE2,
        "Resident_Status":stadat[0].Resident_Status,
      }
      console.log("DESK RECORD ID", ds_record_id);
      // if (ds_record_id != "") {
      //   let desk_base_url = "https://service.unionbankofindia.co.in/api/v1/contacts/"+ds_record_id;
      //   let desk_req_data = {
      //     "method":"GET",
      //     "url":desk_base_url,
      //   };
      //   ZOHO.CRM.CONNECTION.invoke("zohodesk",desk_req_data).then(function(desk_data){
      //     console.log("contact from desk data",desk_data);
      //     crm_desk_id=desk_data;

      //   })
      //   .catch((error)=>{
      //     console.log("desk contact search error",error);
      //     // write error log module
      //     write_to_error_log_module("Desk contanct search API",error);
      //   })
      // }
      // if(ds_cust_id != "" && ds_cust_id != " " && ds_cust_id != null)
      // {
      //   let desk_base_url = "https://service.unionbankofindia.co.in/api/v1/contacts/search?limit=1&customField1=cf_customer_id:"+ds_cust_id;
      //   let desk_req_data = {
      //     "method":"GET",
      //     "url":desk_base_url,
      //   };
      //   ZOHO.CRM.CONNECTION.invoke("zohodesk",desk_req_data).then(function(desk_data){
      //     console.log("contact from desk data",desk_data);
      //     desk_contact_id=desk_data.details.statusMessage.data[0].id;
      //     if(desk_data.details.statusMessage == "" || desk_data.details.statusMessage == " ")
      //     {
      //        console.log("creating a contact in desk");
      //        let desk_create_contact_base_url = "https://service.unionbankofindia.co.in/api/v1/contacts";
      //        let desk_create_contact_req_data = {
      //         "parameters":{
      //           "lastName":stadat[0].Last_Name,                
      //           "firstName":stadat[0].First_Name,
      //           "mobile":stadat[0].Mobile,
      //           "country":stadat[0].Home_Country,                
      //           "zip":stadat[0].Home_ZIP,
      //           "city":stadat[0].Home_City,
      //           "email":stadat[0].Email,
      //           "state":stadat[0].Home_State,
      //           "phone":stadat[0].Phone,

      //           "cf":{
      //             "cf_customer_title":stadat[0].Customer_Title,
      //             "cf_middle_name":stadat[0].Middle_Name,
      //             "cf_last_name_finacle":stadat[0].Last_Name_Finacle,
      //             "cf_address_line1":stadat[0].HOME_ADDRESS_LINE1,
      //             "cf_addess_line2":stadat[0].HOME_ADDRESS_LINE2,
      //             "cf_customer_id":stadat[0].CustomerID


      //           }
      //         },
      //         "method":"POST",
      //         "url":desk_create_contact_base_url,
      //        }
      //       //  ZOHO.CRM.CONNECTION.invoke("zohodesk",desk_create_contact_req_data).then(function(create_desk_data){
      //       //     // console.log("no contact create",create_desk_data);
      //       //     // console.log("no contact statusmessage",create_desk_data.details.statusMessage);
      //       //     // console.log(create_desk_data.code, "no contact code");
      //       //     //console.log("no contact status",create_desk_data.status);
      //       //     if(create_desk_data.code == "SUCCESS" && create_desk_data.details.status == "true" && create_desk_data.details.statusMessage != "")
      //       //     {
      //       //       // console.log("no contact innn");
      //       //       // console.log("no contact create desk id",create_desk_data.details.statusMessage.id);
      //       //       desk_created_contact_id = create_desk_data.details.statusMessage.id;
      //       //     }
                
      //       //  })
      //       //  .catch((error) => {
      //       //   console.log("no contact error",error);
      //       //   // write error log module
      //       //   write_to_error_log_module("Create contact in Desk API",error);
      //       //  })
      //       console.log("RID",rid);
      //       create_desk_contact(stadat[0].Last_Name,stadat[0].Mobile,stadat[0].CustomerID,rid)
      //       crm_desk_id = desk_data;
      //     }

      //   })
      //   .catch((error)=>{
      //     console.log("desk contact search error",error);
      //     // write error log module
      //     write_to_error_log_module("Desk contanct search API",error);
      //   })
      // }
      console.log("IN here .......");
      home_info = stadat;
      document.getElementById("pgbwtit").innerHTML =
        stadat[0].Full_Name || "" + " - UBI Customer 360°";

      console.log("GENDER::",stadat[0].Custo_Class);
      if (stadat[0].Custo_Class == "Corporate") {
        document.getElementById("userimg").setAttribute("src","images/corporate.png");
      }else{
        if (stadat[0].Gender == "Female") {
          document.getElementById("userimg").setAttribute("src","images/fuser.png");
        }
        else{
          document.getElementById("userimg").setAttribute("src","images/muser.png");
        }
      }
      //Profile photo loading disabled for service-360
      // load_photo()
      // document.getElementById("ctrlvlnum").innerHTML=stadat[0].Nett_Worth || "";
      // document.getElementById("ctcibnum").innerHTML=stadat[0].CIBIL_Score || "";

      document.getElementById("labusrimg").innerHTML =
        stadat[0].Full_Name || "-";
      // document.getElementById("cname").innerHTML=stadat[0].Full_Name || "-";
      document.getElementById("pemail").innerHTML = stadat[0].Email || "-";
      mail = stadat[0].Email || "";
      // document.getElementById("cmail").innerHTML = stadat[0].Email || "-";
      document.getElementById("pcon").innerHTML = append_addresses(
        stadat[0].Mobile,
        stadat[0].Alternate_Phone_No
      );
      // phn = stadat[0].Phone || "-";
      mobl = stadat[0].Mobile || "-";
      if (mobl != "-") {
        mobl = mobl.replace("(", "");
        mobl = mobl.replace(")", "");
        mobl = mobl.replace("-", "");
        mobl = mobl.replace(" ", "");
        console.log("mobl is", mobl);
      }
      //change for MB deregistration
      const sampleMobileNumbers = [];

      if (mobl) {
        sampleMobileNumbers.push(mobl);
      }

      // Populate the dropdown with updated numbers
      populateMobileDropdown(sampleMobileNumbers);
      //
      // document.getElementById("cmob").innerHTML = stadat[0].Mobile || "-";
      // document.getElementById("pcon").innerHTML="Phone: " + stadat[0].Phone || "";
      if (stadat[0].Alternate_Phone_No == undefined) {
        document.getElementById("apcon").innerHTML = getErrorMessage();
        phn = " ";
      } else {
        let altphn = stadat[0].Alternate_Phone_No;
        if (stadat[0].Alternate_Phone_No == null || stadat[0].Alternate_Phone_No == undefined) {
          altphn = "-";
        }
        document.getElementById("apcon").innerHTML =
          '<span>' + stadat[0].Alternate_Phone_No ||
          "" + "</span>" ||
          "-";
        phn = stadat[0].Alternate_Phone_No || "";
      }
      crm_desk_id = stadat[0].Desk_ContactId || " ";
      console.log("ALT PHN");
      // document.getElementById("camob").innerHTML = stadat[0].Alternate_Mobile_No || "-";
      if (stadat[0].RM_Name == undefined) {
        document.getElementById("rmname").innerHTML = getErrorMessage();
      } else {
        document.getElementById("rmname").innerHTML =
          '<span style="font-weight: 700;">' + stadat[0].RM_Name ||
          "" + "</span>" ||
          "-";
      }
      console.log("RM NAME");
      //Customer Main Information Data Section 2 SideNav
      if (stadat[0].CustomerID == undefined) {
        document.getElementById("lcid").innerHTML =
          "Customer ID:" + getErrorMessage();
        custid = "";
      } else {
        document.getElementById("lcid").innerHTML =
          'Customer ID: <span style="font-weight: 700;">' +
            stadat[0].CustomerID ||
          "" + "</span>" ||
          "-";
        custid = stadat[0].CustomerID || "";
      }
      console.log("CUST ID");
      
      // document.getElementById("lcano").innerHTML = stadat[0].Account_Number || "";
      // document.getElementById("lbct").innerHTML = "";
      // document.getElementById("labch").innerHTML = "";
      // document.getElementById("lbchcd").innerHTML = "";
      // document.getElementById("lkycr").innerHTML = "";
      //Contact Owner Information Data Section 3 SideNav
      // document.getElementById("ctown").innerHTML = stadat[0].Owner.name || "";
      // document.getElementById("ctonem").innerHTML = stadat[0].Owner.email || "";
      // document.getElementById("ctownph").innerHTML = "";
      // document.getElementById("ctowncit").innerHTML = "";
      //Customer Personal Information Personal Section Main Content
      let today = new Date();
      let dob = new Date(stadat[0].Date_of_Birth);
      document.getElementById("ctdob").innerHTML = `${format_date(
        stadat[0].Date_of_Birth
      )} ${getAge(today, dob)}`;
      // document.getElementById("ctbranch").innerHTML = stadat[0].Branch || "-";
      // document.getElementById("ctregion").innerHTML = stadat[0].Region || "-";
      // document.getElementById("ctzone").innerHTML = stadat[0].Zone || "-";
      document.getElementById("ctgen").innerHTML = stadat[0].Gender || "-";

      document.getElementById("ctcrv").innerHTML = stadat[0].CRV_Score || "-";
      document.getElementById("ctstresscat").innerHTML =
        stadat[0].StressCategory || "-";
      document.getElementById("ctnpadate").innerHTML =
        stadat[0].NPA_Date || "-";
      document.getElementById("ctriskcatt").innerHTML =
        stadat[0].Risk_Category || "-";
      document.getElementById("ctstatus").innerHTML =
        stadat[0].CustomerStatus || "-";

      // document.getElementById("ctstrcat").innerHTML =stadat[0].StressCategory || "-";
      
      console.log("ctr corp is set", stadat[0].Custo_Class);
      document.getElementById("ctkycdate").innerHTML =
        format_date(stadat[0].Last_KYC_Date) || "-";
      document.getElementById("ctriskcat").innerHTML =
        stadat[0].Risk_Category || "-";
      document.getElementById("ctbkicr").innerHTML =
        stadat[0].Internal_Credit_Rating_Retail || "-";
      document.getElementById("ctbkicrcorp").innerHTML =
        stadat[0].Internal_Credit_Rating_Corporate || "-";
      document.getElementById("ctbkecr").innerHTML =
        stadat[0].ECR_External_Credit_Rating || "-";

      document.getElementById("ctlastintdate").innerHTML =
        stadat[0].Last_Interaction_Date || "-";
      document.getElementById("ctclientsector").innerHTML =
        stadat[0].Client_Sector || "-";
      document.getElementById("ctlastkycdate").innerHTML = format_date(
        stadat[0].Last_KYC_Date
      );
      // document.getElementById("ctrelduration").innerHTML =
      //   stadat[0].Relationship_Duration || "-";
      console.log(pan + " " + phn + " " + mail);
      // document.getElementById("ctcibilscore").innerHTML = stadat[0].CIBIL_Score || "";

      cibScore = stadat[0].CIBIL_Score || "0";
      const gaugeElement = document.querySelector(".gauge");

      function setGaugeValue(gauge, value) {
        // if (value < 0 || value > 1) {
        //  // return;
        // }
        if (value < 0 || value > 1) {
          gauge.querySelector(".gauge__fill").style.transform = `rotate(${
            value / 2
          }turn)`;
        }

        gauge.querySelector(".gauge__cover").textContent = `${Math.round(
          value * 1000
        )}`;
      }
      console.log(cibScore);
      let x = cibScore / 1000; //0.810;
      // console.log(cibScore + " " + x);

      if ((x >= 0.0 && x <= 0.299) || x < 0.0) {
        document.getElementsByClassName(
          "gauge__fill"
        )[0].style.backgroundColor = "Red";
        document.getElementById("cibilRating").innerHTML = "No Credit History";
      } else if (x > 0.3 && x <= 0.549) {
        document.getElementsByClassName(
          "gauge__fill"
        )[0].style.backgroundColor = "Red";
        document.getElementById("cibilRating").innerHTML = "Poor";
      } else if (x > 0.55 && x <= 0.649) {
        document.getElementsByClassName(
          "gauge__fill"
        )[0].style.backgroundColor = "Orange";
        document.getElementById("cibilRating").innerHTML = "Average";
      } else if (x > 0.65 && x <= 0.749) {
        document.getElementsByClassName(
          "gauge__fill"
        )[0].style.backgroundColor = "Yellow";
        document.getElementById("cibilRating").innerHTML = "Good";
      } else if (x > 0.75 && x <= 1.0) {
        document.getElementsByClassName(
          "gauge__fill"
        )[0].style.backgroundColor = "Green";
        document.getElementById("cibilRating").innerHTML = "Excellent";
      }
      console.log("set gauge.....");
      setGaugeValue(gaugeElement, x);
      console.log("gauge set.....");
      // document.getElementById("ctczct").innerHTML = stadat[0].Minor || "";
      // Customer Information
      let res_status = stadat[0].Resident_Status || "-";
      if (res_status == "NRI") {
        nri_tag_container = document.getElementById("nri_tag");
        nri_tag_container.style.display  = "block";
        nri_tag_container.innerHTML = nri_tag;
      }
      if (res_status != "-") {
        res_status = find_res_status(res_status);
      }
      console.log(stadat[0].Relationship_Date || "-");
      document.getElementById("ctname").innerHTML = stadat[0].Full_Name || "-";
      document.getElementById("ctrtcorp2").innerHTML =stadat[0].Custo_Class || "-";
      RetailCorporate = document.getElementById("ctrtcorp2").innerHTML;
      load_customer_info();
      load_product_desc();
      if (RetailCorporate == "Corporate") {
        document.getElementById("ctntwrth").innerHTML =
        stadat[0].Net_Worth || "-";
        document.getElementById("ctkyc").innerHTML =
        format_date(stadat[0].Last_KYC_Date) || "-";
        document.getElementById("ctintrcrdratcorp").innerHTML =
        stadat[0].Internal_Credit_Rating_Corporate || "-";
      }else if (RetailCorporate == "Retail") {
        if (stadat[0].Minor_Y_N == "Y" || stadat[0].Minor_Y_N == "y") {
          document.getElementById("ctmnrflg").innerHTML = "Yes";
        }else if (stadat[0].Minor_Y_N == "N" || stadat[0].Minor_Y_N == "n") {
          document.getElementById("ctmnrflg").innerHTML = "No";
        } else {
          document.getElementById("ctmnrflg").innerHTML = "-";
        }
        if (stadat[0].Minor_Y_N == "Y" || stadat[0].Minor_Y_N == "y") {
          document.getElementById("ctsnrctzn").innerHTML = "Yes";
        }else if (stadat[0].Senior_Citizen == "N" || stadat[0].Senior_Citizen == "n") {
          document.getElementById("ctsnrctzn").innerHTML = "No";
        } else {
          document.getElementById("ctsnrctzn").innerHTML = "-";
        }
        document.getElementById("ctressts").innerHTML =
        stadat[0].Resident_Status || "-";
        //change for: additional ticket fields population
        res_status_for_desk=stadat[0].Resident_Status;
        let adhr=stadat[0].Aadhaar_Number || "-";
        if(adhr!="-")
        {
          adhr=mask_str(adhr,"aadhaar");
        }
        document.getElementById("ctaadhar").innerHTML = adhr;
        console.log("OCCUpATION", stadat[0].Occupation || "-");
        document.getElementById("ctoccupation").innerHTML =
          stadat[0].Occupation || "-";
      
        document.getElementById("ctmrtlsts").innerHTML =
        stadat[0].Marital_Status || "-";
        document.getElementById("ctcaste").innerHTML = stadat[0].Caste || "-";
        document.getElementById("ctcommunity").innerHTML =
        stadat[0].Community || "-";
        document.getElementById("ctannlincm").innerHTML =
        stadat[0].Annual_Income || "-";
        document.getElementById("ctcrv2").innerHTML = stadat[0].CRV_Score || "-";
        document.getElementById("ctintrcrdratret").innerHTML = stadat[0].Internal_Credit_Rating_Retail || "-";
      }

      // document.getElementById("ctempflg").innerHTML = empflg || "-";
      // document.getElementById("ctnnintincm").innerHTML = circular_loader_colorless;
      // document.getElementById("ctintincm").innerHTML = circular_loader_colorless;
      // document.getElementById("ctsanclmtwc").innerHTML = circular_loader_colorless;
      // document.getElementById("ctsanclmttl").innerHTML =circular_loader_colorless;
      // document.getElementById("ctttlsanclmtlc").innerHTML = circular_loader_colorless;
      // document.getElementById("ctsanclmtbg").innerHTML = circular_loader_colorless;

      document.getElementById("ctempflg").innerHTML = `<div class="glow-container"><div class="glow"></div></div>`;
      document.getElementById("ctnpahist").innerHTML = `<div class="glow-container"><div class="glow"></div></div>`;
      // document.getElementById("ctnnintincm").innerHTML = `<div class="glow-container"><div class="glow"></div></div>`;
      // document.getElementById("ctintincm").innerHTML = `<div class="glow-container"><div class="glow"></div></div>`;
      // document.getElementById("ctsanclmtwc").innerHTML = `<div class="glow-container"><div class="glow"></div></div>`;
      // document.getElementById("ctsanclmttl").innerHTML =`<div class="glow-container"><div class="glow"></div></div>`;
      // document.getElementById("ctttlsanclmtlc").innerHTML = `<div class="glow-container"><div class="glow"></div></div>`;
      // document.getElementById("ctsanclmtbg").innerHTML = `<div class="glow-container"><div class="glow"></div></div>`;
      // document.getElementById("ctppc").innerHTML = `<div class="glow-container"><div class="glow"></div></div>`;
      // document.getElementById("apcon").innerHTML = `<div class="glow-container-blue"><div class="glow-blue"></div></div>`;
      // Interest Income, Non Interest Income, Sanction Limit, Total Sanction Limits
      let countI = 0;
      custComInterval = setInterval(()=> {
        if (advances_flg && deposits_flg) {
          cal_cust_info_common_values("dpadv");
        }
        if (countI == 10) {
          clearInterval(custComInterval);
        }
        countI += 1;
        
      },2000);
      let countI1 = 0;
       // avgBalInterval = setInterval(()=> {
          //   if (advances_flg && deposits_flg) {
            //     avg_bal_dropdown_val();
            //     // populate_avgbal_chart();
            
          //   }
        // },4000);
      if (RetailCorporate == "Corporate") {
        custComInterval1 = setInterval(()=> {
          console.log("NFB FLAG",nfb_flg);
          if (nfb_flg) {
            cal_cust_info_common_values("nfb");
          }
          if (countI1 == 10) {
            clearInterval(custComInterval1);
          }
          countI1 += 1;
        },2000);
      }else{
        // document.getElementById("ctttlsanclmtlc").innerHTML = "0";
        // document.getElementById("ctsanclmtbg").innerHTML = "0";
      }
      resolveInterval = setInterval(()=> {
        if (set_resolved["dep"] && set_resolved["adv"]) {
          resolve_services_availed();
          // getDataCrossSellData();
        }
      },2000);
      let today2 = new Date();
      let cust_since = stadat[0].Relationship_Date || "-";
      if (cust_since != "-") {
        cust_since = new Date(cust_since.split("T")[0]);
      }
      console.log("cust since date", cust_since);
      let c=stadat[0].Relationship_Date;
      if(c!=null)
      {
        c=format_date(c.split("T")[0]);
      }
      else
      {
        c="-";
      }
      document.getElementById("cust_since").innerHTML = `${c} ${getAge(today2, cust_since) || ""}`;
      console.log(format_date(cust_since));
      console.log(
        "relationship date is",
        `${format_date(cust_since)} ${getAge(today2, cust_since) || ""}`
      );
      document.getElementById("ctrtcorp").innerHTML =
        stadat[0].Custo_Class || "-";
        document.getElementById("ctrtcorp").innerHTML = document.getElementById("ctrtcorp").innerHTML.toUpperCase();
      console.log("ctr corp is set2", stadat[0].Custo_Class);
      console.log("DOBBBBBBB ", format_date(stadat[0].Date_of_Birth));
      document.getElementById("ctdobincrp").innerHTML = format_date(
        stadat[0].Date_of_Birth
      );
      // document.getElementById("ctreldur").innerHTML =
      //   stadat[0].Relationship_Duration || "-";
      
     
      // document.getElementById("ctstate").innerHTML = stadat[0].State || "-";
      document.getElementById("ctstate").innerHTML = stadat[0].State || "-";
      // new_additional_field_ in the customer information
     
      document.getElementById("ctnriflag").innerHTML = stadat[0].NRI_Flag || "-";
      document.getElementById("ctfactdecltaken").innerHTML = stadat[0].FATCA_Decl_Taken || "-";
      document.getElementById("ctnsmsalertmincredit1").innerHTML = stadat[0].SMS_Alert_Minimum_Credit || "-";
      document.getElementById("ctnsmsalertmindebit1").innerHTML = stadat[0].SMS_Alert_Minimum_Debit || "-";
      //

      // document.getElementById("ctcststs").innerHTML =
      //   stadat[0].CustomerStatus || "-";
        let pan_no=stadat[0].PAN_No || "-";
        customerPanNoUnmasked=pan_no;
        if(pan_no!="-")
        {
          pan_no=mask_str(pan_no,"pan");
        }
      document.getElementById("ctpan").innerHTML = pan_no;
      let adhr=stadat[0].Aadhaar_Number || "-";
      if(adhr!="-")
      {
        adhr=mask_str(adhr,"aadhaar");
      }
      // document.getElementById("ctaadhar").innerHTML = adhr;
      document.getElementById("ctoccupation").innerHTML =
        stadat[0].Occupation || "-";
      
     
     
      
    
      // document.getElementById("ctstrsscat").innerHTML =
      //   stadat[0].StressCategory || "-";
      document.getElementById("ctrskcat").innerHTML =
        stadat[0].Risk_Category || "-";
      console.log("risk category", stadat[0].Risk_Category);
      // document.getElementById("ctintrincm").innerHTML =
      //   stadat[0].Occupation || "-";
      // document.getElementById("ctnonintrincm").innerHTML =
      //   stadat[0].Occupation || "-";
      // document.getElementById("ctcsat").innerHTML = stadat[0].Occupation || "-";
      
      document.getElementById("ctraroc").innerHTML =
        stadat[0].RAROC_Score || "-";
      
      document.getElementById("ctprefcntno").innerHTML =
        stadat[0].Mobile || "-";
      document.getElementById("ctaltcntno").innerHTML =
        stadat[0].Alternate_Phone_No || "-";
        
      document.getElementById("ctmobile").innerHTML = stadat[0].Mobile || "-";
      document.getElementById("ctemailid").innerHTML = stadat[0].Email || "-";
      document.getElementById("preferred_mobile_alert").innerHTML = stadat[0].Preferred_Mobile_Alert_No || "-";
      document.getElementById(
        "ctaddtype"
      ).innerHTML = `<select class="fancy-select" name="address_dropdown" id="address_dropdown" onchange="address_select()">
      <option value="HOME">HOME</option>
      <option value="MAIL" selected>MAILING</option>
      <option value="REGISTERED">REGISTERED</option>
    </select>`;
      document.getElementById("ctaddline1").innerHTML =
        stadat[0].HOME_ADDRESS_LINE1 || "-";
      document.getElementById("ctaddline2").innerHTML =
        stadat[0].HOME_ADDRESS_LINE2 || "-";
      // document.getElementById("ctaddline3").innerHTML=stadat[0].Occupation	 || "-";
      document.getElementById("ctcity").innerHTML = stadat[0].Home_City || "-";
      document.getElementById("ctstate").innerHTML =
        stadat[0].Home_State || "-";
      document.getElementById("ctcntry").innerHTML =
        stadat[0].Home_Country || "-";
      document.getElementById("ctpincode").innerHTML =
        stadat[0].Home_ZIP || "-";
      // End Customer Information
      //Address information

      document.getElementById("ctrsst").innerHTML = res_status;
      document.getElementById("ctrmin").innerHTML =
        resolve_y_n(stadat[0].Minor_Y_N) || "-";
      // document.getElementById("ctaddr").innerHTML = append_addresses(stadat[0].HOME_ADDRESS_LINE1,stadat[0].HOME_ADDRESS_LINE2);
      document.getElementById("ctcity").innerHTML = stadat[0].Home_City || "-";
      document.getElementById("ctstate").innerHTML =
        stadat[0].Home_State || "-";
      document.getElementById("ctcntry").innerHTML =
        stadat[0].Home_Country || "-";
      // document.getElementById("ctpincd").innerHTML = stadat[0].Pin_Code || "-";
      //End of address information
      //Registered address info
      /*
      document.getElementById("ctregaddr").innerHTML = append_addresses(
        stadat[0].REG_ADDRESS_LINE1,
        stadat[0].REGISTERED_ADDRESS_LINE2
      );
      */
      //document.getElementById("ctregcity").innerHTML =stadat[0].REGISTERED_CITY || "-";
      // document.getElementById("ctregstate").innerHTML =
      // stadat[0].REGISTERED_STATE || "-";
      // document.getElementById("ctregcntry").innerHTML =stadat[0].REGISTERED_COUNTRY || "-";
      // document.getElementById("ctregpincd").innerHTML =
      stadat[0].REGISTERED_ZIP || "-";
      //end of registered address info
      //mail address info
      // document.getElementById("ctmailaddr").innerHTML = append_addresses(stadat[0].MAIL_ADDRESS_LINE1,stadat[0].MAIL_ADDRESS_LINE2);
      // document.getElementById("ctmailcity").innerHTML =stadat[0].MAIL_CITY || "-";
      // document.getElementById("ctmailstate").innerHTML =stadat[0].MAIL_STATE || "-";
      // document.getElementById("ctmailcntry").innerHTML =stadat[0].MAIL_COUNTRY || "-";
      // document.getElementById("ctmailpincd").innerHTML =stadat[0].MAIL_ZIP || "-";
      //end of mail address info
      document.getElementById("ctoccp").innerHTML = stadat[0].Occupation || "-";
      //Customer Bank Information 1 Personal Section Main Content
      document.getElementById("ctpanno").innerHTML = stadat[0].PAN_No || "-";
      pan = stadat[0].PAN_GIR_ID || "";
      solid = stadat[0].Branch_Code || "0";
      desk_contat_data.Branch_SOL_ID = solid;
      console.log("sol id is", solid);

      console.log("sol id is", solid);

      /*
      let conn_name = "zohocrm";
      let base_url =
        "https://ucrmapi.unionbankofindia.co.in/crm/v2/ETL_Branch_Masters/search?criteria=(Branch_SOL_ID:equals:" +
        solid +
        ")"; //No I18N
      console.log(base_url);
      var req_data = {
        headers: {}, //No I18N
        method: "GET", //No I18N
        url: base_url, //No I18N
      };
      ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
        // ZOHO.CRM.API.searchRecord({
        //   Entity: "Branch_Master",
        //   Type: "criteria",
        //   Query: "(Branch_SOL_ID:equals:" + solid + ")",
        // })
        .then(function (data) {
          console.log("found a match for sol ID", solid, data);
          if (data.status == 204) {
            document.getElementById("ctbranch").innerHTML = "-";
            document.getElementById("ctregion").innerHTML = "-";
            document.getElementById("ctzone").innerHTML = "-";
            return;
          }
          if (data.details.statusMessage == "") {
            document.getElementById("ctbranch").innerHTML = "-";
            document.getElementById("ctregion").innerHTML = "-";
            document.getElementById("ctzone").innerHTML = "-";
            return;
          }
          let dt = data.details.statusMessage.data;

          for (var i = 0; i < dt.length; i++) {
            if (i == 0) {
              let bc_code = dt[i].Branch_SOL_ID || "-";
              customer_branch_sol_id_for_desk=bc_code;
              console.log("Bc code", bc_code, dt[i]);
              let bc_name = dt[i].Name || "-";
              if (bc_name == "-"){
                document.getElementById("ctbranch").innerHTML = "-";
                desk_contat_data.Branch_Name = "-";
              }else {
                desk_contat_data.Branch_Name = bc_name;
                if (bc_code != "-") {
                  document.getElementById(
                    "ctbranch"
                  ).innerHTML = `${bc_name} (${bc_code})`;
                } else {
                  document.getElementById("ctbranch").innerHTML = `${bc_name}`;
                }
              }

              document.getElementById("ctregion").innerHTML =
                dt[i].Region || "-";
              document.getElementById("ctzone").innerHTML = dt[i].DIVISION_NAME.split("-")[1] || "-";
            } else {
              console.log("Error: More than one Branch found for one SOL ID");
            }
          }
        })
        .catch((error) => {
          console.log("Branch API error", error);
          // write error log module
          write_to_error_log_module("Branch API",error);
        });
        */
      document.getElementById("ctadhno").innerHTML =
        stadat[0].Aadhaar_Number || "-";
      document.getElementById("ctraroc2").innerHTML =
        stadat[0].RAROC_Score || "-";
      document.getElementById("ctraroc3").innerHTML =
        stadat[0].RAROC_Score || "-";

      // document.getElementById("ccttdpamt").innerHTML = stadat[0].Total_Deposit_Amount || "-";
      // document.getElementById("ccttotlnamt").innerHTML = stadat[0].Total_Loan_Amount || "-";
      console.log("CONSTITUTION HERE");
      if (stadat[0].Customer_Constitution == undefined) {
        document.getElementById("cctctut").innerHTML = getErrorMessage();
      } else {
        document.getElementById("cctctut").innerHTML =
          '<span>' +
            stadat[0].Customer_Constitution +
            "</span>" || "-";
      }
      // document.getElementById("ctctut").innerHTML =
      //   stadat[0].Customer_Constitution || "-";
      document.getElementById("ctrskcat").innerHTML =
        stadat[0].Risk_Category || "-"; //stadat[0].Risk_Category || "";
      // document.getElementById("cctrldur").innerHTML = "";//stadat[0].CRelationship_Duration || "";
      // document.getElementById("ctrldur").innerHTML = "";//stadat[0].Relationship_Duration || "";
      //document.getElementById("ccttotprd").innerHTML = "";// stadat[0].CTotal_Loan_Amount || "";
      //document.getElementById("ccttdpamt").innerHTML = "";// stadat[0].CTotal_Deposit_Amount || "";
      // document.getElementById("cttotprd").innerHTML = "";// stadat[0].Total_Loan_Amount || "";
      // document.getElementById("cttdpamt").innerHTML = "";// stadat[0].Total_Deposit_Amount || "";
      document.getElementById("cttlnamt").innerHTML = "-"; // stadat[0].Mailing_Country || "";
      document.getElementById("ctstrcm").innerHTML = "-"; // stadat[0].Stresse_Customer || "";
      document.getElementById("ctcmcls").innerHTML =
        stadat[0].Custo_Class || "-";
      //Customer Bank Service Information
        // Sepreation based Customer Type - Retail /Corporate
      RetailCorporate = document.getElementById("ctrtcorp2").innerHTML;
        if(RetailCorporate == "Retail"){
              document.getElementById("ctlck").innerHTML = stadat[0].Locker || false;
            console.log("prods", stadat[0].Locker, stadat[0].Credit_Card);
            if (stadat[0].Locker) {
              console.log("CALL LOCKER");
              services_availed++;
              prod_count++;
            }
            document.getElementById("ctcrdcd").innerHTML =
              stadat[0].Credit_Card || false;
            if (stadat[0].Credit_Card) {
              services_availed++;
              prod_count++;
            }
            document.getElementById("ctintbk").innerHTML =
              stadat[0].Internet_Banking || false;
            if (stadat[0].Internet_Banking) {
              console.log("CALL INT BNK");
              services_availed++;
              prod_count++;
            }
            document.getElementById("ctmobbank").innerHTML = stadat[0].U_Mobile || false;
            if (stadat[0].U_Mobile != null) {
              prod_count++;
            }
            document.getElementById("ctdmac").innerHTML =
              stadat[0].Demat_A_C || false;
            if (stadat[0].Demat_A_C) {
              services_availed++;
              prod_count++;
  
            }
            // document.getElementById("ctpasbk").innerHTML =
            //   stadat[0].Passbook || false;
            //   console.log("CHEQUE BOOK PB AND DBT CARD", stadat[0].Passbook);
            // if (stadat[0].Passbook) {
            //   console.log("CALL PASSBK");
            //   services_availed++;
            //   prod_count++;
            // }
            document.getElementById("ctchqbk").innerHTML =
              stadat[0].Cheque_Book || false;
              console.log("CHEQUE BOOK PB AND DBT CARD", stadat[0].Cheque_Book);
            if (stadat[0].Cheque_Book) {
              console.log("CALL CHQBK");
              services_availed++;
              prod_count++;
            }
            document.getElementById("ctdbtcd").innerHTML =
              stadat[0].Debit_Card || false;
              console.log("CHEQUE BOOK PB AND DBT CARD", stadat[0].Debit_Card);
            if (stadat[0].Debit_Card) {
              console.log("CALL DBT CARD");
              services_availed++;
              prod_count++;
            }
            document.getElementById("ctsmsbk").innerHTML = stadat[0].SMS_Banking || false;
            if (stadat[0].SMS_Banking) {
              console.log("CALL SMS BNK");
              services_availed++;
              prod_count++;
            }
            // document.getElementById("ctgtbpd").innerHTML =
            //   stadat[0].Govt_Business_Product || false;
            // if (stadat[0].Govt_Business_Product) {
            //   console.log("CALL GOVT BUSINESS");
            //   prod_count++;
            // }
            document.getElementById("ctmtfd").innerHTML =
              stadat[0].Mutual_Fund || false;
            if (stadat[0].Mutual_Fund) {
              console.log("CALL MUTUAL FUND");
              services_availed++;
              prod_count++;
            }
            document.getElementById("ctlfinc").innerHTML =
              stadat[0].Life_Insurance || false;
            if (stadat[0].Life_Insurance) {
              console.log("CALL LIFE INC");
              services_availed++;
              prod_count++;
            }
            document.getElementById("cthtinc").innerHTML =
              stadat[0].Health_Insurance || false;
            if (stadat[0].Health_Insurance) {
              console.log("CALL HEALTH INC");
              services_availed++;
              prod_count++;
            }
            document.getElementById("ctfstag").innerHTML =
              stadat[0].FastTag || false;
            if (stadat[0].FastTag) {
              console.log("CALL FASTAG");
              services_availed++;
              prod_count++;
            }
            document.getElementById("ctbqr").innerHTML =
              stadat[0].BQR || false;
            if (stadat[0].BQR) {
              console.log("CALL BQR");
              services_availed++;
              prod_count++;
            }
            // document.getElementById("ctpos").innerHTML =
            //   stadat[0].POS || false;
            // if (stadat[0].POSm) {
            //   console.log("CALL POS");
            //   prod_count++;
            // }
            document.getElementById("ctgninc").innerHTML =
              stadat[0].General_Insurance || false;
            if (stadat[0].General_Insurance) {
              console.log("CALL GNC INC");
              services_availed++;
              prod_count++;
            }
        }else{
          // document.getElementById("ctlck").innerHTML = stadat[0].Locker || false;
        // console.log("prods", stadat[0].Locker, stadat[0].Credit_Card);
        // if (stadat[0].Locker) {
        //   console.log("CALL LOCKER");
        //   services_availed++;
        //   prod_count++;
        // }
        // document.getElementById("ctcrdcd").innerHTML =
        //   stadat[0].Credit_Card || false;
        // if (stadat[0].Credit_Card) {
        //   prod_count++;
        // }
        document.getElementById("ctintbk").innerHTML =
          stadat[0].Internet_Banking || false;
        if (stadat[0].Internet_Banking) {
          console.log("CALL INT BNK");
          services_availed++;
          prod_count++;
        }
        // // document.getElementById("ctumbl").innerHTML = stadat[0].U_Mobile || false;
        // if (stadat[0].U_Mobile != null) {
        //   prod_count++;
        // }
        // document.getElementById("ctdmac").innerHTML =
        //   stadat[0].Demat_A_C || false;
        // if (stadat[0].Demat_A_C) {
        //   prod_count++;
        // }
        // document.getElementById("ctpasbk").innerHTML =
        //   stadat[0].Passbook || false;
        //   console.log("CHEQUE BOOK PB AND DBT CARD", stadat[0].Passbook);
        // if (stadat[0].Passbook) {
        //   console.log("CALL PASSBK");
        //   services_availed++;
        //   prod_count++;
        // }
        document.getElementById("ctchqbk").innerHTML =
          stadat[0].Cheque_Book || false;
          console.log("CHEQUE BOOK PB AND DBT CARD", stadat[0].Cheque_Book);
        if (stadat[0].Cheque_Book) {
          console.log("CALL CHQBK");
          services_availed++;
          prod_count++;
        }
        // document.getElementById("ctdbtcd").innerHTML =
        //   stadat[0].Debit_Card || false;
        //   console.log("CHEQUE BOOK PB AND DBT CARD", stadat[0].Debit_Card);
        // if (stadat[0].Debit_Card) {
        //   console.log("CALL DBT CARD");
        //   services_availed++;
        //   prod_count++;
        // }
        // // document.getElementById("ctsmsbk").innerHTML =
        // //   stadat[0].SMS_Banking || false;
        // if (stadat[0].SMS_Banking) {
        //   console.log("CALL SMS BNK");
        //   services_availed++;
        //   prod_count++;
        // }
        // document.getElementById("ctgtbpd").innerHTML =
        //   stadat[0].Govt_Business_Product || false;
        // if (stadat[0].Govt_Business_Product) {
        //   console.log("CALL GOVT BUSINESS");
        //   prod_count++;
        // }
        document.getElementById("ctmtfd").innerHTML =
          stadat[0].Mutual_Fund || false;
        if (stadat[0].Mutual_Fund) {
          console.log("CALL MUTUAL FUND");
          services_availed++;
          prod_count++;
        }
        document.getElementById("ctfstag").innerHTML =
          stadat[0].FastTag || false;
        if (stadat[0].FastTag) {
          console.log("CALL FASTAG");
          services_availed++;
          prod_count++;
        }
        document.getElementById("ctbqr").innerHTML =
          stadat[0].BQR || false;
        if (stadat[0].BQR) {
          console.log("CALL BQR");
          services_availed++;
          prod_count++;
        }
        document.getElementById("ctpos").innerHTML =
          stadat[0].POS || false;
        if (stadat[0].POSm) {
          console.log("CALL POS");
          services_availed++;
          prod_count++;
        }
        document.getElementById("ctgninc").innerHTML =
          stadat[0].General_Insurance || false;
        if (stadat[0].General_Insurance) {
          console.log("CALL GNC INC");
          services_availed++;
          prod_count++;
        }
        }
        
        document.getElementById("cttotprd").innerHTML = prod_count - 1;
        document.getElementById("ctcsus").innerHTML = stadat[0].Cross_Sell || "-";
  
  
      // rating = stadat[0].CRV_Score || 0;
      // console.log("CRV RATING :: ",stadat[0].CRV_Score);
      // var star = document.getElementById("ratingStars");
      // star.style.setProperty("--rating", rating);
      // var stars = getComputedStyle(star);
      // console.log(stars.getPropertyValue("--rating"));

      // Tickets chart

      // let xValues = ["Open", "In Progress", "Closed"];
      // let yValues = [15, 65, 20];
      // let barColors = [
      //   "rgba(0,0,255,0.4)",
      //   "rgba(0,255,0,0.4)",
      //   "rgba(255,0,0,0.4)",
      // ];

      // new Chart("ticketsChart", {
      //   type: "bar",
      //   data: {
      //     labels: xValues,
      //     datasets: [
      //       {
      //         backgroundColor: barColors,
      //         data: yValues,
      //       },
      //     ],
      //   },
      //   options: {
      //     legend: { display: false },
      //     responsive: false,
      //     maintainAspectRatio: false,
      //     title: {
      //       display: false,
      //       text: "Tickets",
      //     },
      //   },
      // });
      customer_id_for_analytics = stadat[0].CustomerID;
      // console.log("calling new module search function");
      //let nms_out=new_module_search("wrapper_for_module_search",{Module:"Liabilities1",Page:1,Customer_ID:rid,Customer_ID_for_Analytics:stadat[0].CustomerID});
      // console.log("nms output is",nms_out);
      //New deposits chart
      //Analytics API integration
      display_panel_overlay("deposit_panel_overlay", loader_html);
      console.log("CALLING DEPOSITS:::");
      get_deposits2(1);
      /*
      ZOHO.CRM.API.searchRecord({
        Entity: "Liabilities1",
        Type: "criteria",
        Query: "(Customer_Name:equals:" + rid + ")",
      }).then((data)=>{
        console.log("new deposits data",data);
        
        if (data.status == 204) {
          display_panel_overlay("deposit_panel_overlay", "No deposits yet");
          document.getElementById("ccttdpamt").innerHTML = `Rs. ${0}/ ${0} Accounts`;
          console.log("Deposits panel is empty");
          return;
        }
        new_deposits.push(...data.data);
        if(data.info.more_records)
        {
          //call API again
          console.log("calling deposits recursively");
          get_deposits(2);
        }
        else
        {
          
          populate_deposits_chart(new_deposits);
        }
      })
      .catch((err) => {
        console.log("error in deposits chart", err);
        display_panel_overlay(
          "deposit_panel_overlay",
          "Oops! Something went wrong"
        );
        document.getElementById("ccttdpamt").innerHTML = `Rs. ${0}/ ${0} Accounts`;
      });
      */

      //End of new deposits chart
      // Opportunities chart
      /*
      ZOHO.CRM.API.searchRecord({
        Entity: "Liabilities1",
        Type: "criteria",
        Query: "(Customer_Name:equals:" + rid + ")",
      })
        .then((data) => {
          console.log("liabilities fetched", data);
          console.log("deposits chart status", data.status);
          // Deposit Chart
          if (data.status == 204) {
            display_panel_overlay("deposit_panel_overlay", "No deposits yet");
            document.getElementById("ccttdpamt").innerHTML = `Rs. ${0}/ ${0} Accounts`;
            console.log("Deposits panel is empty");
            return;
          }
          let d = data.data;
          if (d.length == 0) {
            //show no deposits yet on the screen.
            // document.getElementById("ccttdpamt").innerHTML = `Rs. ${0}/ ${0} Accounts`;
            document.getElementById("ccttdpamt").innerHTML = `Rs. ${0}/ ${0} Accounts`;
            display_panel_overlay("deposit_panel_overlay", "No deposits yet");
          } else {
            let ca = 0,
              sa = 0,
              td = 0;
            for (let i = 0; i < d.length; i++) {
              let bal = d[i].Balance_Currency;
              if (d[i].A_c_Type == "Current" || d[i].A_c_Type == "CAA") {
                ca += bal;
                total_deposit_accounts++;
              } else if (d[i].A_c_Type == "Saving" || d[i].A_c_Type == "SBA") {
                sa += bal;
                total_deposit_accounts++;
              } else if (
                d[i].A_c_Type == "Term Deposit" ||
                d[i].A_c_Type == "TDA"
              ) {
                td += bal;
                total_deposit_accounts++;
              }
            }
            if (ca + sa + td == 0) {
              display_panel_overlay(
                "deposit_panel_overlay",
                "No deposits with balance"
              );
            }
            document.getElementById("ccttdpamt").innerHTML = `Rs. ${ca + sa + td}/ ${total_deposit_accounts} Accounts`;
            var dxValues = [
              "Current Account",
              "Savings Account",
              "Term Deposit",
            ];
            var dyValues = [ca, sa, td];
            var dbarColors = ["#b91d47", "#00aba9", "#2b5797"];
            var drefVal = "2021-06-07";

            let d_chart = new Chart("depositChart", {
              type: "pie",
              data: {
                labels: dxValues,
                datasets: [
                  {
                    backgroundColor: dbarColors,
                    data: dyValues,
                  },
                ],
              },
              options: {
                responsive: false,
                maintainAspectRatio: false,
                title: {
                  display: false,
                  text: "Deposits (As of " + drefVal + ")",
                },
              },
            });
          }
        })
        .catch((err) => {
          console.log("error in deposits chart", err);
          display_panel_overlay(
            "deposit_panel_overlay",
            "Oops! Something went wrong"
          );
          document.getElementById("ccttdpamt").innerHTML = `Rs. ${0}/ ${0} Accounts`;;
        });
        */
      //advances Chart API hit

      console.log("hitting loan accounts API");
      try {
        display_panel_overlay("adv_panel_overlay", loader_html);
        get_advances2(1);
      } catch (e) {
        //error in fetching advances API
        console.log("error in advances chart", e);
        display_panel_overlay(
          "adv_panel_overlay",
          "Oops! Something went wrong"
        );
        document.getElementById("ccttotlnamt").innerHTML = `Couldn't fetch`;
        document.getElementById("ccttdpamt").innerHTML = `Couldn't fetch`;
      }
      console.log("hitting non fund baased API");
      if (RetailCorporate == "Corporate") {
        try {
          table_loader('tblbgrdtb',15,8);
          get_non_funds2(1);
        } catch {
          console.log("error in non funds API", e);
          populate_fb_advances([], false);
        }
        }else{
          new_non_funds = [];
          populate_nfb_table(new_non_funds);
        }
      console.log("tickets fetch");
      try {
        display_panel_overlay("ticket_panel_overlay", loader_html);
        // crm_desk_id = await get_desk_contact(custid);
        if (
          crm_desk_id == null ||
          crm_desk_id == undefined ||
          crm_desk_id == " "
        ) {
          crm_desk_id = await get_desk_contact(custid,ds_record_id).catch((err) => {
            console.log("AWAIT RESPONSE ERROR");
          });
          console.log("DESK RECORD DATA:::", crm_desk_id);
          crm_desk_id = await create_desk_contact(last_name_for_desk,document.getElementById("ctprefcntno").innerHTML,custid,crm_desk_id).catch((err) => {
            console.log("AWAIT RESPONSE ERROR");
          });
          if (crm_desk_id.code != "SUCCESS") {
            display_panel_overlay(
              "ticket_panel_overlay",
              "Oops! Something went wrong"
            );
          }
          console.log("DESK RECORD ID", crm_desk_id);
          desk_contact_id=ds_record_id;
          if (ds_record_id == "" || ds_record_id == null) {
            // UPDATE THE CUST RECORD
            try{
            desk_contact_id=crm_desk_id.details.statusMessage.data[0].id;
            console.log("RECORD ID", rid[0]);
            let base_url = `https://ucrmapi.unionbankofindia.co.in/crm/v2/Contacts/`+rid[0];
            let req_data = {
              parameters:{"data":[{
                // "id":rid[0],
                "Desk_Record_Id":crm_desk_id.details.statusMessage.data[0].id,
                // "Last_Name":last_name_for_desk,
                // "CustomerID":ds_cust_id
              }]
              },
              method: "PUT",
              url: base_url,
            };
            resp = await ZOHO.CRM.CONNECTION.invoke("zohocrm", req_data);
            ds_record_id=crm_desk_id.details.statusMessage.data[0].id;
            console.log("UPDATE CUST RECORD WITH CRM RECORD ID", resp);
              
            }
            catch(e)
            {
            desk_contact_id=crm_desk_id.details.statusMessage.id;
            console.log("RECORD ID", rid[0]);
            let base_url = `https://ucrmapi.unionbankofindia.co.in/crm/v2/Contacts/`+rid[0];
            let req_data = {
              parameters:{"data":[{
                // "id":rid[0],
                "Desk_Record_Id":crm_desk_id.details.statusMessage.id,
                // "Last_Name":last_name_for_desk,
                // "CustomerID":ds_cust_id
              }]
              },
              method: "PUT",
              url: base_url,
            };
            resp = await ZOHO.CRM.CONNECTION.invoke("zohocrm", req_data);
            ds_record_id= crm_desk_id.details.statusMessage.id;
            console.log("UPDATE CUST RECORD WITH CRM RECORD ID", resp);

            }
            // return resp;
          }
          // CREATE DESK CONTACT AND ADD CUSTID TO CONTACT
        }
        console.log("loading close 4");
        document.getElementById("loadingWrapper").style.display = "none";
        console.log("CRM DESK ID", crm_desk_id);
        try {
          if (crm_desk_id.code == "SUCCESS") {
            if (
              crm_desk_id.details.status == "true" &&
              crm_desk_id.details.statusMessage != " " &&
              crm_desk_id.details.statusMessage != ""
            ) {
              console.log("SUCCESS IN:::",crm_desk_id);
              if (crm_desk_id.details.statusMessage != "") {
                get_ticket2(1);
              } else {
                display_panel_overlay(
                  "ticket_panel_overlay",
                  "No Desk Contact Assigned"
                );
              }
            } else {
              display_panel_overlay(
                "ticket_panel_overlay",
                "Oops! Something went wrong"
              );
            }
          } else {
            console.log();
            display_panel_overlay(
              "ticket_panel_overlay",
              "Oops! Something went wrong"
            );
          }
        } catch (error) {
          console.log("NOT SUCCESS");
          display_panel_overlay(
            "ticket_panel_overlay",
            "Oops! Something went wrong"
          );
        }
      } catch (error) {}
      /*
      ZOHO.CRM.API.searchRecord({
        Entity: "Loan_Accounts",
        Type: "criteria",
        Query: "(Customer_Name:equals:" + rid + ")",
      })
        .then((data) => {
          console.log("loan accounts fetched", data);
          if (data.status == 204) {
            display_panel_overlay("adv_panel_overlay", "No advances yet");
            document.getElementById(
              "ccttotlnamt"
            ).innerHTML = `Rs. ${0}/ 0 Accounts`;
            document.getElementById("ctstrcat").innerHTML = "-";
            return;
          }
          new_advances.push(...data.data);
          if (data.info.more_records) {
            get_advances(2);
          } else {
            populate_advances_chart(new_advances);
            fb_adv = sort_accounts_adv(new_advances);
            populate_fb_advances(fb_adv);
          }
          // Deposit Chart
          /*
          let d = data.data;
          if (d.length == 0) {
            //show no deposits yet on the screen.
            display_panel_overlay("adv_panel_overlay", "No advances yet");
            document.getElementById("ccttotlnamt").innerHTML = `Rs. ${0}/ 0 Accounts`;
            return;
          } else {
            let cca = 0,
              laa = 0,
              fba = 0,
              oda = 0,
              pca = 0;
            for (let i = 0; i < d.length; i++) {
              console.log(
                "advance account type is",
                d[i].A_c_Type_Current_Saving
              );
              if (d[i].A_c_Type_Current_Saving == "CCA") {
                // cca++;
                let bal = d[i].Balance_Currency || 0;
                cca += bal;
                total_loan_accounts++;
              } else if (d[i].A_c_Type_Current_Saving == "LAA") {
                // laa++;
                let bal = d[i].Balance_Currency || 0;
                laa += bal;
                total_loan_accounts;
              } else if (d[i].A_c_Type_Current_Saving == "FBA") {
                let bal = d[i].Balance_Currency || 0;
                fba += bal;
                total_loan_accounts;
              } else if (d[i].A_c_Type_Current_Saving == "ODA") {
                let bal = d[i].Balance_Currency || 0;
                oda += bal;
                total_loan_accounts;
              } else if (d[i].A_c_Type_Current_Saving == "PCA") {
                let bal = d[i].Balance_Currency || 0;
                pca += bal;
                total_loan_accounts;
              }
            }
            if (cca + laa + fba + oda + pca == 0) {
              display_panel_overlay("adv_panel_overlay", "No pending advances");
              document.getElementById("ccttotlnamt").innerHTML = `Rs. ${0}/ 0 Accounts`;
              return;
            }
            document.getElementById("ccttotlnamt").innerHTML =
              `Rs. ${cca + laa + fba + oda + pca}/ ${total_loan_accounts} Accounts`;
            // Advances Chart

            var axValues = ["CCA", "LAA", "FBA", "ODA", "PCA"];
            var ayValues = [cca, laa, fba, oda, pca];
            console.log("ay values", ayValues);
            var abarColors = [
              "#b91d47",
              "#00aba9",
              "#00bba9",
              "#00dba9",
              "#00ab89",
            ];
            var arefVal = "2021-06-07";

            new Chart("advanceChart", {
              type: "pie",
              data: {
                labels: axValues,
                datasets: [
                  {
                    backgroundColor: abarColors,
                    data: ayValues,
                  },
                ],
              },
              options: {
                responsive: false,
                maintainAspectRatio: false,
                title: {
                  display: false,
                  text: "Advances (As of " + arefVal + ")",
                },
              },
            });
          }
          */ /*
        })
        .catch((err) => {
          console.log("error in advances chart", err);
          display_panel_overlay(
            "adv_panel_overlay",
            "Oops! Something went wrong"
          );
          document.getElementById(
            "ccttotlnamt"
          ).innerHTML = `Rs. ${0}/ 0 Accounts`;
        });
        */

      // criteria (Customer_ID:equals:"+custid+")or(PAN_TAN_Number:equals:"+pan+")or(Alternate_Mobile_No:equals:"+phn+")or
      console.log(
        " API call for oppurtunities chart ",
        pan + " " + mobl + " " + mail
      );

     

      // ZOHO.CRM.API.searchRecord({
      //   Entity: "Liabilities1",
      //   Type: "criteria",
      //   Query: "(Customer_Name:equals:" + rid + ")",
      // })
      //   .then((data) => {
      //     console.log("searching liabilities for services availed");
      //     if (data.status == 204) {
      //       console.log("liabilities is empty", data);
      //       resolve_services_availed();
      //       return;
          // }
          // let d = data.data;
          // if (d.length == 0) {
          //   //show no deposits yet on the screen.
          //   console.log("liabilities is empty", data);
          //   resolve_services_availed();
          //   return;
          // }
          // let chqbk = 0
          // let passbk = 0
          // let dbtcrd = 0
 
          // for (let i = 0; i < d.length; i++) {
          //   if (d[i].Cheque_Book) {
          //     //make the associated element true
          //     document.getElementById("ctchqbk").innerHTML = "true";
          //     // services_availed++;
          //     chqbk = 1;
          //   } if (d[i].Passbook) {
          //     //make the associated element true
          //     document.getElementById("ctpasbk").innerHTML = "true";
          //     // services_availed++;
          //     passbk = 1
          //   } if (d[i].Debit_Card) {
          //     //make the associated element true1

          //     document.getElementById("ctdbtcd").innerHTML = "true";
              // services_availed++;
          //     dbtcrd = 1;
          //   }
          //   console.log("SERVICES::",d[i]);
          //   console.log("SERVICESS",dbtCard, d[i].Debit_Card);
          // }
          // if (chqbk) {
          //   document.getElementById("ctchqbk").innerHTML = "true";
          //   services_availed++;
          // }
        //   if (passbk) {
        //     document.getElementById("ctpasbk").innerHTML = "true";
        //     services_availed++;
        //   }
        //   if (dbtcrd) {
        //     document.getElementById("ctdbtcd").innerHTML = "true";
        //     services_availed++;
        //   }
        //   resolve_services_availed();
        // })
        // .catch((e) => {
        //   console.log("error in fetching liabilities facilities", e);
        //   resolve_services_availed();
        //   // populate_fb_deposits([],false);
        //   // populate_fb_term_deposits([],false);
        // });

      //place-holder
      
      cust_data_loaded=true;
      if(user_fetched)
      {
        complete_loading();
      }
    })
    .catch((error) => {
      console.log(error);
      // write error log module
      write_to_error_log_module("Get contact CRM API",error);
      //
      if((error.message)&&((error.message=="API Limit Exception")||(error.message=="API Limit  Exception")))
      {
        redirect_to_cust_search(true);
      }
      else if((error.code)&&(error.code=="429"||error.code==429))
      {
        redirect_to_cust_search(true);
      }
      if(!s360Reloaded)
      {
        document.getElementById("s360_load_msg").innerHTML=`Taking longer than ususal. Please <span style="color:blue;">don't reload the page. </span> We are working on to get the system loaded for you.`;
        s360Reloaded=true;
        reloadSmoothly();
      }
      else
      {
        document.getElementById("s360_load_msg").innerHTML=`Something went wrong! please click <span class="show-log-btn" style="padding:0 0.5%" onclick="reloadSmoothly()">here</span> to retry.`;
      }
    });
}
const oprClk = (x) => {
  // console.log(x.innerHTML);
  var vid = x.id;
  console.log(vid);
  var recordPromiseoc = new Promise(async (resolve, reject) => {
    await ZOHO.embeddedApp.init();
    var recordsoc = await ZOHO.CRM.API.getRelatedRecords({
      Entity: "Contacts",
      RecordID: rid,
      RelatedList: "Deals",
    });
    //ZOHO.CRM.API.getRecord({Entity:"Contacts",RecordID:"246578000000196195"});
    resolve(recordsoc);
  });

  recordPromiseoc.then((dta) => {
    dta = dta.data;
    modal.style.display = "block";
    var table = document.getElementById("modalDataTable1z");
    for (var l = 0; l < dta.length; l++) {
      if (dta[l].id == vid) {
        let hdr = `<tr>
                        <th colspan="6">Account Details</th>
                        </tr>`;
        table.innerHTML += hdr;
        var row = `<tr>
						<td class="modalAccountTbl1">Account Number</td>
						<td>${dta[l].Account_Number || "-"}</td>
						<td class="modalAccountTbl1">Sol Id</td>
						<td>${dta[l].Sol_ID || "-"}</td>
						<td class="modalAccountTbl1">Branch</td>
						<td>${dta[l].Branch || "-"}</td>
					   </tr>
					   <tr>
						<td class="modalAccountTbl1">Account Status</td>
						<td>${resolve_account_status(dta[l].Status) || "-"}</td>
						<td class="modalAccountTbl1">Holding Type</td>
						<td>${dta[l].Holding_Type || "-"}</td>
						<td class="modalAccountTbl1">Facility Type</td>
						<td>${dta[l].Facility_Type || "-"}</td>
					   </tr>
					   <tr>
						<td class="modalAccountTbl1">Account Scheme</td>
						<td>${dta[l].Scheme_Name || "-"}</td>
						<td class="modalAccountTbl1">Account Open Date</td>
						<td>${dta[l].Opened_Date || "-"}</td>
						<td class="modalAccountTbl1">Maturity Date</td>
						<td>${dta[l].Maturity_Date || "-"}</td>
					   </tr>
					   <tr>
						<td class="modalAccountTbl1">Deposit Amount</td>
						<td>${dta[l].Amount || "-"}</td>
						<td class="modalAccountTbl1">Reason Of Lien</td>
						<td>${dta[l].Lien_Reaosn || "-"}</td>
						<td class="modalAccountTbl1">Reason Of Freeze</td>
						<td>${dta[l].Freeze_Reason || "-"}</td>
					   </tr>
					   <tr>
						<td class="modalAccountTbl1">Currency</td>
						<td>${dta[l].Currency || "-"}</td>
						<td class="modalAccountTbl1">Sanctioned Limit</td>
						<td>${dta[l].Sanctioned_Limit || "-"}</td>
						<td class="modalAccountTbl1">Available Limit</td>
						<td>${dta[l].Available_Limit || "-"}</td>
					   </tr>
					   <tr>
						<td class="modalAccountTbl1">Current Balance</td>
						<td>${dta[l].Current_Balance || "-"}</td>
						<td class="modalAccountTbl1">EMI Interest Receivable</td>
						<td>${dta[l].EMI_Interest_Receivable || "-"}</td>
						<td class="modalAccountTbl1">Interest Rate</td>
						<td>${dta[l].Interest_Rate || "-"}</td>
					   </tr>
					   <tr>
						<td class="modalAccountTbl1">Stresse Category</td>
						<td>${dta[l].Stresse_Category || "-"}</td>
						<td class="modalAccountTbl1">Reason For Stress</td>
						<td>${dta[l].Reason_For_Stress || "-"}</td>
						<td class="modalAccountTbl1">Date Of SMA/NPA</td>
						<td>${dta[l].Date_Of_SMANPA || "-"}</td>
					   </tr>
					   <tr>
						<td class="modalAccountTbl1">Critical Amount</td>
						<td>${dta[l].Critical_Amount || "-"}</td>
						<td class="modalAccountTbl1">Next Due Date</td>
						<td>${dta[l].Next_Due_Date || "-"}</td>
						<td class="modalAccountTbl1">Next Due Amount</td>
						<td>${dta[l].Next_Due_Amount || "-"}</td>
					   </tr>`;
        table.innerHTML += row;
      }
    }
    span.onclick = () => {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
      $("#modalDataTable1z tr").remove();
    };
    window.onclick = (event) => {
      if (event.target == modal) {
        modal.style.display = "none";
        $("#modalDataTable1 tr").remove();
        $("#modalDataTable1z tr").remove();
      }
    };
  });
};
//////////////////-------------------///////////////

// fetch("https://reqres.in/api/users?page=2")
    // .then(function (dt) {
//         return dt.json();
//     // })
//     // .then((data) => {
//         // console.log(data);
//         // data = data.data;
//         // var table = document.getElementById('tblbgrdtb');
//         // var table1 = document.getElementById('tbllocrdtb');
//         // var table2 = document.getElementById('tblfcrdtb');

//         // var table3 = document.getElementById('tbldepdtbcs');
//         // var table4 = document.getElementById('tbldepdtbtd');
//         // var table5 = document.getElementById('tbladvdtb');

        // var table6 = document.getElementById("tbltkrdtbtkk");
//         // var table7 = document.getElementById("tblcprdtbcpp");
        // var table8 = document.getElementById("tblleadtabb");

//         // for (var i = 0; i < data.length; i++) {
//             // if(data[i].Status=="Closed" || data[i].Product1=="Credit Card"){
//             // var row = `<tr id="${data[i].id}" onclick="bgnClk(this)">
//             //           <td class="tabdat" colspan=2>${data[i].id+4598 || "-"}</td>
//             //           <td class="tabdat" colspan=2>${data[i].id+","+90957 || "-"}</td>
//             //           <td class="tabdat" colspan=2>financial bank guarantee</td>
//             //           <td class="tabdat" colspan=2>${data[i].last_name || "-"}</td>
//             //           <td class="tabdat" colspan=2>Indian Rupee</td>
//             //           </tr>`
//             // var row1 = `<tr id="${data[i].id}" onclick="locClk(this)">
//             // <td class="tabdat" colspan=2>${data[i].id+899 || "-"}</td>
//             // <td class="tabdat" colspan=2>${data[i].id+","+98879 || "-"}</td>
//             // <td class="tabdat" colspan=2>${data[i].first_name || "-"}</td>
//             // <td class="tabdat" colspan=2>01-01-2023</td>
//             // <td class="tabdat" colspan=2>${data[i].avatar || "-"}</td>
//             // </tr>`
//             // var row2 = `<tr id="${data[i].id}" onclick="fcrClk(this)">
//             // <td class="tabdat" colspan=2>${data[i].id || "-"}</td>
//             // <td class="tabdat" colspan=2>${data[i].email || "-"}</td>
//             // <td class="tabdat" colspan=2>${data[i].first_name || "-"}</td>
//             // <td class="tabdat" colspan=2>${data[i].last_name || "-"}</td>
//             // <td class="tabdat" colspan=2>${data[i].avatar || "-"}</td>
//             // </tr>`
//             // var row3 = `<tr id="${data[i].id}" onclick="casaClk(this)">
//             // <td class="tabdat" colspan=2>67${data[i].id+87876987 || "-"}</td>
//             // <td class="tabdat" colspan=2>YES</td>
//             // <td class="tabdat" colspan=2>Kisan Vikas Patra</td>
//             // <td class="tabdat" colspan=2>Savings A/C</td>
//             // <td class="tabdat" colspan=2><button id="fundbasedreloadButton" onclick="fundbasedReload()">Refresh!</button></td>
//             // </tr>`
//             // var row4 = `<tr id="${data[i].id}" onclick="tdClk(this)">
//             // <td class="tabdat" colspan=2>${data[i].id+624526766 || "-"}</td>
//             // <td class="tabdat" colspan=2>NO</td>
//             // <td class="tabdat" colspan=2>Sukanya Samridhhi Scheme</td>
//             // <td class="tabdat" colspan=2>Current A/C</td>
//             // <td class="tabdat" colspan=2><button id="fundbasedreloadButton" onclick="fundbasedReload()">Refresh!</button></td>
//             // </tr>`
//             // var row5 = `<tr id="${data[i].id}" onclick="advClk(this)">
//             // <td class="tabdat" colspan=2>${data[i].id+767656676 || "-"}</td>
//             // <td class="tabdat" colspan=2>Pending</td>
//             // <td class="tabdat" colspan=2>Senior Citizen Saving Scheme</td>
//             // <td class="tabdat" colspan=2>Salary Account</td>
//             // <td class="tabdat" colspan=2><button id="fundbasedreloadButton" onclick="fundbasedReload()">Refresh!</button></td>
//             // </tr>`
//             // var row6 = `<tr id="${data[i].id}" onclick="tkClk(this)">
//                           //               <td class="tabdat" colspan=2>${data[i].id || "-"}</td>
//                           //               <td class="tabdat" colspan=2>${data[i].email || "-"}</td>
//                           //               <td class="tabdat" colspan=2>${
//                             //                 data[i].first_name || "-"
//                           //               }</td>
//                           //               <td class="tabdat" colspan=2>${
//                             //                 data[i].last_name || "-"
//                           //               }</td>
//                           //               <td class="tabdat" colspan=2>${data[i].avatar || "-"}</td>
//                           //               </tr>`;
//             // var row7 = `<tr id="${data[i].id}" onclick="cpClk(this)">
//                           //               <td class="tabdat" colspan=2>${data[i].id || "-"}</td>
//                           //               <td class="tabdat" colspan=2>${data[i].email || "-"}</td>
//                           //               <td class="tabdat" colspan=2>${
//                             //                 data[i].first_name || "-"
//                           //               }</td>
//                           //               </tr>`;
//             // var row8 = `<tr id="${data[i].id}" onclick="leadClk(this)">
//                 //     <td class="tabdat" colspan=2>${data[i].id || "-"}</td>
//                 //     <td class="tabdat" colspan=2>Open</td>
//                 //     <td class="tabdat" colspan=2>Website</td>
//                 //     <td class="tabdat" colspan=2>${data[i].first_name || "-"}</td>
//                 //     <td class="tabdat" colspan=2>03-07-2022</td>
//                           //               </tr>`;

      // // table.innerHTML += row
      // // table1.innerHTML += row1
      // // table2.innerHTML += row2

      // // table3.innerHTML += row3
      // // table4.innerHTML += row4
      // // table5.innerHTML += row5

      // // table6.innerHTML += row6;
      // table7.innerHTML += row7;
      // table8.innerHTML += row8;
      // }
  //   }
  // })
  // .catch((error) => console.log(error));

async function casaClk(bgn, index,rel_flg) {
  var casadat;    //Correction by Adi, for customers who only have related acounts and no primary accounts
  let relationship_type;

  if (rel_flg) {
    casadat = rel_data["casa"][index];
    console.log(casadat,rel_data["casa"],index);
    relationship_type = casadat.Relationship_Type || "";
  }else{
    casadat = fb_casa[index]
    console.log(casadat);
    // relationship_type = casadat.ACCT_POA_AS_REC_TYPE != ""?"M":"-";
    relationship_type = "M";
  }

    let selectedAcid=casadat.ACID;
    document.getElementById("myModal4").style.display = "none";
    console.log(casadat);
    console.log("Branch sol id is", casadat.Branch_Sol_ID);
    prev_balance = casadat.Balance_Currency || "-";
    let branch = casadat.Branch_Sol_ID;
    let owner = casadat.Owner;
    let owner_name = "-";
    // let intRate;
    // for (let index = 0; index < interestRate.data.length; index++) {
    //   if (interestRate.data[index].Name == casadat.Name) {
    //     intRate = interestRate.data[index].Interest_Rate;
    //     break;
    //   }
      
    // }
    // console.log("INTR Rate", intRate);
    // console.log("INTEREST RATE", interestRate.data);
    if (owner != null) {
      owner_name = owner.name;
    }
    console.log("BRANCH ::: ",branch);
    let branch_name = "-";
    if (branch != null) {
      branch_name = branch.name;
    }
    
    else
    {
      branch_name=casadat.SOL_DESC;
    }
    let freeze_type = casadat.Freeze_Status || "-";
    let account_freeze = "No";
    if (freeze_type != "-") account_freeze = "Yes";
    let scheme = casadat.Scheme_Codes;
    let scheme_name = "-";
    if (scheme != null) {
      scheme_name = scheme.name;
    }
    else
    {
      scheme_name = casadat.SCHM_DESC;
    }
    if (casadat.A_c_Open_Date != null) {
      casadat.A_c_Open_Date = format_date(casadat.A_c_Open_Date.split("T")[0]);
    }
    console.log("ACCOUNT BALANCE ::: ",casadat.Balance_Currency);
    document.getElementById("accountdropdown").style.display = "none";
    if (flag == 0) modal.style.display = "block";
    flag = 0;
    var table = document.getElementById("modalDataTable1z");
    table.innerHTML = "";
    let hdr = "";
    // Changes for Related Parties - 310724
      hdr = `<tr>
      <th colspan=3>CASA</th> 
      <th id="ministat" colspan=1 style="display: flex;flex-direction: row;justify-content: end;">
      <div class="dropdown-container" onclick="togglePopupDropdown(this)">
        <span style='padding-left:2%' class="icon-click" id='drop-down-parent'><i class='fa fa-ellipsis' id='drop-down-icon'></i></span>
        <div  id="drop-down-parent" class="drop-down-body">
  
        <div class="options-drop-down-top" onclick="miniStatementOpen('${casadat.Name}')" >Mini Statement</div>
          <div class="options-drop-down-top"  onclick="getRelatedParty('${casadat.ACID}')" >Related Parties</div>
        </div>
      </div>
      </th>
      </tr>`;
           
    table.innerHTML += hdr;
  
    var row = `<tr>
                    <td class="tabdatt">Account Number</td>
                    <td class="tabdat" id="ctcsacn">${casadat.Name || "-"}</td>
                    <td class="tabdatt">Account Name</td>
                    <td class="tabdat" id="ctcsacn">${
                      casadat.Account_Name || "-"
                    }</td>
                  
                  </tr>
                  <tr>
                  <td class="tabdatt">Branch Name</td>
                  <td class="tabdat" id="ctcsol">${branch_name || "-"}</td>
                  <td class="tabdatt">Branch Sol</td>
                  <td class="tabdat" id="ctcsshc">${casadat.Branch || "-"}</td>
                 
                </tr>
                
                <tr>
                <td class="tabdatt">Account Type</td>
                <td class="tabdat" id="ctcactype">${resolve_account_type(
                  casadat.A_c_Type || "-"
                )}</td>
                <td class="tabdatt">Scheme Code</td>
                    <td class="tabdat" id="ctcsccd">${
                      casadat.Scheme_Code || "-"
                    }</td>
                </tr>
                <tr>
                <td class="tabdatt">Relationship</td>
                    <td class="tabdat" id="ctcsybl">${
                      relationship_type
                    }</td>
                    <td class="tabdatt">Scheme Name</td>
                    <td class="tabdat" id="ctcsbrch">${scheme_name || "-"}</td>
                </tr>
              
                <tr>
                  <td class="tabdatt">Account Status</td>
                  <td class="tabdat" id="ctcssch">${
                    resolve_account_status(casadat.Account_Status) || "-"
                  }</td>
                  <td class="tabdatt">Mode of Operation</td>
                  <td class="tabdat" id="ctcsbrch">${
                    casadat.Mode_of_Operation_Single_Joint || "-"
                  }</td>
                </tr>
                <tr>
               
                <td class="tabdatt">Cheque Allowed</td>
                <td class="tabdat" id="ctccheq">${
                  resolve_y_n(casadat.Cheque_Allowed_Y_N) || "-"
                }</td>
                <td class="tabdatt">Nomination Available</td>
                    <td class="tabdat" id="ctclamt">${
                      resolve_y_n(casadat.Nomination_Available_Y_N) || "-"
                    }</td>
                </tr>
                <tr>
                <td class="tabdatt">Account Open Date</td>
                    <td class="tabdat" id="ctcsybl">${
                      casadat.A_c_Open_Date || "-"
                    }</td>
                <td class="tabdatt">Employee Account</td>
                    <td class="tabdat" id="ctadvinrt">${
                      employee_account_format(casadat.Emp_flag || "-")
                    }</td>
              
      
                    
                </tr>
                
               
  
                `;
                console.log("ACCOUNT FLAG ::",  casadat.Emp_flag);
    if (casadat.ACCT_CLS_FLG == "Y") {
      row += `
      <tr>
                
      <td class="tabdatt">Account Closed</td>
      <td class="tabdat" id="ctclamt">${
       format_flag( casadat.ACCT_CLS_FLG || "-")
      }</td>
      <td class="tabdatt act-cls">Account Close Date</td>
    <td class="tabdat act-cls" id="ctclamt">${
      format_date(casadat.Account_Close_Date) || "-"
    }</td>
    </tr><tr>
    <td class="tabdatt">Currency</td>
                  <td class="tabdat" id="ctcsast">${
                 casadat.Currency_Amount || "-"
                  }</td>
  
                  <td class="tabdatt">Average Balance</td>
                  <td class="tabdat" id="accAvgBal_${selectedAcid}">${
                    "Loading.."
                  }</td>
                  </tr>
           `;
    } 
          // <td class="tabdatt">Account Ownership</td>
          //         <td class="tabdat" id="ctcsaccsts">${owner_name || "-"}</td>
    else{
      row+=`
      <tr>
                
      <td class="tabdatt">Account Closed</td>
      <td class="tabdat" id="ctclamt">${
       format_flag( casadat.ACCT_CLS_FLG || "-")
      }</td>
      <td class="tabdatt">Currency</td>
      <td class="tabdat" id="ctcsast">${
        casadat.Currency_Amount || "-"
      }</td>
      </tr>
      <tr>
      <td class="tabdatt">Account Balance</td>
      <td class="tabdat" id="ctcsactcasa">${
        format_bal2(casadat.Balance_Currency || "-")
      }<span id='bal-check-err-msg' style='padding-left:2%;'></span><span class='icon-click' id='refresh-parent' onclick="fundbasedReload('${
  casadat.Name || "-"
  }','casa')"><i class='fa fa-refresh blue' id='refresh-icon'></i></span></td>
  <td class="tabdatt">Average Balance</td>
                  <td class="tabdat" id="accAvgBal_${selectedAcid}">${
                    "Loading.."
                  }</td>
      </tr>
      `;
    }
    if (account_freeze == "Yes") {
      row += `
            <tr>
              <td class="tabdatt">Freeze Reason</td>
              <td class="tabdat" id="ctcsast">${casadat.Freeze_Reason || "-"}</td>
              
              <td class="tabdatt ">Freeze Type</td>
              <td class="tabdat " id="ctcsast">${freeze_type || "-"}</td>
          
              </tr>
            `;
    }
    row += `   
                  <tr>
                    <td class="tabdatt">Lien Amount</td>
                    <td class="tabdat" id="ctclamt">${
                      format_bal2(casadat.Lien_Amount || "-")
                    }</td>
                    <td class="tabdatt">Account Freeze</td>
                  <td class="tabdat" id="ctcsast">${account_freeze || "-"}</td>
                  </tr>
                  <tr>
                    <td class="tabdatt">Interest Rate</td>
                    <td class="tabdat" id="ctclamt">${
                      format_bal2(casadat.InterestRate || "-")
                      // format_bal2(intRate)
                    }</td>
                    <td class="tabdatt">Reason for Lien</td>
                    <td class="tabdat" id="ctclamt">${
                      casadat.Reason_for_Lien || "-"
                    }</td>
                 
                  
                
                  `;
   
  
  //   var hdr = `<div class="grid-container" id="modalGridHdr" style="grid-template-columns:100px repeat(2, 1fr auto);">
  //   <div class="grid-item">CASA</div>
  // </div>`;
  //   table.innerHTML += hdr;
  //   var row = `<div class="grid-container" id="modal" style="grid-template-columns:100px repeat(2, 1fr auto);">
  //   <div class="grid-item item-list">
  //   <div>Account Number</div>
  //   <div>${casadat.Name || "-"}</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Account Name</div>
  //   <div>${casadat.Account_Name || "-"}</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Branch Name</div>
  //   <div>${branch_name || "-"}</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Branch Sol</div>
  //   <div>${casadat.Branch || "-"}</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Account Type</div>
  //   <div>${resolve_account_type(casadat.A_c_Type || "-")}</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Scheme Code</div>
  //   <div>${casadat.Scheme_Code || "-"}</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>A/c Open Date</div>
  //   <div>${
  //                         casadat.A_c_Open_Date || "-"
  //                       }</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Scheme Name</div>
  //   <div>${scheme_name || "-"}</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Account Status</div>
  //   <div>${
  //                       resolve_account_status(casadat.Account_Status) || "-"
  //                     }</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Mode of Operation</div>
  //   <div>${
  //                       casadat.Mode_of_Operation_Single_Joint || "-"
  //                     }</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Cheque Allowed</div>
  //   <div>${
  //                     resolve_y_n(casadat.Cheque_Allowed_Y_N) || "-"
  //                   }</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Nomination Available</div>
  //   <div>${
  //                         resolve_y_n(casadat.Nomination_Available_Y_N) || "-"
  //                       }</div>
  //   </div>
  // <div class="grid-item item-list">
  //   <div>Account Closed</div>
  //   <div>${
  //     format_flag( casadat.ACCT_CLS_FLG || "-")
  //    }</div>
  //   </div>`;
  // if (casadat.ACCT_CLS_FLG == "Y") {
  //       row += `
  //   <div class="grid-item item-list">
  //   <div>Account Close Date</div>
  //   <div>${
  //     format_date(casadat.Account_Close_Date) || "-"
  //   }</div>
  //   </div>`;
  // }
  //   row += `
  //   <div class="grid-item item-list">
  //   <div>Currency</div>
  //   <div>${
  //     casadat.Currency_Amount || "-"
  //   }</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Account Balance</div>
  //   <div>${
  //     casadat.Balance_Currency || "-"
  //   }<span id='bal-check-err-msg' style='padding-left:2%;'></span><span class='icon-click' id='refresh-parent' onclick="fundbasedReload('${
  // casadat.Name || "-"
  // }')"><i class='fa fa-refresh blue' id='refresh-icon'></i></span>
  // </div></div>
  //   <div class="grid-item item-list">
  //   <div>Average Balance</div>
  //   <div>${
  //     casadat.AVGBAL || "-"
  //   }</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Lien Amount</div>
  //   <div>${
  //     casadat.AVGBAL || "-"
  //   }</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Account Freeze</div>
  //   <div>${account_freeze || "-"}</div>
  //   </div>
  //   <div class="grid-item item-list">
  //   <div>Interest Rate</div>
  //   <div>${
  //                         casadat.InterestRate || "-"
  //                       }</div>
  //   </div>
  //   `;
  //   if (casadat.Lien_Amount != null) {
  //     if (casadat.Lien_Amount > 0) {
  //       row += `<div class="grid-item item-list">
  //       <div>Reason for Lien</div>
  //       <div>${
  //                             casadat.Reason_for_Lien || "-"
  //                           }</div>
  //       </div>`;
  //     }
  //   }
  //   if (account_freeze == "Yes") {
  //     row += `
  //     <div class="grid-item item-list">
  //     <div>Freeze Reason</div>
  //     <div>${casadat.Freeze_Reason || "-"}</div>
  //     </div>
  //     <div class="grid-item item-list">
  //     <div>Freeze Type</div>
  //     <div>${freeze_type || "-"}</div>
  //     </div>
  //           `;
  //   }
    table.innerHTML += row;
    populateAverageBalanceForPopUps(selectedAcid);
    if (account_freeze == "No") {
      freeze_classes = document.getElementsByClassName("freeze-cls");
      for (i = 0; i < freeze_classes.length; i++) {
        freeze_classes[i].style.display = "none";
      }
    }
    let lien_amount = casadat.Lien_Amount;
    if (lien_amount == null) {
      lien_classes = document.getElementsByClassName("lien-cls");
      for (i = 0; i < lien_classes.length; i++) {
        lien_classes[i].style.display = "none";
      }
    } else {
      lien_amount = +lien_amount;
      if (lien_amount <= 0) {
        lien_classes = document.getElementsByClassName("lien-cls");
        for (i = 0; i < lien_classes.length; i++) {
          lien_classes[i].style.display = "none";
        }
      }
    }
    let act_closed = casadat.ACCT_CLS_FLG;
    if (act_closed != "Y") {
      let act_clses = document.getElementsByClassName("act-cls");
      for (i = 0; i < act_clses.length; i++) {
        act_clses[i].style.display = "none";
      }
    }
    if (ref_clicked) {
      fundbasedReload(casadat.Name || "-","casa");
    }
    span.onclick = () => {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
      $("#modalDataTable1z tr").remove();
    };
    window.onclick = (event) => {
      if (event.target == modal) {
        modal.style.display = "none";
        $("#modalDataTable1 tr").remove();
        $("#modalDataTable1z tr").remove();
      }
    };
  }
function format_flag(n){
  if (n == "-") {
    return "-";
  }else if (n == "Y" || n == "y") {
    return "Yes";
  }else if (n == "N" || n == "n") {
    return "No";
  }else{
    return n;
  }
}
function tdClk(bgn, index,rel_flg) {
  var tdddat; //Correction by Adi, for customers who only have related acounts and no primary accounts
  let relationship_type;

  if (rel_flg) {
    tdddat = rel_data["td"][index];
    relationship_type = tdddat.Relationship_Type || "";
  }else{
    tdddat = fb_td[index]
    // relationship_type = tdddat.ACCT_POA_AS_REC_TYPE != ""?"M":"-";
    relationship_type = "M";
  }

  let selectedAcid=tdddat.ACID;
  console.log(tdddat);
  let branch = tdddat.Branch_Sol_ID;
  let owner = tdddat.Owner;
  let owner_name = "-";
  if (owner != null) {
    owner_name = owner.name;
  }
  let deposit_str = null;
  if (
    (tdddat.Deposit_Period == null || tdddat.Deposit_Period == " ") &&
    (tdddat.Deposit_Period_Days == null || tdddat.Deposit_Period_Days == " ")
  ) {
    deposit_str = "-";
  } else {
    deposit_str =
      (tdddat.Deposit_Period || "-") +
      "M " +
      (tdddat.Deposit_Period_Days || "-") +
      "D";
  }

  let freeze_type = tdddat.Freeze_Status || "-";
  let account_freeze = "No";
  if (freeze_type != "-") account_freeze = "Yes";
  let branch_name = "-";
  if (branch != null) {
    branch_name = branch.name;
  }
  else
  {
    branch_name=tdddat.SOL_DESC;
  }
  let scheme = tdddat.Scheme_Codes;
  let scheme_name = "-";
  // let intRate;
  // for (let index = 0; index < interestRate.data.length; index++) {
  //   if (interestRate.data[index].Name == tdddat.Name) {
  //     intRate = interestRate.data[index].Interest_Rate;
  //     break;
  //   }
    
  // }
  // console.log("INTR Rate", intRate);
  // console.log("INTEREST RATE", interestRate.data);
  if (scheme != null) {
    scheme_name = scheme.name;
  }
  else
  {
    scheme_name=tdddat.SCHM_DESC;
  }
  prev_balance = tdddat.Balance_Currency || "-";
  if (tdddat.A_c_Open_Date != null) {
    tdddat.A_c_Open_Date = format_date(tdddat.A_c_Open_Date.split("T")[0]);
  }
  document.getElementById("accountdropdown").style.display = "none";
  if (flag == 0) modal.style.display = "block";
  flag = 0;
  var table = document.getElementById("modalDataTable1z");
  table.innerHTML = "";
  let hdr = "";
  // Changes for Related Parties - 310724
    hdr = `<tr>
    <th colspan=3>Term Deposit</th>
    <th id="ministat" colspan=1 style="display: flex;flex-direction: row;justify-content: end;">
    <div class="dropdown-container" onclick="togglePopupDropdown(this)">
      <span style='padding-left:2%' class="icon-click" id='drop-down-parent'><i class='fa fa-ellipsis' id='drop-down-icon'></i></span>
      <div  id="drop-down-parent" class="drop-down-body">

      <div class="options-drop-down-top" onclick="miniStatementOpen('${tdddat.Name}')" >Mini Statement</div>
        <div class="options-drop-down-top" onclick="getRelatedParty('${tdddat.ACID}')" >Related Parties</div>
      </div>
    </div>
    </th>
    </tr>`;

  
  table.innerHTML += hdr;
  var row = `<tr>
              <td class="tabdatt">Account Number</td>
              <td class="tabdat" id="ctcsacn">${tdddat.Name || "-"}</td>
              <td class="tabdatt">Account Name</td>
              <td class="tabdat" id="ctcsacn">${tdddat.Account_Name || "-"}</td>
            </tr>

            <tr>
            <td class="tabdatt">Branch Name</td>
            <td class="tabdat" id="ctcsshc">${branch_name || "-"}</td>
            <td class="tabdatt">Branch SOL</td>
            <td class="tabdat" id="ctcsbrch">${tdddat.Branch || "-"}</td>
          </tr>

            <tr>
              <td class="tabdatt">Account Type</td>
              <td class="tabdat" id="ctcssch">${resolve_account_type(
                tdddat.A_c_Type || "-"
              )}</td>
              <td class="tabdatt">Scheme Code</td>
                  <td class="tabdat" id="ctcsccd">${
                    tdddat.Scheme_Code || "-"
                  }</td>
            </tr>
            <tr>
              <td class="tabdatt">Relationship</td>
              <td class="tabdat" id="ctcssch">${
                relationship_type
              }</td>
              <td class="tabdatt"></td>
              <td class="tabdatt"></td>
            </tr>
            <tr>
                  <td class="tabdatt">Scheme Name</td>
                  <td class="tabdat" id="ctcsbrch">${scheme_name || "-"}</td>
                  <td class="tabdatt">Employee Account</td>
                  <td class="tabdat" id="ctadvinrt">${
                    employee_account_format(tdddat.Emp_flag || "-")
                  }</td>
                </tr>
           
                <tr>
              <td class="tabdatt">Account Open Date</td>
              <td class="tabdat" id="ctcsybl">${
                tdddat.A_c_Open_Date || "-"
              }</td>
              <td class="tabdatt">Deposit Period</td>
              <td class="tabdat" id="ctcsybl">${
                tdddat.Deposit_Period +
                  "M " +
                  tdddat.Deposit_Period_Days +
                  "D" || "-"
              }</td>
            </tr>
            <tr>
              <td class="tabdatt">Maturity Date</td>
              <td class="tabdat" id="ctcsshc">${format_date(
                tdddat.Maturity_Date || "-"
              )}</td>
              <td class="tabdatt">Nomination Available</td>
              <td class="tabdat" id="ctcnmavl">${
               format_flag( tdddat.Nomination_Available_Y_N || "-")
              }</td>
            </tr>

            <tr>
            <td class="tabdatt">Mode of Operation</td>
            <td class="tabdat" id="ctcsbrch">${
              tdddat.Mode_of_Operation_Single_Joint || "-"
            }</td>
            <td class="tabdatt">Account Closed</td>
          <td class="tabdat" id="ctclamt">${format_flag(tdddat.ACCT_CLS_FLG || "-")}</td>
          </tr>
          
`;

  if (tdddat.ACCT_CLS_FLG == "Y") {
    row += `
        <tr>
          
          <td class="tabdatt">Account Close Date</td>
          <td class="tabdat" id="ctclamt">${
            format_date(tdddat.Account_Close_Date) || "-"
          }</td>
          <td class="tabdatt">Currency</td>
              <td class="tabdat" id="ctcsast">${
            tdddat.Currency_Amount || "-"
              }</td>
        </tr>
        <tr>
        <td class="tabdatt">Account Balance</td>
        <td class="tabdat" id="ctcsacttd">${
          format_bal2(tdddat.Balance_Currency || "-")
        }</td>
    <td class="tabdatt"></td>
    <td class="tabdatt"></td>
      </tr>
`;
  } 
  // Account Balance 
  // <td class="tabdatt">Account Balance</td>
  //       <td class="tabdat" id="ctcsact">${
  //         format_bal2(tdddat.Balance_Currency || "-")
  //       }<span id='bal-check-err-msg' style='padding-left:2%;'></span><span class='icon-click' id='refresh-parent' onclick="fundbasedReload('${
  //   tdddat.Name || "-"
  //   }')"><i class='fa fa-refresh blue' id='refresh-icon'></i></span></td>
  else {
    row += `
    <tr>
    <td class="tabdatt">Account Balance</td>
    <td class="tabdat" id="ctcsacttd">${
      format_bal2(tdddat.Balance_Currency || "-")
    }</td>
    <td class="tabdatt">Currency</td>
    <td class="tabdat" id="ctcsast">${
            tdddat.Currency_Amount || "-"
    }</td>
  </tr>
          `;
  }
  row += `
            <tr>
                      
              <td class="tabdatt">Deposit Amount</td>
              <td class="tabdat" id="ctclamt">${
                format_bal2(tdddat.Deposit_Amount) || "-"
              }</td>
              <td class="tabdatt">Maturity Amount</td>
                  <td class="tabdat" id="ctcsast">${
                    format_bal2(tdddat.Maturity_Amount || "-")
                  }</td>
            </tr>
            <tr>
            <td class="tabdatt">Lien Amount</td>
            <td class="tabdat" id="ctcsast">${format_bal2(tdddat.Lien_Amount || "-")}</td>
            <td class="tabdatt">Average Balance</td>
            <td class="tabdat" id="accAvgBal_${selectedAcid}">${
              "Loading.."
            }</td>
  </tr>

            <tr>
            <td class="tabdatt">Interest Rate</td>
  <td class="tabdat" id="ctclamt">${
    format_bal2(tdddat.InterestRate || "-")
    // format_bal2(intRate)
  }</td>
            
              `;
  if (tdddat.Lien_Amount == null) {
    row += `<td class="tabdatt">Reason For Lien</td>
  <td class="tabdat" id="ctclien">${
    tdddat.Reason_for_Lien || "-"
  }<span id='bal-check-err-msg' style='padding-left:2%;display:none'></span><span class='icon-click' style='display:none' id='refresh-parent' onclick="fundbasedReload('${
      tdddat.Name || "-"
    }',"td")"><i class='fa fa-refresh blue' id='refresh-icon'></i></span></td>
</tr>`;
  } else {
    row += `
    <td class="tabdatt">Account Freeze</td>
    <td class="tabdat" id="ctcsast">${account_freeze || "-"}</td>
  `;
  }
  if (account_freeze == "Y") {
    row += ` <tr> 
            <td class="tabdatt freeze-cls">Freeze Reason</td>
            <td class="tabdat freeze-cls" id="ctcsast">${
              tdddat.Freeze_Reason || "-"
            }</td>
          
            <td class="tabdatt freeze-cls">Freeze Type</td>
            <td class="tabdat freeze-cls" id="ctcsast">${
              freeze_type || "-"
            }</td>
        
            </tr>
            `;
  }
  
  table.innerHTML += row;
  populateAverageBalanceForPopUps(selectedAcid);
  if (account_freeze == "No") {
    freeze_classes = document.getElementsByClassName("freeze-cls");
    for (i = 0; i < freeze_classes.length; i++) {
      freeze_classes[i].style.display = "none";
    }
  }
  let lien_amount = tdddat.Lien_Amount;
  if (lien_amount == null) {
    lien_classes = document.getElementsByClassName("lien-cls");
    for (i = 0; i < lien_classes.length; i++) {
      lien_classes[i].style.display = "none";
    }
  } else {
    lien_amount = +lien_amount;
    if (lien_amount <= 0) {
      lien_classes = document.getElementsByClassName("lien-cls");
      for (i = 0; i < lien_classes.length; i++) {
        lien_classes[i].style.display = "none";
      }
    }
  }
  let act_closed = tdddat.ACCT_CLS_FLG;
  if (act_closed != "Y") {
    let act_clses = document.getElementsByClassName("act-cls");
    for (i = 0; i < act_clses.length; i++) {
      act_clses[i].style.display = "none";
    }
  }
  if (ref_clicked) {
    fundbasedReload(tdddat.Name || "-","td");
  }
  span.onclick = () => {
    modal.style.display = "none";
    $("#modalDataTable1 tr").remove();
    $("#modalDataTable1z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
      $("#modalDataTable1z tr").remove();
    }
  };
}

function format_loan_type(ias,product_code){
  // IASCode In ('RETAL','STRET') And PurposeOfAdv = '95011'
  // IASCode In ('AGNPS','AGRIS','AGRPS')
  if (ias == null || ias == "") {
    return "-";
  }if (ias == 'RETAL'|| ias == 'STRET') {
    if (product_code == 95011 || product_code == 95001) return "Home Loan";
    if (product_code == 95012 || product_code == 95002) return "Vehicle Loan";
    else return "Other Retail Loan";
  }if (ias == 'MICRO'|| ias == 'SMALL' || ias == 'MEDIUM') return "MSME Loan";
  if (ias == 'AGNPS'|| ias == 'AGRIS' || ias == 'AGRPS') return "Agri Loan";
  else return "Other Loan";
}

function advClk(bgn, index,rel_flg) {
  var addat;  //Correction by Adi, for customers who only have related acounts and no primary accounts
  let relationship_type;
  if (rel_flg) {
    addat = rel_data["adv"][index];
    relationship_type = addat.Relationship_Type || "";
  }else{
    addat = fb_adv[index];
    // relationship_type = addat.ACCT_POA_AS_REC_TYPE != ""?"M":"-";
    relationship_type = "M";
  }
  let selectedAcid=addat.ACID;
  console.log(addat);
  console.log("Branch sol ID is", addat.Branch_Sol_ID);
  console.log("advance scheme name is", addat.Scheme_Name);

  let sol_id = addat.Branch_Name || "-";
  let sol_lookup = addat.Branch_Sol_ID || "-";
  let sol_name = "";
  if (sol_lookup == "-") {
    sol_name = "-";
  } else {
    sol_name = sol_lookup.name || "-";
  }

  let sol_str = "";
  if (sol_name == "-" && sol_id == "-") {
    sol_str = "-";
  } else if (sol_name == "-" && sol_id != "-") {
    sol_str += `${sol_id}`;
  } else if (sol_name != "-" && sol_id == "-") {
    sol_str += `${sol_name}`;
  } else {
    sol_str += `${sol_name}(${sol_id})`;
  }

  prev_balance = addat.Balance_Currency || "-";
  if (addat.Account_Close_Date != null) {
    addat.Account_Close_Date = format_date(
      addat.Account_Close_Date.split("T")[0]
    );
  }
  if (addat.Last_UnFreeze_Date != null) {
    addat.Last_UnFreeze_Date = format_date(
      addat.Last_UnFreeze_Date.split("T")[0]
    );
  }
  document.getElementById("accountdropdown").style.display = "none";
  if (flag == 0) modal.style.display = "block";
  flag = 0;
  var table = document.getElementById("modalDataTable1z");
  table.innerHTML = "";
  let hdr = "";
  // Changes for Related Parties - 310724
    hdr = `<tr>
    <th colspan=3>Advances</th>
    <th id="ministat" colspan=1 style="display: flex;flex-direction: row;justify-content: end;">
    <div class="dropdown-container" onclick="togglePopupDropdown(this)">
      <span style='padding-left:2%' class="icon-click" id='drop-down-parent'><i class='fa fa-ellipsis' id='drop-down-icon'></i></span>
      <div  id="drop-down-parent" class="drop-down-body">

      <div class="options-drop-down-top" onclick="miniStatementOpen('${addat.Name}')" >Mini Statement</div>
        <div class="options-drop-down-top" onclick="getRelatedParty('${addat.ACID}')" >Related Parties</div>
      </div>
    </div>
    </th>
    </tr>`;
                                
  table.innerHTML += hdr;
  try {
    scheme_name = addat.Scheme_Name.name;
  } catch (error) {
    scheme_name = "-";
    scheme_name=addat.SCHM_DESC;
  }
  let owner = addat.Owner;
  let owner_name = "-";
  if (owner != null) {
    owner_name = owner.name;
  }

  try {
    Branch_Sol_ID = addat.Branch_Sol_ID.name;
  } catch (error) {
    Branch_Sol_ID = "-";
    Branch_Sol_ID=addat.SOL_DESC;
  }
  var row = `
  <tr>
  <td class="tabdatt">Account Number</td>
                  <td class="tabdat" id="ctadvacn">${addat.Name || "-"}</td>
  <td class="tabdatt">Account Name</td>
                  <td class="tabdat" id="ctadvacn">${
                    addat.Account_Name || "-"
                  }</td>
  </tr>
  <tr>
  <td class="tabdatt">Branch Sol</td>
  <td class="tabdat" id="ctadvbrch">${addat.Branch_Name || "-"}</td>
  <td class="tabdatt">Branch Name</td>
  <td class="tabdat" id="ctadvbrch">${Branch_Sol_ID || "-"}</td>
  
</tr>
<tr>
<td class="tabdatt">Relationship</td>
<td class="tabdatt">${relationship_type}</td>
<td class="tabdatt"></td>
<td class="tabdatt"></td>
  </tr>
<tr>
<td class="tabdatt">Scheme Type</td>
                  <td class="tabdat" id="ctadvacn">${
                    addat.A_c_Type_Current_Saving || "-"
                  }</td>
<td class="tabdatt">Scheme Code</td>
                <td class="tabdat" id="ctadvacn">${
                  addat.Scheme_Code || "-"
                }</td>
  </tr>
  <tr>
  <td class="tabdatt">Scheme Description</td>
                  <td class="tabdat" id="ctadvacn">${scheme_name || "-"}</td>
                  <td class="tabdatt">Account Open Date</td>
                  <td class="tabdat" id="ctadvacn">${
               format_date(addat.A_c_Open_Date) || "-"
                  }</td>
  </tr>
 
                <tr>		
                  
                  <td class="tabdatt">Employee Account</td>
                  <td class="tabdat" id="ctadvinrt">${
                    employee_account_format(addat.Emp_Flag	 || "-")
                  }</td>
                  <td class="tabdatt">Mode of Operation</td>
                  <td class="tabdat" id="ctadvsch">${
                    addat.Mode_of_Operation || "-"
                  }</td>
                </tr>
                <tr>
                  
                  <td class="tabdatt">Cheque Allowed</td>
                  <td class="tabdat" id="ctadvsch">${
                   format_flag( addat.Cheque_Allowed || "-")
                  }</td>
                  <td class="tabdatt">Account Closed</td>
                  <td class="tabdat" id="ctadvshc">${
                   format_flag( addat.Account_Close_Flag || "-")
                  }</td>
                </tr>
               
                <tr>
                 
                  `;
  if (addat.Account_Close_Flag == "Y") {
    row += `
                <td class="tabdatt">Account Close Date</td>
                  <td class="tabdat" id="ctadvpram">${format_date(
                    addat.Account_Close_Date || "-"
                  )}</td>
                  <td class="tabdatt"></td>
                <td class="tabdatt"></td>
                  `;
  } 
  // <td class="tabdatt">Account Ownership</td>
  //                 <td class="tabdat" id="ctadvacn">${owner_name || "-"}</td>

  row += `
                </tr>
                
                <tr>
                <td class="tabdatt">Currency</td>
                <td class="tabdat" id="ctadvacn">${
                  addat.Currency_Code || "-"
                }</td>
                  <td class="tabdatt">Sanctioned Amount</td>
                  <td class="tabdat" id="ctadvact">${
                    format_bal2(addat.Sanctioned_Amount || "-")
                  }</td>
                </tr>
`;
if (
  (addat.A_c_Type_Current_Saving == "ODA"||
  addat.A_c_Type_Current_Saving == "CCA") &&
  addat.Account_Close_Flag == "N" 
  ) {
    console.log("BAL HERE2",addat.A_c_Type_Current_Saving || "-");
  row+=`
  <tr>
                  <td class="tabdatt">Outstanding Amount</td>
                  <td class="tabdat" id="ctcsactadv">${
                    format_bal3(addat.Balance_Currency) || "-"
                  }<span id='bal-check-err-msg' style='padding-left:2%;'></span><span class='icon-click' id='refresh-parent' onclick="fundbasedReload('${
                    addat.Name || "-"
                    }','adv','${addat.A_c_Type_Current_Saving || "-"}')"><i class='fa fa-refresh blue' id='refresh-icon'></i></span></td>
  `;
}else{
  row+=`
  <tr>
                  <td class="tabdatt">Outstanding Amount</td>
                  <td class="tabdat" id="ctcsactadv">${
                    format_bal3(addat.Balance_Currency) || "-"
                  }</td>
  `;
}
  if (addat.A_c_Type_Current_Saving == "LAA") {
    //fields to be displayed for LAA scheme types
    row += `    
   
    <td class="tabdatt">Loan Period</td>
    <td class="tabdat" id="ctadvybl">${
      addat.Loan_Period || "-"
    }</td>
              </tr>
              <tr>
               
                <td class="tabdatt">EMI Amount</td>
                <td class="tabdat" id="ctadvcrcy">${
                  format_bal2(addat.EMI_Amount || "-")
                }</td>
                <td class="tabdatt">EMI Start Date</td>
                <td class="tabdat" id="ctadvinrt">${
                  format_date(addat.EMI_Start_Date) || "-"
                }</td>
              </tr>
              <tr>
             
              <td class="tabdatt">Overdue Amount</td>
              <td class="tabdat" id="ctadvscam">${
                format_bal2(addat.Overdue_Amount || "-")
              }</td>
              <td class="tabdatt">Overdue Since</td>
              <td class="tabdat" id="ctadvinrt">${format_date(addat.Overdue_Since || "-")}</td>
            </tr>

            <tr>
            <td class="tabdatt">SMA Date</td>
                  <td class="tabdat" id="ctadvinrt">${
                    format_date(addat.Date_6) || "-"
                  }</td>
                  <td class="tabdatt">SMA Movement (Present Status)</td>
          <td class="tabdat" id="ctadvinrt">${addat.SMA_Status || "-"}</td>
          </tr>

          <tr>
          

          <td class="tabdatt">SMA Status (Month Start)</td>
          <td class="tabdat" id="ctadvinrt">${addat.SMA_Movement || "-"}</td>
          <td class="tabdatt">Reason for SMA0/SMA1/SMA2</td>
          <td class="tabdat" id="ctadvinrt">${addat.Reason_for_SMA0_SMA1_SMA2 || "-"}</td>
          </tr>
        
        
`;
    var t = addat.Overdue_Since || "-";
    if (t != "-") {
      row += `
      <tr>
      <td class="tabdatt">Amount Recovered</td>
      <td class="tabdat" id="ctadvinrt">${format_bal2(addat.Amount_Recovered || "-")}</td>
    <td class="tabdatt">Disbursed Amount</td>
                  <td class="tabdat" id="ctcamtrcv">${
                    format_bal2(addat.Total_Disbursement_in_Amount || "-")
                  }</td>
    </tr>
`;
    } else {
      row += `
      <tr>
      <td class="tabdatt">Disbursed Amount</td>
                  <td class="tabdat" id="ctcdsbamt">${
                    format_bal2(addat.Total_Disbursement_in_Amount || "-")
                  }</td>
                  <td class="tabdatt"></td>
                  <td class="tabdatt"></td>
      </tr>`;
    }
  } else {
    //fields to be displayed for other scheme types
    row += `
              
                  <td class="tabdatt">Last stock statement submission date</td>
                  <td class="tabdat" id="ctadvinrt">${
                    format_date(addat.Last_stock_statement_submission_date) ||
                    "-"
                  }</td>
                </tr>`;
  }

  row += `    
                <tr>
                <td class="tabdatt">Date of NPA</td>
                <td class="tabdat" id="ctadvinrt">${
                    format_date(addat.Date_of_NPA_History) || "-"
                  }</td>
                <td class="tabdatt">NPA History</td>
                <td class="tabdat" id="ctadvnpahist">${
                  addat.History_of_NPA || "-"
                }</td>
               
                </tr>

                <tr>
                <td class="tabdatt">Security Amount</td>
                <td class="tabdat" id="ctadvinrt">${
                  format_bal2(addat.Security_Amount || "-")
                }</td>
                <td class="tabdatt">Client Sector</td>
                <td class="tabdat" id="ctadvsecam">${
                  addat.Client_Sector || "-"
                }</td>
                 
                </tr>
               <tr>
               <td class="tabdatt">Interest Rate</td>
               <td class="tabdat" id="ctclamt">${
                 format_bal2(addat.InterestRate || "-")
               }</td>
               <td class="tabdatt">Last Inspection date</td>
               <td class="tabdat" id="ctadvinrt">${
                 format_date(addat.Last_Inspection_date) || "-"
               }</td>
               <tr>
               <td class="tabdatt">Loan Type</td>
               <td class="tabdat" id="ctclntyp">${
                 format_loan_type(addat.IAS_Code || "-",addat.Purpose_of_Advance)
               }</td>
               <td class="tabdatt">Review Date</td>
               <td class="tabdat" id="ctadvinrt">${
                 format_date(addat.Review_Date) || "-"
               }</td>
               </tr>
               <tr>
               <td class="tabdatt">Average Balance</td>
               <td class="tabdat" id="accAvgBal_${selectedAcid}">${
                 "Loading.."
               }</td>
               <td class="tabdatt">Purpose of Advance</td>
               <td class="tabdat" id="ctpupfadv">(${addat.Purpose_of_Advance}) ${
                 addat.Purpose_of_Advance_Desc || "-"
               }</td>
               </tr>
                `;
  table.innerHTML += row;
  populateAverageBalanceForPopUps(selectedAcid);
  if (addat.Account_Close_Flag != "Y") {
    let act_clses = document.getElementsByClassName("act-cls");
    for (i = 0; i < act_clses.length; i++) {
      act_clses[i].style.display = "none";
    }
  }
  if (addat.SMA_Status != "NPA") {
    let npa_clses = document.getElementsByClassName("npa-cls");
    for (i = 0; i < npa_clses.length; i++) {
      npa_clses[i].style.display = "none";
    }
  }
  if (ref_clicked) {
    console.log("BAL HERE1",addat.Name || "-","adv",addat.A_c_Type_Current_Saving || "-");    
    fundbasedReload(addat.Name || "-","adv",addat.A_c_Type_Current_Saving || "-");
  }
  span.onclick = () => {
    modal.style.display = "none";
    $("#modalDataTable1 tr").remove();
    $("#modalDataTable1z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
      $("#modalDataTable1z tr").remove();
    }
  };
}
function nonfundrowclick(bgn, index, type) {
  document.getElementById("accountdropdown").style.display = "none";
  console.log("non-fund row click", nfb_data[index]);
  if (type == "Letter of Credit") {
    locClk(bgn, index);
  } else if (type == "Bank Guarantee") {
    bgnClk(bgn, index);
  } else if (type == "Forward Contract") {
    fcrClk(bgn, index);
  }
}
function bgnClk(bgn, index) {
  // bank_guarantee=nfb_data;
  var bgndat = nfb_data[index];
  let sol_id = bgndat.SOL || "-";
  let sol_lookup = bgndat.SOL_ID || "-";
  let sol_name = "";
  if (sol_lookup == "-") {
    sol_name = "-";
  } else {
    sol_name = bgndat.SOL_ID.name || "-";
  }

  let sol_str = "";
  if (sol_name == "-" && sol_id == "-") {
    sol_str = "-";
  } else if (sol_name == "-" && sol_id != "-") {
    sol_str += `${sol_id}`;
  } else if (sol_name != "-" && sol_id == "-") {
    sol_str += `${sol_name}`;
  } else {
    sol_str += `${sol_name}(${sol_id})`;
  }
  document.getElementById("accountdropdown").style.display = "none";
  modal.style.display = "block";
  var table = document.getElementById("modalDataTable1z");
  let hdr = `<tr>
                                    <th colspan=2>Bank Guarantee</th>
                                    </tr>`;
  table.innerHTML += hdr;
  console.log(bgndat.BG_No_Bank_Gurantee, "BGN NO...");
  var row = `<tr>
                  <td class="tabdatt">Bank Guarantee No.</td>
                  <td class="tabdat" id="ctbgbgno">${
                    bgndat.BG_No_Bank_Gurantee || "-"
                  }</td>
                </tr><tr>
                  <td class="tabdatt">BG Amount</td>
                  <td class="tabdat" id="ctbgbgamt">${bgndat.Amount || "-"}</td>
                </tr>
                <tr>
                  <td class="tabdatt">BG Type</td>
                  <td class="tabdat" id="ctbgbgtyp">${
                    bgndat.BG_Type || "-"
                  }</td>
                </tr>
                <tr>
                  <td class="tabdatt">Expiry Date</td>
                  <td class="tabdat" id="ctbgexdt">${
                    format_date(bgndat.Expiry_Date) || "-"
                  }</td>
                </tr>
                <tr>
                  <td class="tabdatt">Currency</td>
                  <td class="tabdat" id="ctbgexdt">${
                    bgndat.Currency_Code || "-"
                  }</td>
                </tr>
                <tr>
                  <td class="tabdatt">Beneficiary Name</td>
                  <td class="tabdat" id="ctbgexdt">${
                    bgndat.Beneficiary_Name || "-"
                  }</td>
                </tr>
                <tr>
                  <td class="tabdatt">SOL</td>
                  <td class="tabdat" id="ctbgexdt">${sol_str}</td>
                </tr>
                `;
  table.innerHTML += row;
  span.onclick = () => {
    modal.style.display = "none";
    $("#modalDataTable1 tr").remove();
    $("#modalDataTable1z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
      $("#modalDataTable1z tr").remove();
    }
  };
}

function locClk(bgn, index) {
  // letter_of_credit=stadat_loc;
  var locdat = nfb_data[index];
  let sol_id = locdat.SOL || "-";
  let sol_lookup = locdat.SOL_ID || "-";
  let sol_name = "";
  if (sol_lookup == "-") {
    sol_name = "-";
  } else {
    sol_name = locdat.SOL_ID.name || "-";
  }

  let sol_str = "";
  if (sol_name == "-" && sol_id == "-") {
    sol_str = "-";
  } else if (sol_name == "-" && sol_id != "-") {
    sol_str += `${sol_id}`;
  } else if (sol_name != "-" && sol_id == "-") {
    sol_str += `${sol_name}`;
  } else {
    sol_str += `${sol_name}(${sol_id})`;
  }
  console.log(locdat);
  document.getElementById("accountdropdown").style.display = "none !important";
  modal.style.display = "block";
  var table = document.getElementById("modalDataTable1z");
  let hdr = `<tr>
                        <th colspan=2>Letter of Credit</th>
                        </tr>`;
  table.innerHTML += hdr;
  var row = `<tr>
      <td class="tabdatt">Letter of Credit No.</td>
      <td class="tabdat" id="ctbglocn">${
        locdat.LC_No_Letter_of_Credit_No || "-"
      }</td>
    </tr>
    <tr>
      <td class="tabdatt">Amount</td>
      <td class="tabdat" id="ctbglcamt">${locdat.Amount || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">Expiry Date</td>
      <td class="tabdat" id="ctbglcbfn">${
        format_date(locdat.Expiry_Date) || "-"
      }</td>
    </tr>
    <tr>
      <td class="tabdatt">SOL</td>
      <td class="tabdat" id="ctbglccur">${sol_str}</td>
    </tr>
    <tr>
      <td class="tabdatt">Currency</td>
      <td class="tabdat" id="ctbglccur">${locdat.Currency_Code || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">Beneficiary Name</td>
      <td class="tabdat" id="ctbglccur">${locdat.Beneficiary_Name || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">LC Register(Letter of Credit Register)</td>
      <td class="tabdat" id="ctbglccur">${
        locdat.LC_Register_Letter_of_Credit_Register || "-"
      }</td>
    </tr>
    `;
  table.innerHTML += row;
  span.onclick = () => {
    modal.style.display = "none";
    $("#modalDataTable1 tr").remove();
    $("#modalDataTable1z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
      $("#modalDataTable1z tr").remove();
    }
  };
}

function fcrClk(bgn, index) {
  console.log(bgn, index);
  console.log("forward_contracts", nfb_data);

  // forward_contracts=nfb_data;
  var fcrdat = nfb_data[index];
  let sol_id = fcrdat.SOL || "-";
  let sol_lookup = fcrdat.SOL_ID || "-";
  let sol_name = "";
  if (sol_lookup == "-") {
    sol_name = "-";
  } else {
    sol_name = fcrdat.SOL_ID.name || "-";
  }

  let sol_str = "";
  if (sol_name == "-" && sol_id == "-") {
    sol_str = "-";
  } else if (sol_name == "-" && sol_id != "-") {
    sol_str += `${sol_id}`;
  } else if (sol_name != "-" && sol_id == "-") {
    sol_str += `${sol_name}`;
  } else {
    sol_str += `${sol_name}(${sol_id})`;
  }
  document.getElementById("accountdropdown").style.display = "none !important";
  modal.style.display = "block";
  var table = document.getElementById("modalDataTable1z");
  let hdr = `<tr>
                        <th colspan=2>Forward Contract</th>
                        </tr>`;
  table.innerHTML += hdr;
  var row = `<tr>
      <td class="tabdatt">Forward Contract No.</td>
      <td class="tabdat" id="ctbgfcfcn">${fcrdat.Forward_Contract || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">Amount</td>
      <td class="tabdat" id="ctbgfcctat">${fcrdat.Contract_Amount || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">Valid To</td>
      <td class="tabdat" id="ctbgfcosb">${
        format_date(fcrdat.Validity_To) || "-"
      }</td>
    </tr>
    <tr>
      <td class="tabdatt">SOL</td>
      <td class="tabdat" id="ctbgfcvlto">${sol_str}</td>
    </tr>
    <tr>
      <td class="tabdatt">Currency</td>
      <td class="tabdat" id="ctbgfcvlto">${fcrdat.Currency_Code || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">O/S Balance</td>
      <td class="tabdat" id="ctbgfcvlto">${fcrdat.O_s_Balance || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">Register Type</td>
      <td class="tabdat" id="ctbgfcvlto">${fcrdat.Register_Type || "-"}</td>
    </tr>
    `;
  table.innerHTML += row;
  span.onclick = () => {
    modal.style.display = "none";
    $("#modalDataTable1 tr").remove();
    $("#modalDataTable1z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
      $("#modalDataTable1z tr").remove();
    }
  };
}

function tkClk(bgn) {
  document.getElementById("accountdropdown").style.display = "none !important";
  modal.style.display = "block";
  var table = document.getElementById("modalDataTable1z");
  let hdr = `<tr>
                        <th colspan=2>Tickets</th>
                        </tr>`;
  table.innerHTML += hdr;
  var row = `<tr>
      <td class="tabdatt">Account Number</td>
      <td class="tabdat" id="ctcsacn"></td>
    </tr>
    <tr>
      <td class="tabdatt">Account Open</td>
      <td class="tabdat" id="ctcsaco"></td>
    </tr>
    <tr>
      <td class="tabdatt">Scheme</td>
      <td class="tabdat" id="ctcssch"></td>
    </tr>
    <tr>
      <td class="tabdatt">Scheme Code</td>
      <td class="tabdat" id="ctcsshc"></td>
    </tr>
    <tr>
      <td class="tabdatt">Account Type</td>
      <td class="tabdat" id="ctcactyp"></td>
    </tr>
    <tr>
      <td class="tabdatt">Status</td>
      <td class="tabdat" id="ctcsast"></td>
    </tr>
    <tr>
      <td class="tabdatt">Balance as of Yesterday</td>
      <td class="tabdat" id="ctcsybl"></td>
    </tr>
    <tr>
      <td class="tabdatt">Branch</td>
      <td class="tabdat" id="ctcsbrch"></td>
    </tr>
    <tr>
      <td class="tabdatt">SOL Id</td>
      <td class="tabdat" id="ctcssid"></td>
    </tr>
    <tr>
      <td class="tabdatt">Currency</td>
      <td class="tabdat" id="ctcscrcy"></td>
    </tr>
    <tr>
      <td class="tabdatt">Lien Amount</td>
      <td class="tabdat" id="ctcslam"></td>
    </tr>
    <tr>
      <td class="tabdatt">Average Balance</td>
      <td class="tabdat" id="ctcsavbl"></td>
    </tr>`;
  table.innerHTML += row;
  span.onclick = () => {
    modal.style.display = "none";
    $("#modalDataTable1 tr").remove();
    $("#modalDataTable1z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
      $("#modalDataTable1z tr").remove();
    }
  };
}

function debitnoClk(debit_card) {
  document.getElementById("accountdropdown").style.display = "none !important";
  modal2.style.display = "block";

  var table = document.getElementById("modalDataTable2z");
  let hdr = `<tr>
                        <th colspan=2>Debit Card Details</th>
                        </tr>`;
  // table.innerHTML += hdr;
  table.innerHTML=`<div style="position:relative;width:100%;height:40px;background-color:white;border-radius:4px;box-shadow: 0 2px 8px 0 #b1b1b1;">${block_loader_html}</div>`;
  let func_name = "DebitCardReq_API";
  let params = { Cardno: debit_card };
  call_crm_function(func_name, params)
    .then((res) => {
      console.log("debit card info is", res);
      table.innerHTML="";
      //
      if (res.code == "success") {
        stadat = "";
        stadat = JSON.parse(res.details.output);
        console.log("debit card before cleansing", stadat);
        stadat = stadat.data;
        console.log("debit card cleansed data", stadat);
        let resp = stadat.statusCode || "";
        console.log("resp is", resp);
        console.log(resp);
        if (resp == "S") {
          table.innerHTML = "";
          let hdr = `<tr>
                                <th colspan=2>Debit Card Details</th>
                                </tr>`;
          table.innerHTML += hdr;
          // var table = document.getElementById('modalDataTable2z');
          var row = `
        <tr>
        <td class="tabdatt">Account Number</td>
        <td class="tabdat" id="ctcaccnt">${stadat.accountNumber || "-"}</td>
      </tr>
      <tr>
      <td class="tabdatt">Card Status</td>
      <td class="tabdat" id="ctccrdstatus">${stadat.cardStatus || "-"}</td>
        </tr>`;
          table.innerHTML += row;
        }else{
          table.innerHTML = `<tr>
          <td class="tabdatt">${stadat.RESULT_MSG}</td>
        </tr>`;
        }
      } else {
        table.innerHTML = `<tr>
      <td class="tabdatt">Something went wrong</td>
    </tr>`;
      }
      console.log("loading close 21");
      document.getElementById("loadingWrapper").style.display = "none";
      //
    })
    .catch((err) => {
      table.innerHTML = `<tr>
      <td class="tabdatt">Something went wrong</td>
    </tr>`;
      console.log("Error in fetching debit card info", err);
      console.log("loading close 22");
      document.getElementById("loadingWrapper").style.display = "none";
    });

  span2.onclick = () => {
    modal2.style.display = "none";

    $("#modalDataTable2z tr").remove();
    $("#modalDataTable2 tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal2) {
      modal2.style.display = "none";
      $("#modalDataTable2z tr").remove();
      $("#modalDataTable2 tr").remove();
    }
  };
}

function cpClk(bgn) {
  document.getElementById("accountdropdown").style.display = "none !important";
  modal.style.display = "block";
  var table = document.getElementById("modalDataTable1z");
  let hdr = `<tr>
                        <th colspan=2>Campaigns</th>
                        </tr>`;
  table.innerHTML += hdr;
  var row = `<tr>
      <td class="tabdatt">Account Number</td>
      <td class="tabdat" id="ctcsacn"></td>
    </tr>
    <tr>
      <td class="tabdatt">Account Open</td>
      <td class="tabdat" id="ctcsaco"></td>
    </tr>
    <tr>
      <td class="tabdatt">Scheme</td>
      <td class="tabdat" id="ctcssch"></td>
    </tr>
    <tr>
      <td class="tabdatt">Scheme Code</td>
      <td class="tabdat" id="ctcsshc"></td>
    </tr>
    <tr>
      <td class="tabdatt">Account Type</td>
      <td class="tabdat" id="ctcactyp"></td>
    </tr>
    <tr>
      <td class="tabdatt">Status</td>
      <td class="tabdat" id="ctcsast"></td>
    </tr>
    <tr>
      <td class="tabdatt">Balance as of Yesterday</td>
      <td class="tabdat" id="ctcsybl"></td>
    </tr>
    <tr>
      <td class="tabdatt">Branch</td>
      <td class="tabdat" id="ctcsbrch"></td>
    </tr>
    <tr>
      <td class="tabdatt">SOL Id</td>
      <td class="tabdat" id="ctcssid"></td>
    </tr>
    <tr>
      <td class="tabdatt">Currency</td>
      <td class="tabdat" id="ctcscrcy"></td>
    </tr>
    <tr>
      <td class="tabdatt">Lien Amount</td>
      <td class="tabdat" id="ctcslam"></td>
    </tr>
    <tr>
      <td class="tabdatt">Average Balance</td>
      <td class="tabdat" id="ctcsavbl"></td>
    </tr>`;
  table.innerHTML += row;
  span.onclick = () => {
    modal.style.display = "none";
    $("#modalDataTable1 tr").remove();
    $("#modalDataTable1z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
      $("#modalDataTable1z tr").remove();
    }
  };
}
function leadClk1(id){
  window.open(
    "https://ucrm.unionbankofindia.co.in/crm/org60009764661/tab/Leads/"+id
  );
}

function leadClk(bgn, ind) {
  // document.getElementById("accountdropdown").style.display = "none !important";
  modal3.style.display = "block";
  let selected_lead = leads_results[ind];
  let pc = "-";
  let pc1 = selected_lead.Pin_Code;
  let pc2;
  try {
    pc2 = selected_lead.pin_code_lookup.name;
  } catch (err) {
    console.log("pincode lookup is not present in the record", err);
    pc2 = null;
  }
  if (pc1 != null) {
    pc = pc1;
  } else if (pc2 != null) {
    pc = pc2;
  }
  var table = document.getElementById("modalDataTable3z");
  let hdr = `<tr>
                        <th colspan=2>Leads</th>
                        </tr>`;
  table.innerHTML += hdr;
  var row = `<tr>
      <td class="tabdatt">Customer Reference ID</td>
      <td class="tabdat" id="ctcsacn">${
        selected_lead.Customer_Reference_Id || "-"
      }</td>
    </tr>
    <tr>
      <td class="tabdatt">Lead Status</td>
      <td class="tabdat" id="ctcsaco">${selected_lead.Lead_Status || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">Lead source</td>
      <td class="tabdat" id="ctcssch">${selected_lead.Lead_Source || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">Lead owner</td>
      <td class="tabdat" id="ctcsshc">${selected_lead.Owner.name || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">Created Date</td>
      <td class="tabdat" id="ctccrtld">${
        format_date(selected_lead.Created_Time.split("T")[0]) || "-"
      }</td>
    </tr>
    <tr>
      <td class="tabdatt">Lead Owner Region Name</td>
      <td class="tabdat" id="ctcsast">${selected_lead.Region_Name || "-"}</td>
    </tr>
    <tr>
      <td class="tabdatt">Pincode</td>
      <td class="tabdat" id="ctcsybl">${pc}</td>
    </tr>`;
  table.innerHTML += row;
  span3.onclick = () => {
    modal3.style.display = "none";
    $("#modalDataTable3 tr").remove();
    $("#modalDataTable3z tr").remove();
  };
  window.onclick = (event) => {
    if (event.target == modal3) {
      modal3.style.display = "none";
      $("#modalDataTable3 tr").remove();
      $("#modalDataTable3z tr").remove();
    }
  };
}
function window_clk(e) {
  console.log("window clicked. Target is ", e.target);
  if (!e.target.classList.contains("dr")) {
    let drop_downs = document.getElementsByClassName("drop-content");
    for (i = 0; i < drop_downs.length; i++) {
      drop_downs[i].classList.remove("flex-row");
      drop_downs[i].classList.remove("flex-col");
      drop_downs[i].classList.add("hide");
    }
  }
}
window.addEventListener("click", (e) => {
  window_clk(e);
});
function show_drop(content_id) {
  document.getElementById(content_id).classList.toggle("hide"); //No I18N
  document.getElementById(content_id).classList.toggle("flex-col"); //No I18N
  //console.log(content_id," drop down clicked. selected element is",document.getElementById(content_id),content_id);	//No I18N
}
//function to show the cheque status of populated chequebooks on SR tab
function cheque_status_on_click(start_chq_no,leaves_no)
{
  show_cheque_status();
  //select the account number
  let select_elem=document.getElementById('c_s_acc_no');
  let select_options=select_elem.options;
  let selected_account_chqb = document.getElementById("cb-drop-select").innerHTML.trim();
  // console.log("SELECTED OPTION FOR CHEQUE", select_options ,selected_account_chqb);
  for(i=0;i<select_elem.options.length;i++)
  {
    if(select_options[i].text==selected_account_chqb)
    {
      select_options[i].selected=true;
      break;
    }
  }
  // click range of cheques toggle
  let check_box=document.getElementById('range_chkbox');
  if(!check_box.checked)
  {
    check_box.click();
  }
  //populate the from and to cheque numbers
  document.getElementById('from_chq_no').value=start_chq_no;
  document.getElementById('to_chq_no').value=Number(start_chq_no)+Number(leaves_no)-1;
  //call cheque status
  cheque_status();

}

function get_two_digit(d)
{
	if(d<10)
	{
		return `0${d}`;
	}
	else
	{
		return `${d}`;	
	}
}

function updateSubForm(parentModule,recordId,subFormName,subFormUpdateArray)
{
  let apiUrl="https://ucrmapi.unionbankofindia.co.in/crm/v6";
  let inputData={
    "data":[
      {"id": recordId}
    ]
  };
  inputData["data"][0][subFormName]=subFormUpdateArray;
  var reqData={
    parameters:inputData,
    method:"PUT",
    url:apiUrl+"/"+parentModule,
    param_type:2
  };
  return ZOHO.CRM.CONNECTION.invoke("zohocrm",reqData);
}

//notes changes
function showPopUp(popUpId,backdropId)
{
  document.getElementById(backdropId).classList.remove("hide"); //No I18N
  document.getElementById(backdropId).classList.add("flex-row"); //No I18N
  document.getElementById(popUpId).classList.remove("hide"); //No I18N
}
function closePopUp(popUpId,backdropId)
{
  document.getElementById(backdropId).classList.add("hide"); //No I18N
  document.getElementById(backdropId).classList.remove("flex-row"); //No I18N
  document.getElementById(popUpId).classList.add("hide"); //No I18N
}
//

function show_cheque_status() {
  //code to block debit card
  //this triggers a pop-up asking for confirmation before blocking the card
  document.getElementById("cheque_pop_up_backdrop").classList.remove("hide"); //No I18N
  document.getElementById("cheque_pop_up_backdrop").classList.add("flex-row"); //No I18N
  document.getElementById("cheque_status_pop_up").classList.remove("hide"); //No I18N
  // document.getElementById('c_acc_no').innerHTML=selected_account;	//No I18N
  document.getElementById("cheque_status_pop_up").classList.add("small"); //No I18N
  document.getElementById("cheque_status_pop_up").classList.add("large"); //No I18N
  document.getElementById("c_s_acc_no").focus();
}
function search_debit_card() {
  //code to block debit card
  //this triggers a pop-up asking for confirmation before blocking the card
  document.getElementById("cheque_pop_up_backdrop").classList.remove("hide"); //No I18N
  document.getElementById("cheque_pop_up_backdrop").classList.add("flex-row"); //No I18N
  document.getElementById("debit_card_search_pop_up").classList.remove("hide"); //No I18N

  // document.getElementById('c_acc_no').innerHTML=selected_account;	//No I18N
  document.getElementById("debit_card_search_pop_up").classList.add("small"); //No I18N
  document.getElementById("debit_card_search_pop_up").classList.add("large"); //No I18N
  document.getElementById("acct_no_ds").focus();
  // document.getElementById("acct_no_dd").innerHTML = "";
  document.getElementById("acct_no_ds").addEventListener("click", () => {
    show_drop("acc_drop_content");
  });
}

//function to show small notifications on screen as a ribbon
function show_notification_msg(notification_type,header_msg,content,reference, reference_position="header")
{
  console.log("inside show notification message");
  let notification_container=document.getElementById('notify_ribbon');
  if(typeof reference!=="undefined")
  {
    if(reference_position=="header")
    {
      header_msg+=`<a href=${reference.href} target="_blank">${reference.value}</a>`
    }
    else if(reference_position=="content")
    {
      content+=`<a href=${reference.href} target="_blank">${reference.value}</a>`
    }
  }
 if(notification_type.toLowerCase()=='success')
 {
  //show success message
  notification_container.innerHTML=`<div class="notification-ribbon-long"><div class="border-left-green notification-content-container"><div class="notification-icon-container"></div><div class="notification-msg-container"><div class="msg-header">${header_msg}</div><div class="msg-body">${content}</div></div><div class="close-notification"><i style="font-size: 20px;" class="fa fa-close"></i></div></div></div>`;
 }
 else if(notification_type.toLowerCase()=="info")
 {
  //show message as info
  notification_container.innerHTML=`<div class="notification-ribbon"><div class="border-left-blue notification-content-container"><div class="notification-icon-container"></div><div class="notification-msg-container"><div class="msg-header">${header_msg}</div><div class="msg-body">${content}</div></div><div class="close-notification"><i style="font-size: 20px;" class="fa fa-close"></i></div></div></div>`;
 }
 else if(notification_type.toLowerCase()=="failure")
 {
  //show failure msg
  notification_container.innerHTML=`<div class="notification-ribbon-long"><div class="border-left-yellow notification-content-container"><div class="notification-icon-container"></div><div class="notification-msg-container"><div class="msg-header">${header_msg}</div><div class="msg-body">${content}</div></div><div class="close-notification"><i style="font-size: 20px;" class="fa fa-close"></i></div></div></div>`;
 }
 else if(notification_type.toLowerCase()=="alert")
 {
  //show failure msg
  notification_container.innerHTML=`<div class="notification-ribbon-long"><div class="border-left-red notification-content-container"><div class="notification-icon-container"></div><div class="notification-msg-container"><div class="msg-header">${header_msg}</div><div class="msg-body">${content}</div></div><div class="close-notification"><i style="font-size: 20px;" class="fa fa-close"></i></div></div></div>`;
 }
 document.getElementsByClassName("close-notification")[0].onclick=()=>{document.getElementById("notify_ribbon").innerHTML="";}
}
//Change for ATM Lodge complaint change
function call_desk_ticket_create_API(desk_contact_id, subject, desc, assigneeId, type, area, sub_area, account_number = null, card_number = null, email = null, phone = null, from_cheq = null, to_cheq = null, error_record_id = null, remarks = null, resolution = null, fromDate = null, toDate = null, Ticket_Type = null, Service_Request = null, status = null, cf_transaction_amount = null, cf_transaction_date = null, cf_transaction_particulars = null, cf_sequence_no_rrn = null, channel = null,cf_atmclaim_complaint_no=null, cf_amount_at_the_time_freezing_lien_in_rs= null, cf_lien_remarks = null, cf_lein_code = null, cf_acknowledgement_number = null,cf_log = null,teamId=null,branchSolId=null) {
  let branch_sol_id;
  let conn_name = "zohodesk";
  let p = {
    "contactId": desk_contact_id,
    "subject": subject,
    "description": desc,
    "departmentId": "358000000150158",
    "status": "Closed"
  };
  if (status != null) {
    p["status"] = status;
  }
  if (channel != null) {
    p["channel"] = channel;
  }
  if ((assigneeId != null)&&(teamId==null) ) {
    p["assigneeId"] = assigneeId;
  }
  else if(teamId)
  {
    p["teamId"]=teamId;
  }
  if ((type != null) || (area != null) || (sub_area != null) || cf_log!=null || branchSolId !=null) {
    let cf_json = {};
    if(cf_log != null)
    {
      cf_json["cf_log"]=cf_log;
    }
    if (cf_transaction_amount != null) {
      cf_json["cf_transaction_amount"] = cf_transaction_amount;
    }
  
    if (cf_transaction_date != null) {
      cf_json["cf_transaction_date"] = cf_transaction_date;
    }
    if (cf_transaction_particulars != null) {
      cf_json["cf_transaction_particulars"] = cf_transaction_particulars;
    }

    if (cf_sequence_no_rrn != null) {
      cf_json["cf_sequence_no_rrn"] = cf_sequence_no_rrn;
    }
    if (cf_atmclaim_complaint_no != null) {
      cf_json["cf_atmclaim_complaint_no"] = cf_atmclaim_complaint_no;
    }
    if(branchSolId!=null)
    {
      cf_json["cf_branch_sol_id"] = branchSolId;
      cf_json["cf_complaint_branch_sol_id"] = branchSolId;
    }
    if (type != null) {
      cf_json["cf_type"] = type;
      if (type == "Service Request" && area == "Fraud Transaction") {
        cf_json["cf_ticket_type_1"] = "Service Request";
        let pick_values = area + "::";
        if (sub_area != null) {
          cf_json["cf_service_request"] = pick_values + sub_area + "::";
        }

        //mintu
      } else if (type == "Complaint") {
        cf_json["cf_ticket_type_1"] = "Complaint - others";
        let pick_values1 = area + "::";
        if (sub_area != null) {
          cf_json["cf_complaint"] = pick_values1 + sub_area + "::";

        }
      }
      //mintu
      else {
        cf_json["cf_ticket_type_1"] = "Service Request";
        let pick_values = '';
        if (area != null) {
          pick_values += area + "::";
          if (sub_area != null) {
            pick_values += sub_area + "::";
            cf_json["cf_service_request"] = pick_values;
          }
        }
      }
    }
    if (area != null) {
      cf_json["cf_area"] = area;
    }
    if (sub_area != null) {
      cf_json["cf_sub_area"] = sub_area;
    }
    if (account_number != null) {

      if(!branchSolId)
      {
        branch_sol_id = get_branch_sol_id(account_number);
      }
      console.log("getting branch sol id for account", account_number, branch_sol_id);
      if (branch_sol_id != "-" && branch_sol_id !== undefined && branch_sol_id!=null) {
        cf_json["cf_branch_sol_id"] = branch_sol_id;
        cf_json["cf_complaint_branch_sol_id"] = branch_sol_id;
      }
      cf_json["cf_account_number"] = `${account_number}`.replace(/\n/g, '').replace(/\t/g, '').replaceAll(" ", '');
      cf_json["cf_customer_account_number"] = `${account_number}`.replace(/\n/g, '').replace(/\t/g, '').replaceAll(" ", '');
      //cf_json["cf_account_number"]=account_number;
    }
    if (card_number != null) {
      cf_json["cf_card_number"] = card_number;
    }
    if (from_cheq != null) {
      cf_json["cf_chq_number_from"] = from_cheq;
    }
    if (to_cheq != null) {
      cf_json["cf_chq_number_to"] = to_cheq;
    }

    // Change for Debit Freeze - 310724
    if (remarks != null) {
      cf_json["cf_remarks"] = remarks;
    }
    //change for adding Type_Ticket
    if (Ticket_Type != null) {
      cf_json["cf_ticket_type_1"] = Ticket_Type;
    }
    //change: additional ticket fields for automated ticket creation
    cf_json["cf_resident_status"] = res_status_for_desk || "-";
    cf_json["cf_customer_id"] = custid;
    cf_json["cf_is_existing_customer"] = "Yes";
    //change for adding from Date & To Date
    if (fromDate) {
      cf_json["cf_from_date"] = fromDate;
    }
    if (toDate) {
      cf_json["cf_to_date1"] = toDate;
    }

    if (error_record_id) {
      cf_json["cf_error_log"] = "Ticket Owner fetch failed. For more details, find the CRM error log: " + String(error_record_id);
    }
    if (cf_amount_at_the_time_freezing_lien_in_rs != null) {
      cf_json["cf_amount_at_the_time_freezing_lien_in_rs"] = cf_amount_at_the_time_freezing_lien_in_rs;
    }
    if (cf_lien_remarks != null) {
      cf_json["cf_lien_remarks"] = cf_lien_remarks;
    }
    if (cf_lein_code != null) {
      cf_json["cf_lein_code"] = cf_lein_code;
    }
    if (cf_acknowledgement_number != null) {
      cf_json["cf_acknowledgement_number"] = cf_acknowledgement_number;
    }
    if(logged_in_user_full_name)
    {
      cf_json["cf_primary_owner_name"]=logged_in_user_full_name;
    }
    if(logged_in_user_mail)
    {
      cf_json["cf_primary_owner_email"]=logged_in_user_mail;
    }

    p["cf"] = cf_json;
    console.log("cf json is", cf_json);
  }
  if (phone != null) {
    p["phone"] = phone;
  }
  if (email != null) {
    p["email"] = email;
  }
  //change for adding remarks
  if (resolution != null) {
    p["resolution"] = resolution;
  }

  let base_url = "https://service.unionbankofindia.co.in//api/v1/tickets";
  let req_data = {
    headers: {
      "x-zoho-fromservice": "ZohoSupport"
    }, //No I18N
    method: "POST", //No I18N
    url: base_url, //No I18N
    parameters: p
  };
  ret_val = ZOHO.CRM.CONNECTION.invoke(conn_name, req_data).then((d) => {
    console.log("ticket is created in desk", d);
    if (d.code == "SUCCESS") {

      let ticket_data = d.details.statusMessage;
      if (typeof ticket_data.errorCode == "undefined") {
        console.log("ticket created in desk", ticket_data);

        let ticket_id = ticket_data.id;
        let ticket_number = ticket_data.ticketNumber;
        let type = ticket_data.cf.cf_type;
        if (type == "Complaint") {
          show_notification_msg("success", "Ticket Created: ", "Complaint ticket created", { value: `#${ticket_number}`, href: "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/details/" + ticket_id });

        } else {
          show_notification_msg("success", "Ticket Created: ", "Service Request ticket created", { value: `#${ticket_number}`, href: "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/details/" + ticket_id });
        }
      }
      else {
        //ticket creation failed
        show_notification_msg("failure", "Ticket Creation Failed", "Could not create ticket. Please try ", { value: `here`, href: "https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/new" }, "content");
      }

    }
    //call to notification ribbon to show ticket created message 

    return d;
  }).catch((e) => {
    console.log("error in creating ticket in desk", e);
    //call to notification ribbon to show ticket creation failed message with a hyperlink
    show_notification_msg("failure", "Ticket Creation Failed", "Could not create ticket");
    return 0;
  });
}
// Change for Debit Freeze - 310724
// Change for adding remarks
/* old call_desk_ticket_create_api
function call_desk_ticket_create_API(desk_contact_id,subject,desc,assigneeId,type,area,sub_area,account_number=null,card_number=null,email=null,phone=null,from_cheq=null,to_cheq=null,error_record_id=null,remarks=null,resolution=null,fromDate=null,toDate=null,Ticket_Type=null,Service_Request=null)
{
  let branch_sol_id;
  let conn_name="zohodesk";
  let p={
    "contactId" : desk_contact_id,
    "subject" : subject,
    "description" : desc,
    "departmentId":"358000000150158",
    "status" : "Closed"
  };
  if(assigneeId!=null)
  {
    p["assigneeId"]=assigneeId;
  }
  if((type!=null)||(area!=null)||(sub_area!=null))
  {
    let cf_json={};
    if(type!=null)
    {
      cf_json["cf_type"]=type;
      if(area=="Fraud Transaction")
      {
        cf_json["cf_ticket_type_1"]="Service Request";
        let pick_values=area+"::";
        if(sub_area!=null)
        {
          cf_json["cf_service_request"]=pick_values+sub_area+"::";
        }
        
      }
      else
      {
        cf_json["cf_ticket_type_1"]="Service Request";
        let pick_values='';
        if(area!=null)
        {
          pick_values+=area+"::";
          if(sub_area!=null)
          {
            pick_values+=sub_area+"::";
            cf_json["cf_service_request"]=pick_values;
          }
        }
      }
    }
    if(area!=null)
    {
      cf_json["cf_area"]=area;
    }
    if(sub_area!=null)
    {
      cf_json["cf_sub_area"]=sub_area;
    }
    if(account_number!=null)
    {
      branch_sol_id=get_branch_sol_id(account_number);
      console.log("getting branch sol id for account",account_number,branch_sol_id);
      if(branch_sol_id!="-" || branch_sol_id!==undefined)
      {
        cf_json["cf_branch_sol_id"]=branch_sol_id;
        cf_json["cf_complaint_branch_sol_id"]=branch_sol_id;
      }
      cf_json["cf_account_number"]=`${account_number}`.replace(/\n/g,'').replace(/\t/g,'').replaceAll(" ",'');
      cf_json["cf_customer_account_number"]=`${account_number}`.replace(/\n/g,'').replace(/\t/g,'').replaceAll(" ",'');
      //cf_json["cf_account_number"]=account_number;
    }
    if(card_number!=null)
    {
      cf_json["cf_card_number"]=card_number;
    }
    if(from_cheq!=null)
    {
      cf_json["cf_chq_number_from"]=from_cheq;
    }
    if(to_cheq!=null)
    {
      cf_json["cf_chq_number_to"]=to_cheq;
    }

    // Change for Debit Freeze - 310724
    if(remarks!=null)
    {
      cf_json["cf_remarks"]=remarks;
    }
    //change for adding Type_Ticket
    if(Ticket_Type!=null)
    {
      cf_json["cf_ticket_type_1"]=Ticket_Type;
    }
    //change: additional ticket fields for automated ticket creation
    cf_json["cf_resident_status"]=res_status_for_desk||"-";
    cf_json["cf_customer_id"]=custid;
    cf_json["cf_is_existing_customer"]="Yes";
    //change for adding from Date & To Date
  if(fromDate)
  {
    cf_json["cf_from_date"]=fromDate;
  }
  if(toDate)
  {
    cf_json["cf_to_date1"]=toDate;
  }
    
    if(error_record_id)
    {
      cf_json["cf_error_log"]="Ticket Owner fetch failed. For more details, find the CRM error log: "+String(error_record_id);
    }
    p["cf"]=cf_json;
    console.log("cf json is",cf_json);
  }
  if(phone!=null)
  {
    p["phone"]=phone;
  }
  if(email!=null)
  {
    p["email"]=email;
  }
  //change for adding remarks
  if(resolution!=null)
  {
    p["resolution"]=resolution;
  }
  
  let base_url="https://service.unionbankofindia.co.in//api/v1/tickets";
  let req_data = {
    headers: {
      "x-zoho-fromservice":"ZohoSupport"
      }, //No I18N
    method: "POST", //No I18N
    url: base_url, //No I18N
    parameters:p
  };
  ret_val=ZOHO.CRM.CONNECTION.invoke(conn_name, req_data).then((d)=>{
    console.log("ticket is created in desk",d);
    if(d.code=="SUCCESS")
    {
  
      let ticket_data=d.details.statusMessage;
      if(typeof ticket_data.errorCode=="undefined")
      {
        let ticket_id=ticket_data.id;
        let ticket_number=ticket_data.ticketNumber;
        show_notification_msg("success","Ticket Created: ","Service Request ticket created",{value:`#${ticket_number}`,href:"https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/details/"+ticket_id});
      }
      else
      {
        //ticket creation failed
        show_notification_msg("failure","Ticket Creation Failed","Could not create ticket. Please try ",{value:`here`,href:"https://service.unionbankofindia.co.in/agent/ccudesk/union-bank-of-india/tickets/new"},"content");
      }
      
    }
    //call to notification ribbon to show ticket created message 
    
    return d;
}).catch((e)=>{
  console.log("error in creating ticket in desk",e); 
  //call to notification ribbon to show ticket creation failed message with a hyperlink
  show_notification_msg("failure","Ticket Creation Failed","Could not create ticket");
  return 0;
});
}
*/
//change by Mintu for ATM claim change
// Lien Mark changes - added 4 new fields in params : cf_acknowledgement_number, cf_amount_at_the_time_freezing_lien_in_rs, cf_lien_remarks, cf_lein_code
function create_ticket_in_desk(subject, desc, type, area, sub_area, account_number = null, card_number = null, email = null, phone = null, from_cheq = null, to_cheq = null, remarks = null, resolution = null, fromDate = null, toDate = null, Ticket_Type = null, Service_Request = null, status = null, cf_transaction_amount = null, cf_transaction_date = null, cf_transaction_particulars = null, cf_sequence_no_rrn = null, channel = null,cf_atmclaim_complaint_no=null, cf_amount_at_the_time_freezing_lien_in_rs= null, cf_lien_remarks = null, cf_lein_code = null, cf_acknowledgement_number = null, cf_log = null,teamId = null,branchSolId=null) {
  //temporary restriction
  // return;
  
  var error_record_id;
  console.log("creating desk ticket");
  //code to create ticket on successful debit card hotlisting / cheque stop
  var conn_name = "zohodesk"; //No I18N
  base_url =
    "https://service.unionbankofindia.co.in//api/v1/tickets"; //No I18N
  console.log(base_url);

  //call to notification ribbon, to show loading message
  if (type == "Complaint") {
    show_notification_msg("info", "Creating Ticket", "Creating ticket for Complaint");
  } else {
    show_notification_msg("info", "Creating Ticket", "Creating ticket for Service Request");
  }
  if (desk_agent_id != null) {
    // Change for Debit Freeze - 310724
    call_desk_ticket_create_API(ds_record_id, subject, desc, desk_agent_id, type, area, sub_area, account_number, card_number, email, phone, from_cheq, to_cheq, null, remarks, resolution, fromDate, toDate, Ticket_Type, Service_Request, status, cf_transaction_amount, cf_transaction_date, cf_transaction_particulars, cf_sequence_no_rrn, channel,cf_atmclaim_complaint_no, cf_amount_at_the_time_freezing_lien_in_rs, cf_lien_remarks, cf_lein_code,cf_acknowledgement_number,cf_log,teamId,branchSolId);
  }
  else {
    ZOHO.CRM.CONFIG.getCurrentUser().then((d) => {
      console.log("user data is", d);
      let current_user = d.users[0];
      logged_in_user_mail = current_user.email;

      //Fetch agent id from desk 
      let p = {
        "contactId": desk_contact_id,
        "subject": subject,
        "description": desc,
        "departmentId": "358000000150158",
        "status": "Closed"
      };
      let base_url = "https://service.unionbankofindia.co.in/api/v1/agents/email/" + logged_in_user_mail;

      let req_data = {
        headers: {
          "x-zoho-fromservice": "ZohoSupport"
        }, //No I18N
        method: "GET", //No I18N
        url: base_url, //No I18N
      };
      let conn_name = "zohodesk";
      ZOHO.CRM.CONNECTION.invoke(conn_name, req_data).then(async (d) => {
        console.log("agent details from desk is", d);
        if (d.status == "success") {
          let resp_details = d.details;
          if (resp_details.status == "true") {
            if ((resp_details.statusMessage != '') && (resp_details.statusMessage != null)) {
              desk_agent_id = resp_details.statusMessage.id;
              // Change for Debit Freeze - 310724
              call_desk_ticket_create_API(ds_record_id, subject, desc, desk_agent_id, type, area, sub_area, account_number, card_number, email, phone, from_cheq, to_cheq, null, remarks, resolution, fromDate, toDate, Ticket_Type, Service_Request, status, cf_transaction_amount, cf_transaction_date, cf_transaction_particulars, cf_sequence_no_rrn, channel,cf_atmclaim_complaint_no, cf_amount_at_the_time_freezing_lien_in_rs, cf_lien_remarks, cf_lein_code,cf_acknowledgement_number,cf_log,teamId,branchSolId);
            }
            else {
              let error_obj = { URL: base_url, Error: "Status Message is empty/null.", Response: d };
              error_record_id = await write_to_error_log_module_async("Get Agent Details - Desk", error_obj);
              // Change for Debit Freeze - 310724
              call_desk_ticket_create_API(ds_record_id, subject, desc, null, type, area, sub_area, account_number, card_number, email, phone, from_cheq, to_cheq, error_record_id, remarks, resolution, fromDate, toDate, Ticket_Type, Service_Request, status, cf_transaction_amount, cf_transaction_date, cf_transaction_particulars, cf_sequence_no_rrn, channel,cf_atmclaim_complaint_no, cf_amount_at_the_time_freezing_lien_in_rs, cf_lien_remarks, cf_lein_code,cf_acknowledgement_number,cf_log,teamId,branchSolId);
            }
          }
          else {
            let error_obj = { URL: base_url, Error: "Failed response.", Response: d };
            error_record_id = await write_to_error_log_module_async("Get Agent Details - Desk", error_obj);
            // Change for Debit Freeze - 310724
            call_desk_ticket_create_API(ds_record_id, subject, desc, null, type, area, sub_area, account_number, card_number, email, phone, from_cheq, to_cheq, error_record_id, remarks, resolution, fromDate, toDate, Ticket_Type, Service_Request, status, cf_transaction_amount, cf_transaction_date, cf_transaction_particulars, cf_sequence_no_rrn, channel,cf_atmclaim_complaint_no, cf_amount_at_the_time_freezing_lien_in_rs, cf_lien_remarks, cf_lein_code,cf_acknowledgement_number,cf_log,teamId,branchSolId);
          }
        }
        else {
          let error_obj = { URL: base_url, Error: "Failed response.", Response: d };
          error_record_id = await write_to_error_log_module_async("Get Agent Details - Desk", error_obj);
          // Change for Debit Freeze - 310724
          call_desk_ticket_create_API(ds_record_id, subject, desc, null, type, area, sub_area, account_number, card_number, email, phone, from_cheq, to_cheq, error_record_id, remarks, resolution, fromDate, toDate, Ticket_Type, Service_Request, status, cf_transaction_amount, cf_transaction_date, cf_transaction_particulars, cf_sequence_no_rrn, channel,cf_atmclaim_complaint_no, cf_amount_at_the_time_freezing_lien_in_rs, cf_lien_remarks, cf_lein_code,cf_acknowledgement_number,cf_log,teamId,branchSolId);
        }
      }).catch((e) => { console.log("error in creating ticket in desk", e); throw new Error('Could not fetch agent details' + String(e)); });

    }).catch((e) => {
      // write_to_error_log_module("");
      console.log("Could not fetch user details", e);
      try {
        error_record_id = write_to_error_log_module_async("Get Agent Details - Desk", e);
      }
      catch (ec) {
        //discard error silently
      }
      // Change for Debit Freeze - 310724
      call_desk_ticket_create_API(desk_contact_id, subject, desc, null, type, area, sub_area, account_number, card_number, email, phone, from_cheq, to_cheq, error_record_id, remarks, resolution, fromDate, toDate, Ticket_Type, Service_Request, status, cf_transaction_amount, cf_transaction_date, cf_transaction_particulars, cf_sequence_no_rrn, channel,cf_atmclaim_complaint_no, cf_amount_at_the_time_freezing_lien_in_rs, cf_lien_remarks, cf_lein_code,cf_acknowledgement_number,cf_log,teamId,branchSolId);

    });
  }
  return 0;
}
// Change for Debit Freeze - 310724
/* Old create_ticket_in_desk function
function create_ticket_in_desk(subject,desc,type,area,sub_area,account_number=null,card_number=null,email=null,phone=null,from_cheq=null,to_cheq=null,remarks=null,resolution=null,fromDate=null,toDate=null,Ticket_Type=null,Service_Request=null)
{
  //temporary restriction
  // return;
  var error_record_id;
  console.log("creating desk ticket");
  //code to create ticket on successful debit card hotlisting / cheque stop
  var conn_name = "zohodesk"; //No I18N
  base_url =
    "https://service.unionbankofindia.co.in//api/v1/tickets"; //No I18N
  console.log(base_url);

  //call to notification ribbon, to show loading message
  show_notification_msg("info","Creating Ticket","Creating ticket for service request");
  
  if(desk_agent_id!=null)
  {
    // Change for Debit Freeze - 310724
    call_desk_ticket_create_API(ds_record_id,subject,desc,desk_agent_id,type,area,sub_area,account_number,card_number,email,phone,from_cheq,to_cheq,null,remarks,resolution,fromDate,toDate,Ticket_Type,Service_Request);
  }
  else
  {
    ZOHO.CRM.CONFIG.getCurrentUser().then((d)=>{
      console.log("user data is",d);
      let current_user=d.users[0];
      logged_in_user_mail=current_user.email;

      //Fetch agent id from desk 
      let p={
        "contactId" : desk_contact_id,
        "subject" : subject,
        "description" : desc,
        "departmentId":"358000000150158",
        "status" : "Closed"
      };
      let base_url = "https://service.unionbankofindia.co.in/api/v1/agents/email/"+logged_in_user_mail;
      
      let req_data = {
        headers: {
          "x-zoho-fromservice":"ZohoSupport"
          }, //No I18N
        method: "GET", //No I18N
        url: base_url, //No I18N
      };
      let conn_name="zohodesk";
      ZOHO.CRM.CONNECTION.invoke(conn_name, req_data).then(async (d)=>{
        console.log("agent details from desk is",d); 
        if(d.status=="success")
        {
          let resp_details=d.details;
          if(resp_details.status=="true")
          {
            if((resp_details.statusMessage!='')&&(resp_details.statusMessage!=null))
            {
              desk_agent_id=resp_details.statusMessage.id;
              // Change for Debit Freeze - 310724
              call_desk_ticket_create_API(ds_record_id,subject,desc,desk_agent_id,type,area,sub_area,account_number,card_number,email,phone,from_cheq,to_cheq,null,remarks,resolution,fromDate,toDate,Ticket_Type,Service_Request);
            }
            else
            {
              let error_obj={URL:base_url,Error:"Status Message is empty/null.",Response:d};
              error_record_id=await write_to_error_log_module_async("Get Agent Details - Desk",error_obj);
              // Change for Debit Freeze - 310724
              call_desk_ticket_create_API(ds_record_id,subject,desc,null,type,area,sub_area,account_number,card_number,email,phone,from_cheq,to_cheq,error_record_id,remarks,resolution,fromDate,toDate,Ticket_Type,Service_Request);
            }
          }
          else
          {
            let error_obj={URL:base_url,Error:"Failed response.",Response:d};
            error_record_id=await write_to_error_log_module_async("Get Agent Details - Desk",error_obj);
            // Change for Debit Freeze - 310724
            call_desk_ticket_create_API(ds_record_id,subject,desc,null,type,area,sub_area,account_number,card_number,email,phone,from_cheq,to_cheq,error_record_id,remarks,resolution,fromDate,toDate,Ticket_Type,Service_Request);
          }
        }
        else
        {
            let error_obj={URL:base_url,Error:"Failed response.",Response:d};
            error_record_id=await write_to_error_log_module_async("Get Agent Details - Desk",error_obj);
            // Change for Debit Freeze - 310724
            call_desk_ticket_create_API(ds_record_id,subject,desc,null,type,area,sub_area,account_number,card_number,email,phone,from_cheq,to_cheq,error_record_id,remarks,resolution,fromDate,toDate,Ticket_Type,Service_Request);
        }
     }).catch((e)=>{console.log("error in creating ticket in desk",e);throw new Error('Could not fetch agent details'+String(e));});

    }).catch((e)=>{
      // write_to_error_log_module("");
      console.log("Could not fetch user details",e);
      try
      {
        error_record_id=write_to_error_log_module_async("Get Agent Details - Desk",e);
      }
      catch(ec)
      {
        //discard error silently
      }
      // Change for Debit Freeze - 310724
      call_desk_ticket_create_API(desk_contact_id,subject,desc,null,type,area,sub_area,account_number,card_number,email,phone,from_cheq,to_cheq,error_record_id,remarks,resolution,fromDate,toDate,Ticket_Type,Service_Request);
      
    });
  }
  return 0;
}
*/

function show_hotlist() {
  //code to block debit card
  //this triggers a pop-up asking for confirmation before blocking the card
  console.log("show hotlist is called");
  document.getElementById("cheque_pop_up_backdrop").classList.remove("hide"); //No I18N
  document.getElementById("cheque_pop_up_backdrop").classList.add("flex-row"); //No I18N
  document.getElementById("debit_card_hotlist_pop_up").classList.remove("hide"); //No I18N

  // document.getElementById('c_acc_no').innerHTML=selected_account;	//No I18N
  document.getElementById("debit_card_hotlist_pop_up").classList.add("small"); //No I18N
  document.getElementById("debit_card_hotlist_pop_up").classList.add("large"); //No I18N
  
  hotlist_json={
    card_no:"1231232131",
    account_number:document.getElementById('drop-select').innerHTML
  };
  create_ticket_in_desk("Debit Card Hotlisting through S360","Request for Debit card hotlisting","Service Request","ATM/Debit Card","Hotlisting of Debit Card",hotlist_json.account_number,mask_str(hotlist_json.card_no,"card"),mail_for_desk,phone_for_desk);
  //create_ticket_in_desk("Automated Debit Card Hotlisting","test","Service Request","ATM/Debit Card","Hotlisting of Debit Card");
    // document.getElementById("acct_no_ds").focus();
  // document.getElementById("acct_no_dd").innerHTML = "";
}
function cheque_status() {
  document.getElementById("s_c_error_msg").style.display = "none";
  document.getElementById("cheque_status_loader").style.display = "flex";
  let select_ele = document.getElementById("c_s_acc_no");
  console.log("inside cheque status", select_ele);
  let acc_no = select_ele.options[select_ele.selectedIndex].text;
  if (acc_no == "Loading..." || acc_no == "No account available") {
    return;
  }
  let range_chk_box = document.getElementById("range_chkbox").checked;
  console.log("range check box value is", range_chk_box);
  //document.getElementById('s_c_error_msg').style.display='flex';
  //document.getElementById('cheque_status_loader').style.display='none';
  //document.getElementById('s_c_error_msg').innerHTML=range_chk_box;
  let request = "";
  if (!range_chk_box) {
    //hit the API for checking the status of range of cheques
    let cheq_no = document.getElementById("c_s_chq_no").value;
    //Hit the API with acc_no & cheq_no
    // request ={
    //   url : "https://sandbox.zohoapis.in/crm/v2/functions/check_status_enquiry/actions/execute",	//No I18N
    //   params:{
    //     auth_type:"apikey",	//No I18N
    //     zapikey:"1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e",	//No I18N
    //     AccNo: acc_no,	//No I18N
    //     ChequeNo: cheq_no,	//No I18N
    //     }
    //     };
    let p = { accno: acc_no, Chqno: cheq_no };
    call_crm_function("Check_Status_Enquiry_API", p)
      .then((data) => {
        cheque_status_callback(data, range_chk_box);
      })
      .catch((err) => {
        show_fallback(err, "cheque_status_loader", "s_c_error_msg");
      });
    // ZOHO.CRM.HTTP.get(request).then((data)=>{cheque_status_callback(data,range_chk_box)}).catch((err)=>{show_fallback(err,'cheque_status_loader','s_c_error_msg')});
  } else {
    //hit the API for checking the status of a cheque
    let from_cheq_no = document.getElementById("from_chq_no").value;
    let to_cheq_no = document.getElementById("to_chq_no").value;
    //Hit the API with acc_no & cheq_no
    // request = {
    //   url: "https://sandbox.zohoapis.in/crm/v2/functions/range_of_status_of_cheques/actions/execute", //No I18N
    //   params: {
    //     auth_type: "apikey", //No I18N
    //     zapikey:
    //       "1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e", //No I18N
    //     Acctno: acc_no,
    //     Frmchqno: from_cheq_no,
    //     Tochqno: to_cheq_no,
    //   },
    // };
    let p = { accn: acc_no, fromchqno: from_cheq_no, Tochqno: to_cheq_no };
    // ZOHO.CRM.HTTP.get(request).then((data)=>{cheque_status_callback(data,range_chk_box)}).catch((err)=>{show_fallback(err,'cheque_status_loader','s_c_error_msg')});
    if (isUatInstance==true) {
      func_name = "Range_of_status_of_cheques_API1";
    }else{
      func_name = "Range_of_status_of_cheques_API";
    }
    call_crm_function(func_name, p)
      .then((data) => {
        cheque_status_callback(data, range_chk_box);
      })
      .catch((err) => {
        show_fallback(err, "cheque_status_loader", "s_c_error_msg");
      });

 
  }
  console.log("request data is", request);
  //ZOHO.CRM.HTTP.get(request).then((data)=>{cheque_status_callback(data,range_chk_box)}).catch((err)=>{show_fallback(err,'cheque_status_loader','s_c_error_msg')});
}
function debit_status_callback(data){
  console.log("DEBIT DATA:::",data);
  document.getElementById("debit_card_search_loader").style.display = "none"; //No I18N
  let debit_div = document.getElementById("d_s_error_msg");
  if (data.code != "success") {

   return; 
  }
  let data1 = JSON.parse(data.details.output);
  if (data1.status != "00") {
    
    return;
  }
  if (data1.data.statusCode != "S") {
    
    return
  }
  let table = `<table class="crm-style-table full-width">`;
  table += `<tr class="crm-style-row"><td class="crm-style-cell2">${data1.data.accountNumber}</td><td class="crm-style-cell2">${data1.data.cardStatus}</td></tr>`;
  table += "</table>";
  debit_div.innerHTML = table;
  debit_div.style.display="block"
}
function get_debit_card() {
  document.getElementById("s_c_error_msg").style.display = "none";
  document.getElementById("debit_card_search_loader").style.display = "flex";
  let select_ele = document.getElementById("c_s_acc_no");
  console.log("inside debit card info", select_ele);
  let acc_no = select_ele.options[select_ele.selectedIndex].text;
  if (acc_no == "Loading..." || acc_no == "No account available") {
    return;
  }
  let range_chk_box = document.getElementById("range_chkbox").checked;
  console.log("range check box value is", range_chk_box);
  //document.getElementById('s_c_error_msg').style.display='flex';
  //document.getElementById('cheque_status_loader').style.display='none';
  //document.getElementById('s_c_error_msg').innerHTML=range_chk_box;
  let request = "";
  //hit the API for checking the status of range of cheques
  let cheq_no = document.getElementById("d_ser_no").value;
  //Hit the API with acc_no & cheq_no
  // request ={
  //   url : "https://sandbox.zohoapis.in/crm/v2/functions/check_status_enquiry/actions/execute",	//No I18N
  //   params:{
  //     auth_type:"apikey",	//No I18N
  //     zapikey:"1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e",	//No I18N
  //     AccNo: acc_no,	//No I18N
  //     ChequeNo: cheq_no,	//No I18N
  //     }
  //     };
  let p = { Cardno: cheq_no };
  call_crm_function("debitcardreq_api", p)
    .then((data) => {
      console.log("data from debit card search api", data);
      debit_status_callback(data);
      
    })
    .catch((err) => {
      show_fallback(
        "There was an error while executing the action. Please check the Account Number & Card Number and try again.",
        "debit_card_search_loader",
        "d_s_error_msg"
      );
    });
  // ZOHO.CRM.HTTP.get(request).then((data)=>{cheque_status_callback(data,range_chk_box)}).catch((err)=>{show_fallback(err,'cheque_status_loader','s_c_error_msg')});
  console.log("request data is", request);
  //ZOHO.CRM.HTTP.get(request).then((data)=>{cheque_status_callback(data,range_chk_box)}).catch((err)=>{show_fallback(err,'cheque_status_loader','s_c_error_msg')});
}
function stop_cheque_fallback(err) {
  //function for showing the API error
  console.log("inside stop cheque fallback", err);
  document.getElementById("stop_cheque_loader").style.display = "none";
  let error =
    "There was an error while executing the action. Please check the Account Number & Cheque Number and try again.";
  document.getElementById("c_s_error_msg").style.display = "flex";
  document.getElementById("c_s_error_msg").textContent = error; 
  //
  let accNo=stop_cheque_type_json.account_number;
  let accDetails=fetchAccountDetails(accNo);
  let solId;
  if(accDetails && accDetails.hasOwnProperty("A_c_Type"))
  {
    //savings Account
    solId=accDetails.Branch;
  }
  else if(accDetails && accDetails.hasOwnProperty("A_c_Type_Current_Saving"))
  {
    //loan account
    solId=accDetails.Branch_Name;
  }
  //
  let apiLog;
  try{
    apiLog=JSON.stringify(err).slice(0,4990);
  }
  catch(errorObj)
  {
    console.error("Exception in Stringifying API log",err,errorObj);
    apiLog=String(errorObj).slice(0,4990) || "";
  }
  //create open ticket and assign to Cheque Book Back Office team
  if(stop_cheque_type_json.type=="single")
  {
    create_ticket_in_desk("Automated cheque payment stop - S360","Request for single cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.cheq_no,null,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
  }
  else if(stop_cheque_type_json.type=="multiple")
  {
    create_ticket_in_desk("Automated cheque payment stop - S360","Request for multiple cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.from_cheq_no,stop_cheque_type_json.to_cheq_no,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
  }
  write_to_error_log_module("cheque stop API",err);
}
function stop_cheque(multiple,btnRef) {
  document.getElementById("c_s_error_msg").style.display = "none";
  document.getElementById("stop_cheque_loader").style.display = "flex";
  let select_ele = document.getElementById("acct_no_dd");
  let acc_no = select_ele.options[select_ele.selectedIndex].text;
  if (acc_no == "Loading..." || acc_no == "No account available") {
    return;
  }
  let btnContent=disableBtn(btnRef);
  if(multiple)
  {
    //stop multiple cheques
    //read cheq no
    //total leaves
    let cheq_no = document.getElementById("stop_chq_no").value;
    let total_leaves=document.getElementById("total_leaves").value;
    let p = { acc: acc_no, checkno: cheq_no,leaves_number:total_leaves };
    stop_cheque_type_json={
      type:"multiple",
      account_number:acc_no,
      from_cheq_no:cheq_no,
      to_cheq_no:(Number(cheq_no)+Number(total_leaves)-1)
    };
    let func_name;
    if(isUatInstance)
    {
      func_name="stop_multiple_cheques_api";
    }
    else
    {
      func_name="Stop_Multiple_Cheques_API1";
    }
  call_crm_function(func_name, p) //func name
    .then((data) => {
      stop_cheque_callback(data, "Stop_Multiple_Cheques_API1");
    })
    .catch((err) => {
      console.log("error in stop cheque api",err);
      
      stop_cheque_fallback(err);
    })
    .finally(()=>{
      enableBtn(btnRef,btnContent);
    })
    ;
  }
  else
  {
    //stop single cheque
    
    let cheq_no = document.getElementById("c_chq_no").value;
    cheq_no = "1";
    let p = { accn: acc_no, Chqno: cheq_no };
    stop_cheque_type_json={
      type:"single",
      account_number:acc_no,
      cheq_no:cheq_no
    };
  call_crm_function("Stop_Cheque_Payment_API", p) //func name
    .then((data) => {
      stop_cheque_callback(data, "Stop_Cheque_Payment_API");
    })
    .catch((err) => {
      stop_cheque_fallback(err);
    })
    .finally(()=>{
      enableBtn(btnRef,btnContent);
    });
  }
  // ZOHO.CRM.HTTP.get(request)
  
}
function show_stop_cheque() {
  //temporary restriction
  // show_not_allowed_action();
  // return;
  //code to select the already selected account
  let select_elem=document.getElementById('acct_no_dd');
  let select_options=select_elem.options;
  let selected_account_chqb = document.getElementById("cb-drop-select").innerHTML.trim();
  // console.log("SELECTED OPTION FOR CHEQUE", select_options ,selected_account_chqb);
  for(i=0;i<select_elem.options.length;i++)
  {
    if(selected_account_chqb=="select account" || selected_account_chqb=="No account" || selected_account_chqb=="No Account")
    {
      break;
    }
    if(select_options[i].text==selected_account_chqb)
    {
      select_options[i].selected=true;
      break;
    }
  }
  let check_box=document.getElementById('stop_range_chkbox');
  if(!check_box.checked)
  {
    check_box.click();
  }
  //
  //code to block debit card
  //this triggers a pop-up asking for confirmation before blocking the card
  document.getElementById("cheque_pop_up_backdrop").classList.remove("hide"); //No I18N
  document.getElementById("cheque_pop_up_backdrop").classList.add("flex-row"); //No I18N
  document.getElementById("stop_cheque_pop_up").classList.remove("hide"); //No I18N
  // document.getElementById('c_acc_no').innerHTML=;	//No I18N
  document.getElementById("stop_cheque_pop_up").classList.add("small"); //No I18N
  document.getElementById("stop_cheque_pop_up").classList.add("large"); //No I18N
  document.getElementById("acct_no_dd").focus();
}
function confirm_blocking(debit_card) {
  //code to block debit card
  //this triggers a pop-up asking for confirmation before blocking the card
  debit_hotlist_in_prog = debit_card;
  document.getElementById("pop_up_backdrop").classList.remove("hide"); //No I18N
  document.getElementById("pop_up_backdrop").classList.add("flex-row"); //No I18N
  document.getElementById("block_confirmation_pop_up").classList.remove("hide"); //No I18N
  document.getElementById("debit_card_no").innerHTML = mask_str(String(debit_card),"card"); //No I18N
  console.log("inside debit card block confirmation",debit_card);
  document.getElementById("block_confirmation_pop_up").classList.add("small"); //No I18N
  document.getElementById("block_confirmation_pop_up").classList.add("large"); //No I18N
}
//change for bypassing new account freeze changes to old one
function old_confirm_blocking_acc(acc) {
  //code to block debit card
  //this triggers a pop-up asking for confirmation before blocking the card
  
  //temporary restriction
  //show_not_allowed_action();
  //return;
  
  acc_reading_in_pro = acc;
  document.getElementById("pop_up_backdrop").classList.remove("hide"); //No I18N
  document.getElementById("pop_up_backdrop").classList.add("flex-row"); //No I18N
  document.getElementById("block_confirmation_pop_up_2_old").classList.remove("hide"); //No I18N
  document.getElementById("acc_no_old").innerHTML = acc; //No I18N
  console.log("inside acc block confirmation",acc);
  document.getElementById("block_confirmation_pop_up_2_old").classList.add("small"); //No I18N
  document.getElementById("block_confirmation_pop_up_2_old").classList.add("large"); //No I18N
}
//
function confirm_blocking_acc(acc) {
  //code to block debit card
  //this triggers a pop-up asking for confirmation before blocking the card
  
  //temporary restriction
  //show_not_allowed_action();
  //return;

  //change for bypassing new account freeze logic with old one
  /*
  old_confirm_blocking_acc(acc);
  return;
  */
  //
  
  acc_reading_in_pro = acc;
  document.getElementById("pop_up_backdrop").classList.remove("hide"); //No I18N
  document.getElementById("pop_up_backdrop").classList.add("flex-row"); //No I18N
  document.getElementById("block_confirmation_pop_up_2").classList.remove("hide"); //No I18N
  document.getElementById("acc_no").innerHTML = acc; //No I18N
  console.log("inside acc block confirmation",acc);
  document.getElementById("block_confirmation_pop_up_2").classList.add("small"); //No I18N
  document.getElementById("block_confirmation_pop_up_2").classList.add("large"); //No I18N
  
  //change for debit freeze remarks
  let freezeRemarksContainer=document.getElementById("freezeRemarksDropDownContainer");
  freezeRemarksContainer.classList.remove("shake");
  freezeRemarksContainer.innerHTML='';
  freezeRemarks=null;
  let freezeRemarksDropDown=createDynamicDropDown(["Customer request","Customer req due to fraud txn","L0 complaint in NCR portal","L1 & above cmplnt in NCR prtl","Court Order, LEA/Reg Auth. Request"],(selectedVal)=>{freezeRemarks=decodeHtmlEntities(selectedVal);document.getElementById("freezeRemarksFtRow").classList.remove("hide");});
  freezeRemarksContainer.appendChild(freezeRemarksDropDown);
}
function cheque_status_callback(data, range) {
  // data = JSON.parse(data);
  if (range) {
    //parse range of cheques data
    console.log("inside cheque status callback, range data is", data);
    document.getElementById("cheque_status_loader").style.display = "none"; //No I18N
    let details = data.details.output;
    //code to handle the error in JSON structure
    let bracket_index = details.indexOf("{"); //No I18N
    if (bracket_index != -1) {
      details = details.slice(bracket_index);
    }
    //
    console.log("details is", details);
    let details_json = JSON.parse(details);
    if (details_json.status != "00") {
      console.log("error in cheque status API response", details_json);
      document.getElementById("s_c_error_msg").innerHTML =
        "Could not fetch cheque status"; //No I18N
      document.getElementById("s_c_error_msg").style.display = "flex";
      return;
    }
    if (details_json.data.hasOwnProperty("Error")) {
      console.log("error in cheque status API response",details_json);
      if (details_json.data.Error.hasOwnProperty("FIBusinessException")) {
        document.getElementById("s_c_error_msg").innerHTML = "Invalid Cheque Number"; //No I18N
        document.getElementById("s_c_error_msg").style.display = "flex";
        return;
      }
      document.getElementById("s_c_error_msg").innerHTML = "Could not fetch cheque status"; //No I18N
      document.getElementById("s_c_error_msg").style.display = "flex";
      return;
    }
    if(details_json.data.SuccessOrFailure!="Y")
    {
      console.log("error in cheque status API response",details_json);
      document.getElementById("s_c_error_msg").innerHTML = details_json.data.Error_1?"Error from Finacle: "+details_json.data.Error_1:"Error from Finacle: "+details_json.data.Error; //No I18N
      document.getElementById("s_c_error_msg").style.display = "flex";
      return;
    }
    if(details_json.data.Error!=null)
    {
      console.log("error in cheque status API response",details_json);
      document.getElementById("s_c_error_msg").innerHTML = "Could not fetch cheque status"; //No I18N
      document.getElementById("s_c_error_msg").style.display = "flex";
      return;
    }
    let chqDetails = details_json.data.ChqDetails;
    console.log("details json", details_json);
    let table_str = `<table class="crm-style-table full-width">`;
    table_str += `<tr class="crm-style-row"><th class="crm-style-header">Cheque Number</th><th class="crm-style-header">Status</th></tr>`;
    try{
      if (chqDetails.length == 0) {
        let row = `<tr class="crm-style-row"><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td></tr>`;
        table_str += row;
      }
    }
    catch(e)
    {
      console.log("Error in cheque status API response parsing",e);
      document.getElementById("s_c_error_msg").innerHTML = "Oops! Something went wrong.";
      document.getElementById("s_c_error_msg").style.display = "flex";
    }
    let from_cheq_no= Number(document.getElementById("from_chq_no").value.trim());
    let to_cheq_no = Number(document.getElementById("to_chq_no").value.trim());
    let one_row_added=false;
    if(chqDetails.hasOwnProperty("CHQ_NUM"))
    {
      let row = `<tr class="crm-style-row"><td class="crm-style-cell">${chqDetails.CHQ_NUM}</td><td class="crm-style-cell" style="background-color:#fff">${chqDetails.CHEQUE_STATUS}</td></tr>`;
      table_str += row;
    }
    else
    {
      for (let chq of chqDetails) {
        if(to_cheq_no>=parseInt(chq.CHQ_NUM))
        {
          let row = `<tr class="crm-style-row"><td class="crm-style-cell">${chq.CHQ_NUM}</td><td class="crm-style-cell" style="background-color:#fff">${chq.CHEQUE_STATUS}</td></tr>`;
          table_str += row;
          one_row_added=true;
        }
      }
      if(!one_row_added)
      {
        let row = `<tr class="crm-style-row"><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td></tr>`;
        table_str += row;
      }
    }
    
    table_str += "</table>";
    document.getElementById("s_c_error_msg").innerHTML = table_str; //No I18N
    document.getElementById("s_c_error_msg").style.display = "flex"; //No I18N

    //change for: 'sending logs' feature
    api_logs["Cheque status API"]=data;
    //send log prompt trigger
    append_send_log("cheque_status_log_container","Cheque status API");

  } else {
    //parse single cheque status data
    console.log("inside cheque status callback", data);
    document.getElementById("cheque_status_loader").style.display = "none"; //No I18N
    let details = data.details.output;
    let details_json = JSON.parse(details);
    if (details_json.status != "00") {
      console.log("error in cheque status API response", details_json);
      document.getElementById("s_c_error_msg").innerHTML =
        "Could not fetch cheque status"; //No I18N
      document.getElementById("s_c_error_msg").style.display = "flex";
    }
    //change for: 'sending logs' feature
    api_logs["Range of cheque status API"]=data;
    //send log prompt trigger
    append_send_log("cheque_status_log_container","Range of cheque status API");    

    console.log("details json", details_json);
    document.getElementById("s_c_error_msg").innerHTML =
      details_json.data.Message; //No I18N
    document.getElementById("s_c_error_msg").style.display = "flex"; //No I18N
  }
}
async function stop_cheque_callback(data, api_name) {
  //function for showing the results of the API
  // console.log(data);
  // data = JSON.parse(data);
  // store api logs in module
  // var recordData = {
  //   API_Name: api_name, //No I18N
  //   Error_Id: "36001215421", //No I18N
  //   Error_Source: "Service 360 Widget", //No I18N
  //   Module_Name: "Contacts", //No I18N
  //   Module_Record_Id: rid, //No I18N
  //   Error_Description: data.toString(), //No I18N
  // };
  // ZOHO.CRM.API.insertRecord({
  //   Entity: "CRM_Error_Log",
  //   APIData: recordData,
  //   Trigger: ["workflow"]
  // }).then(); //No I18N
  // console.log(JSON.stringify(data));
  // await write_to_error_log_module(api_name, JSON.stringify(data.details.userMessage));
  // created log in error log
  console.log("inside stop cheque callback", data);
  document.getElementById("stop_cheque_loader").style.display = "none"; //No I18N
  let details = data.details.output;
  let details_json = JSON.parse(details);
  let accNo=stop_cheque_type_json.account_number;
  let accDetails=fetchAccountDetails(accNo);
  let solId;
  if(accDetails && accDetails.hasOwnProperty("A_c_Type"))
  {
    //savings Account
    solId=accDetails.Branch;
  }
  else if(accDetails && accDetails.hasOwnProperty("A_c_Type_Current_Saving"))
  {
    //loan account
    solId=accDetails.Branch_Name;
  }
  console.log("details json", details_json);
  if (details_json.data.hasOwnProperty("Error") && details_json.data.Error.hasOwnProperty("FIBusinessException")) {
    console.log("error in stop cheque API response", details_json);
    //change for: 'sending logs' feature
    api_logs["Stop cheque API"]=data;
    //send log prompt trigger
    append_send_log("stop_cheque_log_container","Stop cheque API");
    document.getElementById("c_s_error_msg").textContent =
    JSON.stringify(details_json.data); //No I18N

    document.getElementById("c_s_error_msg").style.display = "flex"; //No I18N

    let apiLog;
    try{
      apiLog=JSON.stringify(data).slice(0,4990);
    }
    catch(err)
    {
      console.error("Exception in Stringifying API log",err,data);
      apiLog=String(data).slice(0,4990) || "";
    }
    //create open ticket and assign to Cheque Book Back Office team
    if(stop_cheque_type_json.type=="single")
    {
      create_ticket_in_desk("Automated cheque payment stop - S360","Request for single cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.cheq_no,null,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
    }
    else if(stop_cheque_type_json.type=="multiple")
    {
      create_ticket_in_desk("Automated cheque payment stop - S360","Request for multiple cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.from_cheq_no,stop_cheque_type_json.to_cheq_no,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
    }
    write_to_error_log_module("cheque stop API",data);
  }else {
    document.getElementById("c_s_error_msg").textContent =
    details_json.data.Message; //No I18N

    document.getElementById("c_s_error_msg").style.display = "flex"; //No I18N

    //change for: 'sending logs' feature
    api_logs["Stop cheque API"]=data;
    //send log prompt trigger
    append_send_log("stop_cheque_log_container","Stop cheque API");
    
    if(data.code=="success")
    {
      if((details_json.data.successorfailure=="Y")||(details_json.data.successorfailure=="y")||(details_json.data.successorfailure=="S")||(details_json.data.successorfailure=="s"))
      // if(true)
      {
        let apiLog;
        try{
          apiLog=JSON.stringify(data).slice(0,4990);
        }
        catch(err)
        {
          console.error("Exception in Stringifying API log",err,data);
          apiLog=String(data).slice(0,4990) || "";
        }
        if(stop_cheque_type_json.type=="single")
        {
          create_ticket_in_desk("Automated cheque payment stop - S360","Request for single cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.cheq_no,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,apiLog,backOfficeTeamId,solId);
        }
        else if(stop_cheque_type_json.type=="multiple")
        {
          create_ticket_in_desk("Automated cheque payment stop - S360","Request for multiple cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.from_cheq_no,stop_cheque_type_json.to_cheq_no,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,apiLog,backOfficeTeamId,solId);
        }
        
      }
      else
      {
        let apiLog;
        try{
          apiLog=JSON.stringify(data).slice(0,4990);
        }
        catch(err)
        {
          console.error("Exception in Stringifying API log",err,data);
          apiLog=String(data).slice(0,4990) || "";
        }
        //create open ticket and assign to Cheque Book Back Office team
        if(stop_cheque_type_json.type=="single")
        {
          create_ticket_in_desk("Automated cheque payment stop - S360","Request for single cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.cheq_no,null,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
        }
        else if(stop_cheque_type_json.type=="multiple")
        {
          create_ticket_in_desk("Automated cheque payment stop - S360","Request for multiple cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.from_cheq_no,stop_cheque_type_json.to_cheq_no,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
        }
        write_to_error_log_module("cheque stop API",data);
      }
    }
    else
    {
      //create open ticket and assign to Cheque Book Back Office team
      let apiLog;
        try{
          apiLog=JSON.stringify(data).slice(0,4990);
        }
        catch(err)
        {
          console.error("Exception in Stringifying API log",err,data);
          apiLog=String(data).slice(0,4990) || "";
        }
        //create open ticket and assign to Cheque Book Back Office team
        if(stop_cheque_type_json.type=="single")
        {
          create_ticket_in_desk("Automated cheque payment stop - S360","Request for single cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.cheq_no,null,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
        }
        else if(stop_cheque_type_json.type=="multiple")
        {
          create_ticket_in_desk("Automated cheque payment stop - S360","Request for multiple cheque payment stop.","Service Request","Cheque Book","Stop Payment of Cheque",stop_cheque_type_json.account_number,null,mail_for_desk,phone_for_desk,stop_cheque_type_json.from_cheq_no,stop_cheque_type_json.to_cheq_no,null,null,null,null,null,null,"Open",null,null,null,null,null,null,null,null,null,null,apiLog,null,solId);
        }
        write_to_error_log_module("cheque stop API",data);
    }
  }
  
}
function close_pop_up(pop_up_id) {
  document.getElementById(pop_up_id).classList.remove("flex-row"); //No I18N
  document.getElementById(pop_up_id).classList.add("hide"); //No I18N
  document.getElementById("pop_up_backdrop").classList.add("hide"); //No I18N
  document.getElementById("pop_up_backdrop").classList.remove("flex-row"); //No I18N
}

function close_pop_up2(pop_up_id, backdrop_id) {
  document.getElementById(pop_up_id).classList.remove("flex-row"); //No I18N
  document.getElementById(pop_up_id).classList.add("hide"); //No I18N
  document.getElementById(backdrop_id).classList.add("hide"); //No I18N
  document.getElementById(backdrop_id).classList.remove("flex-row"); //No I18N
  if (pop_up_id == 'stop_cheque_pop_up'){
    // clear the error message
    document.getElementById("c_s_error_msg").style.display = "none"; //No I18N
    document.getElementById("c_s_error_msg").innerHTML = ""; //No I18N
    // clear the input fields
    document.getElementById("stop_chq_no").value = ""; //No I18N
    document.getElementById("total_leaves").value = ""; //No I18
  }
}
// document.getElementById("date_text1").addEventListener("change",() => {
//   let date1 = document.getElementById("date_text1").value;
//   var parts = date1.split('/'); // Split the string by '/'
//   var day = parseInt(parts[0], 10); // Parse the day as an integer
//   var month = parseInt(parts[1], 10) - 1; // Parse the month as an integer (subtract 1 as months are zero-based in JavaScript)
//   var year = parseInt(parts[2], 10); 
//   if (date1 != "") {
//     $( "#date_text2" ).datepicker({ dateFormat: 'dd/mm/yy' ,minDate: new Date(day,month,year), maxDate: new Date(day,month,year)});
//   }
// });

$(function() {
  let today = new Date();
  console.log("TODAY TODAY", today);
  $("#date_text2").datepicker({
    dateFormat: 'dd/mm/yy',
    defaultDate: today,
    beforeShowDay: function (date) {
      let formattedDate = $.datepicker.formatDate("yy-mm-dd", date);
      let today1 = $.datepicker.formatDate("yy-mm-dd", new Date());
      if (formattedDate > today1) {
        return [false];
      }

      return [true];
    }
  }).datepicker('setDate',today);
  $("#date_text1").datepicker({
    dateFormat: 'dd/mm/yy', onSelect: () => {
      let date1 = document.getElementById("date_text1").value;
      var parts = date1.split('/'); // Split the string by '/'
      var day = parseInt(parts[0], 10); // Parse the day as an integer
      var month = parseInt(parts[1], 10) - 1; // Parse the month as an integer (subtract 1 as months are zero-based in JavaScript)
      var year = parseInt(parts[2], 10);
      if (date1 != "") {
        $("#date_text2").datepicker({
          minDate: new Date(year, month, day + 1),
          beforeShowDay: function (date) {
            let formattedDate = $.datepicker.formatDate("yy-mm-dd", date);
            let today1 = $.datepicker.formatDate("yy-mm-dd", new Date());
            if (formattedDate > today1) {
              return [false];
            }

            return [true];
          }
        });
      }
    },
    beforeShowDay: function (date) {
      let formattedDate = $.datepicker.formatDate("yy-mm-dd", date);
      let today1 = $.datepicker.formatDate("yy-mm-dd", new Date());
      if (formattedDate > today1) {
        return [false];
      }

      return [true];
    }
  });
  
});
/*
 // Old SR_navigate function
function SR_navigate(id, elem) {
  let side_nav_menus = document.getElementById("SR_side_nav").children; //No I18N
  let side_nav_len = side_nav_menus.length;
  let dynamic_sections = document.getElementById("SR_main").children; //No I18N
console.log(side_nav_len);
  //console.log("SR main children are",dynamic_sections);	//No I18N
  for (let i = 0; i < side_nav_len; i++) {
    side_nav_menus[i].classList.remove("SR-nav-child-selected"); //No I18N
    dynamic_sections[i].classList.add("hide"); //No I18N
    dynamic_sections[i].classList.remove("flex-col"); //No I18N
  }
  // if (id != side_nav_len) {
  //   // side_nav_menus[6].classList.remove('SR-nav-child-selected');	//No I18N
  //   dynamic_sections[side_nav_len].classList.add("hide"); //No I18N
  //   dynamic_sections[side_nav_len].classList.remove("flex-col"); //No I18N
  // }
  elem.classList.add("SR-nav-child-selected"); //No I18N
  dynamic_sections[id].classList.remove("hide"); //No I18N
  dynamic_sections[id].classList.add("flex-col"); //No I18N
  // side_nav_menus=document.getElementById('SR_side_nav').children;	//No I18N
  // FETCH THE ACCOUNTS based on scheme provided to FREEZE
  // if (id == 9) {
  //   freeze_populate_data(new_deposits.concat(new_advances));
  // }

  //Code to load dynamic menu
  //change for account statement & certificates feature
  let onMenuLoadFn=elem.getAttribute("onMenuLoad");
  if(onMenuLoadFn)
  {
    window[onMenuLoadFn]();
  }

}
*/
//Transaction Date Picker
$(function() {
  let today = new Date();
  console.log("TODAY TODAY", today);

  $("#date_text3").datepicker({
    dateFormat: 'dd/mm/yy',
    defaultDate: today,
    beforeShowDay: function (date) {
      let formattedDate = $.datepicker.formatDate("yy-mm-dd", date);
      let today1 = $.datepicker.formatDate("yy-mm-dd", new Date());
      if (formattedDate > today1) {
        return [false];
      }

      return [true];
    }
  }).datepicker('setDate', today);
});
//

function SR_navigate(id, elem) {
  let side_nav_menus = document.getElementById("SR_side_nav")?.children; // No I18N
  let dynamic_sections = document.getElementById("SR_main")?.children; // No I18N

  if (!side_nav_menus || !dynamic_sections) {
      console.error("Missing SR_side_nav or SR_main elements");
      return;
  }

  console.log("id", id);
  let side_nav_len = Math.min(side_nav_menus.length, dynamic_sections.length);

  for (let i = 0; i < side_nav_len; i++) {
      side_nav_menus[i].classList.remove("SR-nav-child-selected"); // No I18N
      dynamic_sections[i].classList.add("hide"); // No I18N
      dynamic_sections[i].classList.remove("flex-col"); // No I18N
  }

  if (elem && elem.classList) {
      elem.classList.add("SR-nav-child-selected"); // No I18N
  } else {
      console.error("Invalid element passed to SR_navigate");
  }

  if (dynamic_sections[id]) {
      dynamic_sections[id].classList.remove("hide"); // No I18N
      dynamic_sections[id].classList.add("flex-col"); // No I18N
  } else {
      console.error(`No dynamic section found for id: ${id}`);
  }

  let onMenuLoadFn = elem?.getAttribute("onMenuLoad");
  if (onMenuLoadFn) {
      window[onMenuLoadFn]?.();
  }
}

function dynamic_SR_navigate(elem,sectionLoadCheck,despositionType) {
  if(!elem)
  {
    elem=document.getElementById("oc_sr_side_nav").children[0].click();
    return;
  }
  let side_nav_menus = elem.parentElement.children; //No I18N
  let moduleDataSource=elem.getAttribute("datasource");
  let side_nav_len = side_nav_menus.length;
  let srToBeShown=document.getElementById(elem.getAttribute("srId"));
  let despositionKey=elem.getAttribute("despositionValuesKey");
  let despositionValues=configsJson["dispositionValues.json"][despositionKey];
// console.log(side_nav_len);
  //console.log("SR main children are",dynamic_sections);	//No I18N
  for (let i = 0; i < side_nav_len; i++) {
    side_nav_menus[i].classList.remove("SR-nav-child-selected"); //No I18N
    let srSection=document.getElementById(side_nav_menus[i].getAttribute("srid"));
    srSection.classList.add("hide"); //No I18N
    srSection.classList.remove("flex-col"); //No I18N
  }
  elem.classList.add("SR-nav-child-selected"); //No I18N
  srToBeShown.classList.remove("hide"); //No I18N
  srToBeShown.classList.add("flex-col"); //No I18N
  if(sectionLoadCheck)
  {
    if(srToBeShown.querySelector(".loader-id"))
    {
      //load the menu in HTML
      if((moduleDataSource=="d_a")&&(deposits_flg&&advances_flg))
      {
        loadSrMenu(srToBeShown,despositionValues,despositionType);
      }
      else if(moduleDataSource=="locker")
      {
        //Fetch locker data and then load SR menu
        /*
        let base_url =
        "https://ucrmapi.unionbankofindia.co.in/crm/v6/Locker/search?criteria=((CUST_NAME:equals:"+rid[0]+")and(OUTSTANDING_DUES:greater_than:0))"; //No I18N
        */
        let base_url =
        "https://ucrmapi.unionbankofindia.co.in/crm/v6/Locker/search?criteria=(CUST_NAME:equals:"+rid[0]+")"; //No I18N
        var req_data = {
        headers: {}, //No I18N
        method: "GET", //No I18N
        url: base_url, //No I18N
      };
      let analyticsOwnerEmail=encodeURI("crm.admin2@unionbankofindia.bank");
      let etlWorkspaceName=encodeURI("CRM data");
      let lockerViewName="Locker";
      //\"Locker\".\"LOCKER_NO\" `LOCKER_NO` \"Locker\".\"LOCKER_TYPE\" `LOCKER_TYPE`, \"Locker\".\"OPACC\" `OPACC`, \"Locker\".\"OPEN_DATE\" `OPEN_DATE`, \"Branch Master\".\"Name\" `SOL_DESC`, \"Locker\".\"DUE_RENT\" `DUE_RENT`, \"Locker\".\"DUE_DATE\" `DUE_DATE`  ## LEFT JOIN \"Branch Master\" on \"Locker\".\"SOL_ID\"=\"Branch Master\".\"Branch_SOL_ID\"
      let sqlQuery="select \"Branch Master\".\"Name\" `SOL_DESC`, \"Locker\".\"LOCKER_NO\" `LOCKER_NO`, \"Locker\".\"LOCKER_TYPE\" `LOCKER_TYPE`, \"Locker\".\"OPACC\" `OPACC`, \"Locker\".\"OPEN_DATE\" `OPEN_DATE`, \"Locker\".\"DUE_RENT\" `DUE_RENT`, \"Locker\".\"DUE_DATE\" `DUE_DATE` from \"Locker\" LEFT JOIN \"Branch Master\" on \"Locker\".\"SOL_ID\"=\"Branch Master\".\"Branch_SOL_ID\" where \"Locker\".\"CUST_ID\"='"+custid+"'";
      let sqlQueryEncoded=encodeURI(sqlQuery);
      let analyticsUrl="https://analytics.unionbankofindia.co.in/api/"+analyticsOwnerEmail+"/"+etlWorkspaceName+"/"+lockerViewName+`?ZOHO_ACTION=EXPORT&ZOHO_OUTPUT_FORMAT=JSON&ZOHO_ERROR_FORMAT=JSON&ZOHO_API_VERSION=1.0&KEY_VALUE_FORMAT=True&ZOHO_SQLQUERY=${sqlQueryEncoded}`;
      let analyticsReqData={
        headers:{
          "ZANALYTICS-ORGID":"12010"
        },
        method:"POST",
        url:analyticsUrl
      }
      let etlAnalyticsConnection="testanalyticscrmadmin2";
      ZOHO.CRM.CONNECTION.invoke(etlAnalyticsConnection, analyticsReqData).then((resp)=>{
        console.log("Response from Locker Overdue API",resp);
        if(resp.code=="SUCCESS" && resp.details.status=="true")
        {
          //
          lockersOverdueArr=resp.details.statusMessage.data;
          let lockerFetchStatus=resp.details.statusMessage.status;
          if(lockerFetchStatus=="error")
          {
            loadSrMenu(srToBeShown,despositionValues,despositionType,[],true,"Lockers couldn't be fetched. Please",()=>{
              dynamic_SR_navigate(elem,sectionLoadCheck,despositionType);
            });
          }
          else 
          {
            if(lockersOverdueArr==''||(!lockersOverdueArr))
          {
            //No Locker Available for the customer
            loadSrMenu(srToBeShown,despositionValues,despositionType,[]);
          }
          else
          {
            let lockersLen=lockersOverdueArr.length;
            let i;
            for(i=0;i<lockersLen;i++)
            {
              let lockerDueDate=lockersOverdueArr[i]["DUE_DATE"];
              let today=new Date();
              let daysSinceDue;
              lockerDueDate=createJsDateObj(lockerDueDate,"yyyy-mm-dd");
              if(lockerDueDate)
              {
                daysSinceDue=findDifferenceInDays(lockerDueDate,today);
                if(daysSinceDue<=0)
                {
                  daysSinceDue="-";
                }
              }
              else
              {
                daysSinceDue="-";
              }
              lockersOverdueArr[i]["primaryKey__"]=lockersOverdueArr[i].LOCKER_NO;
              lockersOverdueArr[i]["occupied_y_n"]="Yes";
              lockersOverdueArr[i]["days_since_overdue"]=daysSinceDue;
            }
            loadSrMenu(srToBeShown,despositionValues,despositionType,lockersOverdueArr);
          }
          }
          
        }
        else
        {
          //error case
          console.error("Error in locker overdue fetch API",resp);
          loadSrMenu(srToBeShown,despositionValues,despositionType,[],true,"Lockers couldn't be fetched. Please",()=>{
            dynamic_SR_navigate(elem,sectionLoadCheck,despositionType);
          });
        }
      }).catch((err)=>{
        //Locker Overdue Fetch Error Case
        console.error("Error in locker overdue fetch API",err);
        loadSrMenu(srToBeShown,despositionValues,despositionType,[],true,"Lockers couldn't be fetched. Please",()=>{
          dynamic_SR_navigate(elem,sectionLoadCheck,despositionType);
        });
      })
      }
    }
  }
}
/**
 * Takes an input array and returns a new normalised array of the form [{primaryKey__:[{d1},{d2}]},{primaryKey__:[{d3},{d4}]}}]
 * @inputs inputArr - Array of jsons each with a primaryKey__ attribute
 * @returns normalised array of the form [{primaryKey__:[{d1},{d2}]},{primaryKey__:[{d3},{d4}]}}]
 * @example
 * // Input - [{primaryKey__:"1",d1},]
 * // Output -1
 */
function constructNormalisedArray(inputArr)
{
  let outputArr=[];
  let intermediateJson={};
  for(let dataRow of inpurArr)
  {
    let currentKey=dataRow["primaryKey__"];
    if(Object.keys(intermediateJson).includes(currentKey))
    {
      let keyArr=intermediateJson[currentKey];
      keyArr.push(dataRow);
      intermediateJson[currentKey]=keyArr;
    }
    else
    {
      intermediateJson[currentKey]=[dataRow];
    }
  }
}
function lockerOverdueFilterAction(lockerData)
{
  console.log("Accounts inside locker filter",lockerData); 
  let dueRent=lockerData["DUE_RENT"];
  if(dueRent)
  {
    try{
      let dueRentInNumber=Number(dueRent);
      // console.log("Opened ago",openedDaysAgo);
      if(dueRentInNumber>0)
      {
        return true;
      }
      else
      {
        return false;
      }
    }
    catch(e)
    {
      return false;
    }
  }
  else
  {
    return false;
  }
}
function welcomeFilterAction(accountData)
{
  let welcomePeriod=30;
  console.log("Accounts inside welcome filter",accountData); 
  let accountOpenDate=accountData["A_c_Open_Date"];
  if(accountOpenDate)
  {
    try{
      let datePart=accountOpenDate.split(" ");
      let openDateObj=new Date(datePart);
      let openedDaysAgo=findDifferenceInDays(openDateObj,new Date());
      // console.log("Opened ago",openedDaysAgo);
      if(openedDaysAgo<=welcomePeriod)
      {
        return true;
      }
      else
      {
        return false;
      }
    }
    catch(e)
    {
      return false;
    }
  }
  else
  {
    return false;
  }
}
function dormantFilterAction(accountData)
{
  console.log("Accounts inside dormant filter",accountData); 
  let account_status = accountData["Account_Status"];
  if(account_status)
  {
    if(account_status == "Dormant" || account_status == "d" || account_status == "D")
    {
      return true;
    }
    else{
      return false;
    }
    
  }
  else{
    return false;
  }
  
  
}
function inactiveFilterAction(accountData)
{
  console.log("Accounts inside inactive filter",accountData); 
  let account_status = accountData["Account_Status"];
  if(account_status)
  {
    if(account_status == "Inactive" || account_status == "i" || account_status == "I")
    {
      return true;
    }
    else{
      return false;
    }
    
  }
  else{
    return false;
  }
  
  
}
function deafFilterAction(accountData)
{
  console.log("Accounts inside deaf filter",accountData); 
  let deaf_flag = accountData["DEAF_Flag"];
  if(deaf_flag)
  {
    deaf_flag=deaf_flag.trim().toLowerCase();
    if(deaf_flag == "true" || deaf_flag == "TRUE")
    {
      return true;
    }
    else{
      return false;
    }
  }
  else{
    return false;
  }
}
function smaFilterAction(accountData)
{
  console.log("Accounts inside sma filter",accountData); 
  let overdue_amt = accountData["Overdue_Amount"];
  if(overdue_amt)
  {
    if(overdue_amt > 0)
    {
      return true;
    }
    else{
      return false;
    }

  }
  
  else{
    return false;
  }
  
}
function shakeElement(element)
{
  element.classList.remove("shake");
  setTimeout(() => {
    element.classList.add("shake");
    setTimeout(()=>{
      element.classList.remove("shake");
    },1000);
  }, 50);
}
function createDynamicPopUp()
{
  let popUpTemplate=document.getElementById("dynamicPopUpClone");
  let popUpClone=popUpTemplate.cloneNode(true);
  let popUpCloseBtn=popUpClone.querySelector("#popUpCloseBtn");
  let popUpFg=popUpClone.querySelector(".mobilise");
  popUpClone.id+=""+generalCloneCount;
  popUpCloseBtn.id+=""+generalCloneCount;
  popUpCloseBtn.addEventListener("click",()=>{
    popUpClone.remove();
  });
  popUpFg.onmousedown=mobilise_on_mouse_down;
  generalCloneCount++;
  popUpClone.classList.remove("hide");
  document.body.appendChild(popUpClone);
  return popUpClone;
}
function submitDesposition(despositionElem,remarksElem, parentBtn, accountDropDown, depositOrLoan,dispositionHistoryContainer,despositionType,despositionContainer)
{
  let despositionValue=despositionElem.getAttribute("value");
  let remarksValue=remarksElem.value;
  let accountNumber=accountDropDown.getAttribute("value");
  let additionalFields=despositionContainer.querySelectorAll("table .additional-desposition-fields");
  let validInputs=true;
  disableBtn(parentBtn);
  // parentBtn.classList.add("disable-btn");
  // parentBtn.classList.add("lower-opacity");
  if(!despositionValue)
  {
    shakeElement(despositionElem);
    enableBtn(parentBtn,"Submit");
    validInputs=false;
  }
  if(!remarksValue)
  {
    shakeElement(remarksElem);
    enableBtn(parentBtn,"Submit");
    validInputs=false;
  }
  for(let field of additionalFields)
  {
    let fieldVal=field.value || field.getAttribute("value");
    if(!fieldVal)
    {
      shakeElement(field);
      enableBtn(parentBtn,"Submit");
      validInputs=false;
    }
  }
  if(validInputs)
  {
    conn_name = "zohocrm";
    let params={
      "Customer":rid[0],
      "Desposition":despositionValue,
      "Remarks":remarksValue,
      "Desposition_Type":despositionType
    };
    for(let field of additionalFields)
    {
      let fieldVal=field.value || field.getAttribute("value");
      let fieldApiName=field.getAttribute("apiName");
      params[fieldApiName]=fieldVal;
    }
    if(despositionType=="Locker Overdue")
    {
      //append locker name to locker field
      params["Locker_Number"]=accountNumber;
    }
    else
    {
      //check if the account is a deposit or a loan account
      if(accountNumber&&depositOrLoan=="deposit")
      {
        params["Deposit_Account"]=accountNumber;
      }
      else if(accountNumber&&depositOrLoan=="loan")
      {
        params["Loan_Account"]=accountNumber;
      }
    }
    
    if(logged_in_user_id)
    {
      params["Session_User"]=logged_in_user_id;
    }
    base_url =
      "https://ucrmapi.unionbankofindia.co.in/crm/v6/Desposition"; //No I18N
    var req_data = {
      headers: {}, //No I18N
      parameters: {
        "data":[params]
      },
      method: "POST", //No I18N
      url: base_url, //No I18N
    };
    ZOHO.CRM.CONNECTION.invoke(conn_name, req_data).then((resp)=>{
      console.log("Desposition API response is",resp);
      if(resp.code=="SUCCESS"&&resp.details.statusMessage.data[0].code=="SUCCESS")
      {
        //success
        show_notification_msg("success","Desposition Created","Desposition:"+despositionValue+" Remarks:"+remarksValue);
        if((despositionHistory[accountNumber+"_"+despositionType])&&(despositionHistory[accountNumber+"_"+despositionType].length>=0))
        {
          let despositionHistoryArr=despositionHistory[accountNumber+"_"+despositionType];
          let newDespositionHistoryArr=[];
          params["Created_Time"]=new Date().toISOString().replace("Z","+00:00");
          console.log("Now time is",params["Created_Time"]);
          newDespositionHistoryArr.push(params);
          for(let d of despositionHistoryArr)
          {
            newDespositionHistoryArr.push(d);
          }
          despositionHistory[accountNumber+"_"+despositionType]=newDespositionHistoryArr;
          fetchDespositionsHistory(accountDropDown,dispositionHistoryContainer,null);
        }
      }
      else
      {
        //show save not successful and ask the user to retry
        console.log("Desposition API failed",resp);
        show_notification_msg("failure","Desposition Couldn't be created","Please try again after later.");
      }
    }).catch((err)=>{
      console.error("Error in creating desposiiton record",err);
      show_notification_msg("failure","Desposition Couldn't be created","Please try again after later.");
    }).finally(()=>{
      enableBtn(parentBtn,"Submit");
      // parentBtn.classList.remove("disable-btn");
      // parentBtn.classList.remove("lower-opacity");
    })
  }

}
function fetchDespositionsHistory(acctDropDown,outputBody,parentBtn,despositionType)
{
  let selectedAcct=acctDropDown.getAttribute("value");
  disableBtn(parentBtn);
  if(despositionType=="Locker Overdue")
  {
    if((despositionHistory[despositionType])&&(despositionHistory[despositionType].length>=0))
    {
        let historyData=despositionHistory[despositionType];
        //get the history table clone
        //populate history rows
        let despositionTypeEnc=despositionType.replaceAll(" ","_");
        let historyTableRef=document.getElementById("despositionHistoryTableClone_"+despositionTypeEnc);
        let historyTableClone=historyTableRef.cloneNode(true);
        let tableHeaders=historyTableClone.querySelectorAll("th");
        let tableRowsParent=historyTableClone.querySelector("#tableBody");
        let popUpHeaderRef=document.getElementById("popUpHeader");
        let popUpHeaderClone=popUpHeaderRef.cloneNode(true);
        let tableRowsSt=``;
        historyTableClone.id+=""+generalCloneCount;
        for(let row of historyData)
        {
          tableRowsSt+=`<tr class="crm-style-row">`;
          for(let th of tableHeaders)
          {
            let configName=th.getAttribute("configName");
            let moduleName=th.getAttribute("dataModule");
            let relatedApiNames=configToApiName(configName,moduleName);
            let cellValue=resolveApiName(relatedApiNames,row);
            if(relatedApiNames)
            {

              if((configName.toLowerCase().includes("date"))||(configName.toLowerCase().includes("time")))
              {
                cellValue=convertUTCStrToLocalDateTime(cellValue);
              }
              tableRowsSt+=`<td class="crm-style-cell">${cellValue}</td>`;
            }
            else
            {
              tableRowsSt+=`<td class="crm-style-cell">-</td>`;
            }
          }
          tableRowsSt+=`</tr>`;
        }
        tableRowsParent.innerHTML=tableRowsSt;
        outputBody.innerHTML=``;
        popUpHeaderClone.innerHTML=`${despositionType} Call History`;
        popUpHeaderClone.classList.remove("hide");
        outputBody.appendChild(popUpHeaderClone);
        outputBody.appendChild(historyTableClone);
        // outputBody.innerHTML+="<div class='disclaimer alignCenter'>* Despositions created just few minutes before might not appear in the history</div>";
        historyTableClone.classList.remove("hide");
        generalCloneCount++;
        enableBtn(parentBtn,"History");
    }
    else
    {
        conn_name = "zohocrm";
        base_url =
          "https://ucrmapi.unionbankofindia.co.in/crm/v2/Desposition/search?criteria=((Customer:equals:"+rid[0]+")and(Desposition_Type:equals:"+despositionType+"))"; //No I18N
        base_url=encodeURI(base_url);
          var req_data = {
          headers: {}, //No I18N
          method: "GET", //No I18N
          url: base_url, //No I18N
          parameters: {
            per_page:5
          }
        };
        ZOHO.CRM.CONNECTION.invoke(conn_name, req_data).
        then((resp)=>{
          if (resp.details.statusMessage == "") {
            //no history found
            outputBody.innerHTML=`No History found for ${despositionType} outbound calls.`;
            return;
          }
          let historyData = resp.details.statusMessage.data;
          console.log("response is",historyData);
          if (historyData.length == 0) {
            //no history found
            outputBody.innerHTML=`No History found for ${despositionType} outbound calls.`;
            return;
          } else {
            //get the history table clone
            //populate history rows
            let despositionTypeEnc=despositionType.replaceAll(" ","_");
            let historyTableRef=document.getElementById("despositionHistoryTableClone_"+despositionTypeEnc);
            // let historyTableRef=document.getElementById("despositionHistoryTableClone");
            let historyTableClone=historyTableRef.cloneNode(true);
            let tableHeaders=historyTableClone.querySelectorAll("th");
            let tableRowsParent=historyTableClone.querySelector("#tableBody");
            let popUpHeaderRef=document.getElementById("popUpHeader");
            let popUpHeaderClone=popUpHeaderRef.cloneNode(true);
            let tableRowsSt=``;
            historyTableClone.id+=""+generalCloneCount;
            for(let row of historyData)
            {
              tableRowsSt+=`<tr class="crm-style-row">`;
              for(let th of tableHeaders)
              {
                let configName=th.getAttribute("configName");
                let moduleName=th.getAttribute("dataModule");
                let relatedApiNames=configToApiName(configName,moduleName);
                let cellValue=resolveApiName(relatedApiNames,row);
                if(relatedApiNames)
                {
                  if((configName.toLowerCase().includes("date"))||(configName.toLowerCase().includes("time")))
                  {
                    cellValue=convertUTCStrToLocalDateTime(cellValue);
                  }
                  tableRowsSt+=`<td class="crm-style-cell">${cellValue}</td>`;
                }
                else
                {
                  tableRowsSt+=`<td class="crm-style-cell">-</td>`;
                }
              }
              tableRowsSt+=`</tr>`;
            }
            tableRowsParent.innerHTML=tableRowsSt;
            if(tableRowsSt!='')
            {
              despositionHistory[despositionType]=historyData;
            }
            outputBody.innerHTML=``;
            popUpHeaderClone.innerHTML=`${despositionType} Call History`;
            popUpHeaderClone.classList.remove("hide");
            outputBody.appendChild(popUpHeaderClone);
            outputBody.appendChild(historyTableClone);
            historyTableClone.classList.remove("hide");
            generalCloneCount++;
          }
      }).catch((err)=>{
        //error in fetching history
        outputBody.innerHTML=`Couldn't fetch desposition history. Please try again in sometime or contact your administrator if the issue persists`;
        console.log("Error in history fetching",err);
      }).finally(()=>{
        enableBtn(parentBtn,"History");
        let popUpElem=outputBody.querySelector(".pop-up-header");
        if(popUpElem)
        {
          outputBody.innerHTML+="<div class='disclaimer alignCenter'>* Despositions created just few minutes before might not appear in the history</div>";
        }
        else
        {
          outputBody.innerHTML+="<div class='disclaimer'>* Despositions created just few minutes before might not appear in the history</div>"
        }
      
      })
      }
  }
  else
  {
      if((despositionHistory[selectedAcct+"_"+despositionType])&&(despositionHistory[selectedAcct+"_"+despositionType].length>=0))
    {
        let historyData=despositionHistory[selectedAcct+"_"+despositionType];
        //get the history table clone
        //populate history rows
        let despositionTypeEnc=despositionType.replaceAll(" ","_");
        let historyTableRef=document.getElementById("despositionHistoryTableClone_"+despositionTypeEnc);
        // let historyTableRef=document.getElementById("despositionHistoryTableClone");
        let historyTableClone=historyTableRef.cloneNode(true);
        let tableHeaders=historyTableClone.querySelectorAll("th");
        let tableRowsParent=historyTableClone.querySelector("#tableBody");
        let popUpHeaderRef=document.getElementById("popUpHeader");
        let popUpHeaderClone=popUpHeaderRef.cloneNode(true);
        let tableRowsSt=``;
        historyTableClone.id+=""+generalCloneCount;
        for(let row of historyData)
        {
          tableRowsSt+=`<tr class="crm-style-row">`;
          for(let th of tableHeaders)
          {
            let configName=th.getAttribute("configName");
            let moduleName=th.getAttribute("dataModule");
            let relatedApiNames=configToApiName(configName,moduleName);
            let cellValue=resolveApiName(relatedApiNames,row);
            if(relatedApiNames)
            {

              if((configName.toLowerCase().includes("date"))||(configName.toLowerCase().includes("time")))
              {
                cellValue=convertUTCStrToLocalDateTime(cellValue);
              }
              tableRowsSt+=`<td class="crm-style-cell">${cellValue}</td>`;
            }
            else
            {
              tableRowsSt+=`<td class="crm-style-cell">-</td>`;
            }
          }
          tableRowsSt+=`</tr>`;
        }
        tableRowsParent.innerHTML=tableRowsSt;
        outputBody.innerHTML=``;
        popUpHeaderClone.innerHTML=`${despositionType} Call History for the account:${selectedAcct}`;
        popUpHeaderClone.classList.remove("hide");
        outputBody.appendChild(popUpHeaderClone);
        outputBody.appendChild(historyTableClone);
        // outputBody.innerHTML+="<div class='disclaimer alignCenter'>* Despositions created just few minutes before might not appear in the history</div>";
        historyTableClone.classList.remove("hide");
        generalCloneCount++;
        enableBtn(parentBtn,"History");
    }
    else
    {
        conn_name = "zohocrm";
        let acctDetails=fetchAccountDetails(selectedAcct);
        let acctType;
        if(acctDetails.hasOwnProperty("A_c_Type_Current_Saving"))
        {
          acctType="Loan_Account";
        }
        else
        {
          acctType="Deposit_Account";
        }
        console.log("Account details are",acctDetails);
        base_url =
          "https://ucrmapi.unionbankofindia.co.in/crm/v2/Desposition/search?criteria=(("+acctType+":equals:"+selectedAcct+")and(Desposition_Type:equals:"+despositionType+"))"; //No I18N
        base_url=encodeURI(base_url);
          var req_data = {
          headers: {}, //No I18N
          method: "GET", //No I18N
          url: base_url, //No I18N
          parameters: {
            per_page:5
          }
        };
        ZOHO.CRM.CONNECTION.invoke(conn_name, req_data).
        then((resp)=>{
          if (resp.details.statusMessage == "") {
            //no history found
            outputBody.innerHTML=`No History found for the account:`+selectedAcct + ` for ${despositionType} outbound calls.`;
            return;
          }
          let historyData = resp.details.statusMessage.data;
          console.log("response is",historyData);
          if (historyData.length == 0) {
            //no history found
            outputBody.innerHTML=`No History found for the account:`+selectedAcct+ ` for ${despositionType} outbound calls.`;
            return;
          } else {
            //get the history table clone
            //populate history rows
            let despositionTypeEnc=despositionType.replaceAll(" ","_");
            let historyTableRef=document.getElementById("despositionHistoryTableClone_"+despositionTypeEnc);
            // let historyTableRef=document.getElementById("despositionHistoryTableClone");
            let historyTableClone=historyTableRef.cloneNode(true);
            let tableHeaders=historyTableClone.querySelectorAll("th");
            let tableRowsParent=historyTableClone.querySelector("#tableBody");
            let popUpHeaderRef=document.getElementById("popUpHeader");
            let popUpHeaderClone=popUpHeaderRef.cloneNode(true);
            let tableRowsSt=``;
            historyTableClone.id+=""+generalCloneCount;
            for(let row of historyData)
            {
              tableRowsSt+=`<tr class="crm-style-row">`;
              for(let th of tableHeaders)
              {
                let configName=th.getAttribute("configName");
                let moduleName=th.getAttribute("dataModule");
                let relatedApiNames=configToApiName(configName,moduleName);
                let cellValue=resolveApiName(relatedApiNames,row);
                if(relatedApiNames)
                {
                  if((configName.toLowerCase().includes("date"))||(configName.toLowerCase().includes("time")))
                  {
                    cellValue=convertUTCStrToLocalDateTime(cellValue);
                  }
                  tableRowsSt+=`<td class="crm-style-cell">${cellValue}</td>`;
                }
                else
                {
                  tableRowsSt+=`<td class="crm-style-cell">-</td>`;
                }
              }
              tableRowsSt+=`</tr>`;
            }
            tableRowsParent.innerHTML=tableRowsSt;
            if(tableRowsSt!='')
            {
              despositionHistory[selectedAcct+"_"+despositionType]=historyData;
            }
            outputBody.innerHTML=``;
            popUpHeaderClone.innerHTML=`${despositionType} Call History for the account:${selectedAcct}`;
            popUpHeaderClone.classList.remove("hide");
            outputBody.appendChild(popUpHeaderClone);
            outputBody.appendChild(historyTableClone);
            historyTableClone.classList.remove("hide");
            generalCloneCount++;
          }
      }).catch((err)=>{
        //error in fetching history
        outputBody.innerHTML=`Couldn't fetch desposition history. Please try again in sometime or contact your administrator if the issue persists`;
        console.log("Error in history fetching",err);
      }).finally(()=>{
        enableBtn(parentBtn,"History");
        let popUpElem=outputBody.querySelector(".pop-up-header");
        if(popUpElem)
        {
          outputBody.innerHTML+="<div class='disclaimer alignCenter'>* Despositions created just few minutes before might not appear in the history</div>";
        }
        else
        {
          outputBody.innerHTML+="<div class='disclaimer'>* Despositions created just few minutes before might not appear in the history</div>"
        }

      })
      }
  }
  
  

}
//if dataSource - null, D_a (Deposits & Advances) is considered as datasource
//else the Array supplied to the dataSource parameter is considered
//the primaryKey__ parameter is considered for drop-down population
function createDynamicDespositionContainer(accountDropDown,despositionValues,dispositionHistoryContainer,despositionType,despositionSelectAction)
{
  let cdContainer=document.getElementById("callDispositonClone");
  let cdClone=cdContainer.cloneNode(true);
  let dispositionContainer=cdClone.querySelector("#dispositionContainer");

  if(!despositionValues)
  {
    despositionValues=["desposition values couldn't loaded"];
  }
  let dynamicDropDown=createDynamicDropDown(despositionValues,despositionSelectAction,"Select Desposition");
  let despositionSubmit=cdClone.querySelector("#despositionSubmit");
  let callHistoryBtn=cdClone.querySelector("#despositionHistory");
  let remarksElem=cdClone.querySelector("#remarksTextArea");
  let acctDropDown=accountDropDown;
  despositionSubmit.addEventListener("click",(evt)=>{
    let selectedAcct=acctDropDown.getAttribute("value");
    let acctDetails=fetchAccountDetails(selectedAcct);
    let acctType;
    if(acctDetails.hasOwnProperty("A_c_Type_Current_Saving"))
    {
      acctType="loan";
    }
    else
    {
      acctType="deposit";
    }
    submitDesposition(dynamicDropDown,remarksElem, despositionSubmit, accountDropDown, acctType,dispositionHistoryContainer,despositionType, cdClone);
  });
  callHistoryBtn.addEventListener("click",()=>{
    // let dynamicPopUp=createDynamicPopUp();
    // let popUpFg=dynamicPopUp.querySelector("#popUpBody");
    // fetchDespositionsHistory(acctDropDown,popUpFg);
    fetchDespositionsHistory(acctDropDown,dispositionHistoryContainer,callHistoryBtn,despositionType);
  });
  dynamicDropDown.classList.add("move-right");
  dispositionContainer.appendChild(dynamicDropDown);
  cdClone.id+=""+generalCloneCount;
  despositionSubmit.id+=""+generalCloneCount;
  callHistoryBtn.id+=""+generalCloneCount;
  cdClone.classList.remove("hide");
  generalCloneCount++;
  return cdClone;
}

function deduplicateDropDownOptions(dynamicDropDownInstance)
{
  let dropDownOptions=dynamicDropDownInstance.querySelectorAll(".fc-dropdown>.drop-line.dr");
  let optionsLength=dropDownOptions.length;
  let j;
  for(let i=0;i<optionsLength;i++)
  {
    for(j=i+1;j<optionsLength;j++)
    {
      if(dropDownOptions[i].innerHTML==dropDownOptions[j].innerHTML)
      {
        dropDownOptions[j].remove();
        optionsLength--;
      }
    }
  }
}

//if dataSource - null, D_a (Deposits & Advances) is considered as datasource
//else the Array supplied to the dataSource parameter is considered
//the primaryKey__ parameter in the dataSource array is considered for drop-down population
function loadSrMenu(srMenu,despositionValues,despositionType,dataSource,srLoadFailed,srLoadFailedMsg,retryFn)
{
  if(srLoadFailed==true)
  {
    let srLoader=srMenu.innerHTML;
    srMenu.innerHTML=``;
    srMenu.innerHTML=srLoadFailedMsg;
    let retryText=document.createElement("div");
    retryText.classList.add("send-log-btn");
    retryText.classList.add("content-div");
    retryText.innerHTML="Retry";
    retryText.addEventListener("click",(evt)=>{
      srMenu.innerHTML='';
      srMenu.innerHTML=srLoader;
      retryFn();
    })
    srMenu.appendChild(retryText);
    return;
  }
  let srInputTemplate=document.getElementById("dynamicSrInputSection");
  let srInputClone=srInputTemplate.cloneNode(true);
  let srOutputTemplate=document.getElementById("dynamicSrOutputSection");
  let srOutputClone=srOutputTemplate.cloneNode(true);
  let dropDownContainer=srInputClone.querySelector("#dropDownContainer");
  let contentTableCloneId=srMenu.getAttribute("tableCloneId");
  let contentTableClone=document.getElementById(contentTableCloneId);
  let contentTableElem=contentTableClone.cloneNode(true);
  let actionFn=srMenu.getAttribute("action");
  let filterFn=srMenu.getAttribute("filter");
  let current_desposition_fn;
  let despositionContainer;

  let locker_sma_desposition_fn=(selectedVal)=>{
    if(despositionContainer)
    {
      let despositionTable=despositionContainer.querySelector("table");
      if(selectedVal=='Promised to pay')
      {
      let additionalDespositionRowClone=document.createElement("tr");
      let tdElem1=document.createElement("td");
      let tdElem2=document.createElement("td");
      let inputDateElement=document.createElement("input");
      let todayDateStr=new Date().toISOString().split('T')[0];
      inputDateElement.classList.add("move-right");
      inputDateElement.classList.add("desposition-date")
      inputDateElement.classList.add("additional-desposition-fields");
      inputDateElement.type="date";
      inputDateElement.min=todayDateStr;
      inputDateElement.required=true;
      inputDateElement.setAttribute("apiName","Probable_Payment_Date");
      inputDateElement.addEventListener("keydown", function (e) {
        e.preventDefault();
      });
      tdElem1.innerHTML=`Probable Payment Date`;
      additionalDespositionRowClone.classList.add("disposition-row");
      additionalDespositionRowClone.id="conditional_additional_row";
      tdElem2.appendChild(inputDateElement);
      additionalDespositionRowClone.appendChild(tdElem1);
      additionalDespositionRowClone.appendChild(tdElem2);
      despositionTable.appendChild(additionalDespositionRowClone);
      }
      else
      {
        let additionalRow=despositionTable.querySelector("#conditional_additional_row");
        if(additionalRow)
        {
        additionalRow.remove();
        }
      }
    }    
  };
  let dormant_inactive_desposition_fn=(selectedVal)=>{
    if(despositionContainer)
    {
      let despositionTable=despositionContainer.querySelector("table");
      if(selectedVal=='Promised to submit KYC')
      {
      let additionalDespositionRowClone=document.createElement("tr");
      let tdElem1=document.createElement("td");
      let tdElem2=document.createElement("td");
      let inputDateElement=document.createElement("input");
      let todayDateStr=new Date().toISOString().split('T')[0];
      inputDateElement.classList.add("move-right");
      inputDateElement.classList.add("desposition-date")
      inputDateElement.classList.add("additional-desposition-fields");
      inputDateElement.type="date";
      inputDateElement.min=todayDateStr;
      inputDateElement.required=true;
      inputDateElement.setAttribute("apiName","Probable_Date_of_Submission");
      inputDateElement.addEventListener("keydown", function (e) {
        e.preventDefault();
      });
      tdElem1.innerHTML=`Probable Date of Submission`;
      additionalDespositionRowClone.classList.add("disposition-row");
      additionalDespositionRowClone.id="conditional_additional_row";
      tdElem2.appendChild(inputDateElement);
      additionalDespositionRowClone.appendChild(tdElem1);
      additionalDespositionRowClone.appendChild(tdElem2);
      despositionTable.appendChild(additionalDespositionRowClone);
      }
      else
      {
        let additionalRow=despositionTable.querySelector("#conditional_additional_row");
        if(additionalRow)
        {
          additionalRow.remove();
        }
      }
    }
  };
  if(despositionType=="Locker Overdue" || despositionType=="SMA")
  {
    //locker or sma overdue despositions
    current_desposition_fn=locker_sma_desposition_fn;
  }
  else if(despositionType=="Dormant" || despositionType=="Inactive")
  {
    //Dormant or inactive despositions
    current_desposition_fn=dormant_inactive_desposition_fn;
  }
  contentTableElem.id+=""+dynamicSrMenuCount;
  srInputClone.id+=""+dynamicSrMenuCount;
  dropDownContainer.id+=""+dynamicSrMenuCount;
  srOutputClone.id+=""+dynamicSrMenuCount;
  let accountsToBePopulated=[];
  if(!dataSource)
  {
      for(let acc of new_deposits)
    {
      if(filterFn)
      {
        if(window[filterFn](acc))
        {
          accountsToBePopulated.push(acc.Name);
        }
      }
      else
      {
        //default population without filter
        accountsToBePopulated.push(acc.Name);
      }
    }
    for(let acc of new_advances)
    {
      if(filterFn)
      {
        if(window[filterFn](acc))
        {
          accountsToBePopulated.push(acc.Name);
        }
      }
      else
      {
        //default population without filter
        accountsToBePopulated.push(acc.Name);
      }
    }
  }
  else
  {
    for(let acc of dataSource)
    {
      if(filterFn)
      {
        if(window[filterFn](acc))
        {
          accountsToBePopulated.push(acc.primaryKey__);
        }
      }
      else
      {
        //default population without filter
        accountsToBePopulated.push(acc.primaryKey__);
      }
    }
  }
  
  let dynamicDropDown=createDynamicDropDown(accountsToBePopulated,(selectedVal)=>{
    console.log("drop down clicked",selectedVal);
    let isCDLoaded=srOutputClone.getAttribute("cdLoaded");
    if(actionFn)
    {
      if(dataSource)
      {
        window[actionFn](selectedVal,contentTableElem,dataSource);
      }
      else
      {
        window[actionFn](selectedVal,contentTableElem);
      }
    }
    if(!isCDLoaded)
    {

      let dispositionHistoryContainer=document.createElement("div");
      dispositionHistoryContainer.id="historyContainer"+generalCloneCount;
      dispositionHistoryContainer.classList.add("disposition-history");
      let cdClone=createDynamicDespositionContainer(dynamicDropDown,despositionValues,dispositionHistoryContainer,despositionType,current_desposition_fn);
      despositionContainer=cdClone;
      srOutputClone.appendChild(cdClone);
      srOutputClone.appendChild(dispositionHistoryContainer);
      srOutputClone.setAttribute("cdLoaded","true");
      generalCloneCount++;
    }
    else
    {
      //check if history is loaded for the previous account number and clear the history if it is loaded
      let historyElem=srOutputClone.querySelector(".disposition-history");
      if((historyElem)&&(historyElem.innerHTML!=''))
      {
        historyElem.innerHTML='';
      }
    }
},"Select Account");
  dropDownContainer.appendChild(dynamicDropDown);
  srMenu.innerHTML=``;
  srInputClone.classList.remove("hide");
  contentTableElem.classList.remove("hide");
  srMenu.appendChild(srInputClone);
  srOutputClone.innerHTML=``;
  srOutputClone.appendChild(contentTableElem);
  srOutputClone.classList.remove("hide");
  srMenu.appendChild(srOutputClone);
  if(srMenu.id=="locker_due_sr_section")
  {
    //locker section - hide input section
    //select the first account
    let srInputHeaderElem=srInputClone.querySelector("#inputLabel");
    let additionalDespositionRowClone=document.createElement("tr");
    let tdElem1=document.createElement("td");
    let tdElem2=document.createElement("td");
    tdElem1.innerHTML=`Locker Number`;
    additionalDespositionRowClone.classList.add("disposition-row");
    additionalDespositionRowClone.id+=dynamicSrMenuCount;
    srInputHeaderElem.innerHTML="Overdue Lockers";
    // dynamicDropDown.classList.add("hide_tab_imp");
    deduplicateDropDownOptions(dynamicDropDown);
    dynamicDropDown.selectItemByIndex(0);
    dynamicDropDown.classList.add("move-right");
    tdElem2.appendChild(dynamicDropDown);
    additionalDespositionRowClone.appendChild(tdElem1);
    additionalDespositionRowClone.appendChild(tdElem2);
    if(despositionContainer)
    {
    let despositionTable=despositionContainer.querySelector("table");
    despositionTable.appendChild(additionalDespositionRowClone);
    }
  }
  dynamicSrInputSection++;
  dynamicSrMenuCount++;
}
function configToApiName(configName,fileName)
{
  let currentConfigurations=configsJson[fileName];
  let relatedApiNames=currentConfigurations[configName];
  return relatedApiNames;
}
function resolveApiName(relatedApiNames,dataObject)
{
  if(!dataObject)
  {
    return "-";
  }
  if(!relatedApiNames)
  return "-";
  if(typeof relatedApiNames === "string")
  {
    return dataObject[apiName] || "-";
  }
  for(let apiName of relatedApiNames)
  {
    if(typeof apiName === 'string')
    {
      if(dataObject[apiName])
      {
        return dataObject[apiName];
      }
    }
    else
    {
      let subKeys=apiName["fields"];
      let obj=dataObject;
      for(key of subKeys)
      {
        if(obj)
        {
          obj=obj[key]?obj[key]:null;
        }
        else
        {
          break;
        }
      }
      if(obj)
      {
        return obj;
      }
    }
  }
  return "-";
}
function formatOutboundValues(cellValue,configName)
{
  //format_bal2
  if(cellValue && configName)
  {
    if(configName.includes("__dateStr__"))
    {
      if(cellValue)
      {
        let cleansedVal=cellValue.replaceAll(",","");
        let formattedVal=dateMonthStrToDateNumberStr(cleansedVal);
        formattedVal=formattedVal.replaceAll("/","-");
        return formattedVal;
      }
      else
      {
        return "-";
      }
      
    }
    else if(configName.includes("__date__"))
    {
      return format_date(cellValue);
    }
    else if(configName.includes("__currency__"))
    {
      let cellValueInNumber=+cellValue;
      let sign=cellValueInNumber>0?"":"-";
      return sign+format_bal2(cellValue);
    }
    else
    {
      return cellValue;
    }
  }
  else
  {
    return null;
  }
}
function displayLockerDetails(account,tableElem,dataSource)
{
  //change for showing all lockers under locker overdue
  let tableBody=tableElem.querySelector("#tableBody");
  let tableHeaders=tableElem.querySelectorAll("th");
  let rowSt=``;
  table_loader_with_colspan(tableBody,1,6);
  if(!dataSource)
  {
    tableBody.innerHTML=`<tr class="crm-style-row"><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td></tr>`;
  }
  else
  {
    for(let acctDetails of dataSource)
    {
      rowSt+=`<tr class="crm-style-row">`;
      for(let header of tableHeaders)
      {
        let configName=header.getAttribute("configName");
        let relatedApiNames=configToApiName(configName,"outboundFields.json");
        let cellValue=resolveApiName(relatedApiNames,acctDetails);
        if(configName)
        {
          let valOut=formatOutboundValues(cellValue,configName);
          rowSt+=`<td class="crm-style-cell">${valOut}</td>`;
        }
        else
        {
          rowSt+=`<td class="crm-style-cell">-</td>`;
        }
      }
      rowSt+=`</tr>`;
    }
    tableBody.innerHTML=rowSt;
  }
  /*
  //Old code to show locker associated with an account number
  let acctDetails=fetchRecordFromDataSource(account,dataSource);
  if(acctDetails)
  {
    let tableBody=tableElem.querySelector("#tableBody");
    let tableHeaders=tableElem.querySelectorAll("th");
    let rowSt=`<tr class="crm-style-row">`;
    // let configNames=[];
    console.log("selected account Details",acctDetails,tableHeaders);
    table_loader_with_colspan(tableBody,1,6);
    for(let header of tableHeaders)
    {
      let configName=header.getAttribute("configName");
      let relatedApiNames=configToApiName(configName,"outboundFields.json");
      let cellValue=resolveApiName(relatedApiNames,acctDetails);
      if(configName)
      {
        if(configName.includes("__date__"))
        {
          rowSt+=`<td class="crm-style-cell">${format_date(cellValue)}</td>`;
        }
        else
        {
          rowSt+=`<td class="crm-style-cell">${cellValue}</td>`;
        }
      }
      else
      {
        rowSt+=`<td class="crm-style-cell">-</td>`;
      }
    }
    rowSt+=`</tr>`;
    tableBody.innerHTML=rowSt;
  } 
  else
  {
    //no Account Details Found
    console.log("No account details found for the given account");
    tableBody.innerHTML=`<tr class="crm-style-row"><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td></tr>`;
  }
  */
}
function displayDeafDetails(account,tableElem)
{
  let acctDetails=fetchAccountDetails(account);
  if(acctDetails)
  {
    let tableBody=tableElem.querySelector("#tableBody");
    let tableHeaders=tableElem.querySelectorAll("th");
    let rowSt=`<tr class="crm-style-row">`;
    // let configNames=[];
    console.log("selected account Details",acctDetails,tableHeaders);
    table_loader_with_colspan(tableBody,1,8);
    for(let header of tableHeaders)
    {
      let configName=header.getAttribute("configName");
      let relatedApiNames=configToApiName(configName,"outboundFields.json");
      let cellValue=resolveApiName(relatedApiNames,acctDetails);
      if(configName)
      {
        
        let valOut=formatOutboundValues(cellValue,configName);
        rowSt+=`<td class="crm-style-cell">${valOut}</td>`;
      }
      else
      {
        rowSt+=`<td class="crm-style-cell">-</td>`;
      }
    }
    rowSt+=`</tr>`
    tableBody.innerHTML=rowSt;
  } 
  else
  {
    //no Account Details Found
    console.log("No account details found for the given account");
    tableBody.innerHTML=`<tr class="crm-style-row"><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td></tr>`;
  }
}
function displayWelcomeDetails(account,tableElem)
{
  let acctDetails=fetchAccountDetails(account);
  if(acctDetails)
  {
    let tableBody=tableElem.querySelector("#tableBody");
    let tableHeaders=tableElem.querySelectorAll("th");
    let rowSt=`<tr class="crm-style-row">`;
    // let configNames=[];
    console.log("selected account Details",acctDetails,tableHeaders);
    table_loader_with_colspan(tableBody,1,6);
    for(let header of tableHeaders)
    {
      let configName=header.getAttribute("configName");
      let relatedApiNames=configToApiName(configName,"outboundFields.json");
      let cellValue=resolveApiName(relatedApiNames,acctDetails);
      if(configName)
      {
        let valOut=formatOutboundValues(cellValue,configName);
        rowSt+=`<td class="crm-style-cell">${valOut}</td>`;
      }
      else
      {
        rowSt+=`<td class="crm-style-cell">-</td>`;
      }
    }
    rowSt+=`</tr>`
    tableBody.innerHTML=rowSt;
  } 
  else
  {
    //no Account Details Found
    console.log("No account details found for the given account");
    tableBody.innerHTML=`<tr class="crm-style-row"><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td></tr>`;
  }
}

function displayDormantDetails(account,tableElem)
{
  let acctDetails=fetchAccountDetails(account);
  if(acctDetails)
  {
    let tableBody=tableElem.querySelector("#tableBody");
    let tableHeaders=tableElem.querySelectorAll("th");
    let rowSt=`<tr class="crm-style-row">`;
    // let configNames=[];
    console.log("selected account Details",acctDetails,tableHeaders);
    table_loader_with_colspan(tableBody,1,8);
    for(let header of tableHeaders)
    {
      let configName=header.getAttribute("configName");
      let relatedApiNames=configToApiName(configName,"outboundFields.json");
      let cellValue=resolveApiName(relatedApiNames,acctDetails);
      if(configName)
      {
        let valOut=formatOutboundValues(cellValue,configName);
        rowSt+=`<td class="crm-style-cell">${valOut}</td>`;
      }
      else
      {
        rowSt+=`<td class="crm-style-cell">-</td>`;
      }
    }
    rowSt+=`</tr>`
    tableBody.innerHTML=rowSt;
  } 
  else
  {
    //no Account Details Found
    console.log("No account details found for the given account");
    tableBody.innerHTML=`<tr class="crm-style-row"><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td></tr>`;
  }
}
function displayInactiveDetails(account,tableElem)
{
  let acctDetails=fetchAccountDetails(account);
  if(acctDetails)
  {
    let tableBody=tableElem.querySelector("#tableBody");
    let tableHeaders=tableElem.querySelectorAll("th");
    let rowSt=`<tr class="crm-style-row">`;
    // let configNames=[];
    console.log("selected account Details",acctDetails,tableHeaders);
    table_loader_with_colspan(tableBody,1,8);
    for(let header of tableHeaders)
    {
      let configName=header.getAttribute("configName");
      let relatedApiNames=configToApiName(configName,"outboundFields.json");
      let cellValue=resolveApiName(relatedApiNames,acctDetails);
      if(configName)
      {
        let valOut=formatOutboundValues(cellValue,configName);
        rowSt+=`<td class="crm-style-cell">${valOut}</td>`;
      }
      else
      {
        rowSt+=`<td class="crm-style-cell">-</td>`;
      }
    }
    rowSt+=`</tr>`
    tableBody.innerHTML=rowSt;
  } 
  else
  {
    //no Account Details Found
    console.log("No account details found for the given account");
    tableBody.innerHTML=`<tr class="crm-style-row"><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td></tr>`;
  }
}
function displaySMADetails(account,tableElem)
{
  let acctDetails=fetchAccountDetails(account);
  if(acctDetails)
  {
    let tableBody=tableElem.querySelector("#tableBody");
    let tableHeaders=tableElem.querySelectorAll("th");
    let rowSt=`<tr class="crm-style-row">`;
    // let configNames=[];
    console.log("selected account Details",acctDetails,tableHeaders);
    table_loader_with_colspan(tableBody,1,8);
    for(let header of tableHeaders)
    {
      let configName=header.getAttribute("configName");
      let relatedApiNames=configToApiName(configName,"outboundFields.json");
      let cellValue=resolveApiName(relatedApiNames,acctDetails);
      if(configName)
      {
        let valOut=formatOutboundValues(cellValue,configName);
        rowSt+=`<td class="crm-style-cell">${valOut}</td>`;
      }
      else
      {
        rowSt+=`<td class="crm-style-cell">-</td>`;
      }
    }
    rowSt+=`</tr>`
    tableBody.innerHTML=rowSt;
  } 
  else
  {
    //no Account Details Found
    console.log("No account details found for the given account");
    tableBody.innerHTML=`<tr class="crm-style-row"><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td><td class="crm-style-cell">-</td></tr>`;
  }
}

function fetchRecordFromDataSource(primaryKey,dataSource)
{
  for(let rec of dataSource)
  {
    if(rec["primaryKey__"]==primaryKey)
    {
      return rec;
    }
  }
  return;
}
function fetchAccountDetails(number)
{
  for(let acc of new_deposits)
  {
    if(acc.Name==number)
    {
      return acc;
    }
  }
  for(let acc of new_advances)
  {
    if(acc.Name==number)
    {
      return acc;
    }
  }
  return false;
}
async function displayNav(na) {
  console.log("DISPLAY NAV SHOWN  ", na);
  let vl = document.getElementsByClassName("displayDivChild");
  let ul = document.getElementsByClassName("varNavChildDiv");
  for (var i = 0; i < vl.length; i++) {
    // console.log(vl[i]);
    vl[i].style.display = "none";
    if (vl[i].id == "SRChild" || vl[i].id=="outboundCallChild") {
      //No I18N
      vl[i].classList.remove("SrContainer"); //No I18N
      vl[i].classList.add("SrContainer-first-time"); //No I18N
      vl[i].classList.add("hide_tab_imp"); //No I18N
    }
  }
  for (var i = 0; i < ul.length; i++) {
    ul[i].style.backgroundColor = "transparent";
  }
  if (na.id == "homeLink") {
    console.log("CSUS LINK");
    document.getElementById("homeChild").style.display = "flex";
    document.getElementById("varNavChildDivHo").style.backgroundColor =
      "rgb(91 97 110)";
    // document.getElementById("varNavChildDivSv").style.backgroundColor =
    //   "rgb(91 97 110)";
    // document.getElementById("servChild").style.display = "block";
  } else if (na.id == "addrLink") {
    console.log("CSUS LINK");
    document.getElementById("addrChild").style.display = "block";
    document.getElementById("varNavChildDivAd").style.backgroundColor =
      "rgb(91 97 110)";
  } else if (na.id == "bankLink") {
    console.log("CSUS LINK");
    document.getElementById("bankChild").style.display = "block";
    document.getElementById("varNavChildDivBk").style.backgroundColor =
      "rgb(91 97 110)";
  } else if (na.id == "servLink") {
    console.log("CSUS LINK");
    document.getElementById("servChild").style.display = "block";
    document.getElementById("varNavChildDivSv").style.backgroundColor =
      "rgb(91 97 110)";
  } else if (na.id == "assdLink") {
    console.log("CSUS LINK");
    document.getElementById("accdChild").style.display = "block";
    document.getElementById("varNavChildDivAt").style.backgroundColor =
      "rgb(91 97 110)";
  } else if (na.id == "csusLink") {
    console.log("CSUS LINK");
    document.getElementById("csusChild").style.display = "block";
    document.getElementById("varNavChildDivCu").style.backgroundColor =
      "rgb(91 97 110)";
  } else if (na.id == "fubLink") {
    console.log("CASA API CALL START ", document.getElementById("fubChild"));
    document.getElementById("fubChild").style.display = "block";
    document.getElementById("varNavChildDivFu").style.backgroundColor =
      "rgb(91 97 110)";
    //////////-------Add the Liabilities Search Line below ------------/////////
    let m = "Liabilities1";
    let c =
      "((Customer_Name:equals:" + rid + ")and(A_c_Type:equals:Term Deposit))";

    // CASA API CALL
    /*
    ZOHO.CRM.API.searchRecord({
      Entity: "Liabilities1",
      Type: "criteria",
      Query: "(Customer_Name:equals:" + rid + ")",
    })
      .then(function (data) {
        console.log("Liabilities search result", data);
        if (data.status == 204) {
          console.log("No records in liabilities module for the customer");
          stadat = "";
          liability_accountNumber = "-";
          liability_scheme_name = "-";
          // liability_ac_type=stadat[0].A_c_Type_Current_Saving || "";
          liability_balance = "-";
          liability_sol_id = "-";
          liability_reason_for_lien = "-";
          liability_account_close_date = "-";
          liability_nomination_available = "-";
          liability_freeze_status = "-";
          liability_deposit_period = "-";
          liability_ac_open_date = "-";
          liability_scheme_code = "-";
          liability_account_status = "-";
          liability_branch = "-";
          liability_lien_amount = "-";
          liability_average_balnce = "-";
          liability_check_allowed = "-";
          liability_mode_of_operation = "-";
          liability_freeze_reason = "-";
          liability_maturity_date = "-";
          // return;
        }

        $("#tbldepdtbcs tr").remove();
        stadat = "";
        stadat = data.data || "";
        console.log("Search Stadat", stadat);
        console.log("Search data", data);

        //empty check
        var stadat1 = [];
        if (stadat.length > 0) {
          liability_accountNumber = stadat[0].Name || "";
          liability_scheme_name = stadat[0].Scheme_Name || "";
          liability_ac_type = stadat[0].A_c_Type_Current_Saving || "";
          liability_balance = data.data[0].Balance || "";
          liability_sol_id = data.data[0].SOL_Id || "";
          liability_reason_for_lien = data.data[0].Reason_for_Lien || "";
          liability_account_close_date = data.data[0].Account_Close_Date || "";
          liability_nomination_available =
            data.data[0].Nomination_Available_Y_N || "";
          liability_freeze_status = data.data[0].Freeze_Status || "";
          liability_deposit_period = data.data[0].Deposit_Period || "";
          liability_ac_open_date = data.data[0].A_c_Open_Date || "";
          liability_scheme_code = data.data[0].Scheme_Code || "";
          liability_account_status = data.data[0].Account_Status || "";
          liability_branch = data.data[0].Branch || "";
          liability_lien_amount = data.data[0].Lien_Amount || "";
          liability_average_balnce = data.data[0].Average_Balance || "";
          liability_check_allowed = data.data[0].Cheque_Allowed_Y_N || "";
          liability_mode_of_operation =
            data.data[0].Mode_of_Operation_Single_Joint || "";
          liability_freeze_reason = data.data[0].Freeze_Reason || "";
          liability_maturity_date = data.data[0].Maturity_Date || "";
          // for (let index = 0; index < stadat.length; index++) {
          //   const data = stadat[index];
          //   console.log(data.A_c_Type);
          //   if (
          //     data.A_c_Type == "Current" ||
          //     data.A_c_Type == "Saving" ||
          //     data.A_c_Type == "CAA" ||
          //     data.A_c_Type == "SBA" ||
          //   ) {
          //     stadat1.push(data);
          //   }
          // }
          stadat1 = stadat;
        }
        //End of empty check
        console.log("Data ", stadat1);
        stadat = stadat1;
        fb_casa = sort_accounts_casa(stadat);
        console.log("fb_Casa is", fb_casa);
        populate_fb_deposits(fb_casa);
        populate_fb_term_deposits(fb_casa, false);
        //       var table3 = document.getElementById("tbldepdtbcs");
        //       if (stadat.length == 0) {
        //         console.log("GOT THERE");
        //         var row = `<tr>
        //     <td class="tabdat" colspan=2>-</td>
        //     <td class="tabdat" colspan=2>-</td>
        //     <td class="tabdat" colspan=2>-</td>
        //     <td class="tabdat" colspan=2>-</td>
        //     </tr>`;
        //         table3.innerHTML += row;
        //       } else {
        //         fb_casa = stadat;
        //         for (var i = 0; i < stadat.length; i++) {
        //           console.log("scheme code is", stadat[i].Scheme_Codes);
        //           console.log("traversing stadat", stadat[i].Owner);
        //           var row3 = `<tr id="${stadat[i].id}" onclick="casaClk(this,${i})">
        //           <td class="tabdat" colspan=2>${stadat[i].Name || "-"}</td>
        //           <td class="tabdat" title="${
        //             stadat[i].Account_Number
        //           }" colspan=2 onClick>${stadat[i].Account_Number || "-"}</td>
        //           <td class="tabdat" colspan=2>${stadat[i].SOL_Id || "-"}</td>
        //           <td class="tabdat" colspan=2>${
        //             stadat[i].Scheme_Codes.name || "-"
        //           }</td>
        //           <td class="tabdat" colspan=2>${format_date(
        //             stadat[i].A_c_Open_Date
        //           )}</td>
        //           <td class="tabdat" colspan=2>${stadat[i].Balance_Currency || "-"}</td>
        //           <td class="tabdat" colspan=2>${stadat[i].Lien_Amount || "-"}</td>
        //           <td class="tabdat" colspan=2>${stadat[i].Account_Status}</td>
        //           <td class="tabdat" colspan=2>${stadat[i].Owner.name}</td>
        //           <td class="tabdat" colspan=2>${format_last_update_time(
        //             stadat[i].last_update_time
        //           )}</td>
        // </tr>`;
        //           table3.innerHTML += row3;
        //           console.log("for loop data", stadat[i].Name);
        //         }
        //       }
        // populate_term_deposit_table(new_deposits);

        //////////////////--------Term Deposit Table----------//////////////
        /*
      ZOHO.CRM.API.searchRecord({
        Entity: "Liabilities1",
        Type: "criteria",
        Query: "(Customer_Name:equals:" + rid + ")",
      }).then(function (data) {
        $("#tbldepdtbtd tr").remove();
        stadat_td = "";
        stadat_td = data.data || "";
        var stadat = [];
        if (stadat_td != "") {
          for (let index = 0; index < stadat_td.length; index++) {
            const data = stadat_td[index];
            console.log(data.A_c_Type);
            if (data.A_c_Type == "Term Deposit" || data.A_c_Type == "TDA") {
              stadat.push(data);
              console.log("Term deposit record is", data);
            }
          }
        }
        stadat_td = stadat;
        var table4 = document.getElementById("tbldepdtbtd");
        if (stadat.length == 0) {
          console.log("GOT THERE");
          var row = `<tr>
      <td class="tabdat" colspan=2>-</td>s
      <td class="tabdat" colspan=2>-</td>
      <td class="tabdat" colspan=2>-</td>
      <td class="tabdat" colspan=2>-</td>
      </tr>`;
          table4.innerHTML += row;
        } else {
          term_deposit = stadat;
          for (var i = 0; i < stadat_td.length; i++) {
            var row4 = `<tr id="${stadat[i].id}" onclick="tdClk(this,${i})">
<td class="tabdat" colspan=2>${stadat_td[i].Name || "-"}</td>
<td class="tabdat" colspan=2>${stadat_td[i].Account_Name || "-"}</td>
<td class="tabdat" colspan=2>${stadat_td[i].Branch_Name || "-"}</td>
<td class="tabdat" colspan=2>${stadat_td[i].Scheme_Codes.name || "-"}</td>
<td class="tabdat" colspan=2>${format_date(stadat_td[i].A_c_Open_Date)}</td>
<td class="tabdat" colspan=2>${stadat_td[i].Balance_Currency || "-"}</td>
<td class="tabdat" colspan=2>${stadat_td[i].Maturity_Date || "-"}</td>
<td class="tabdat" colspan=2>${
              calculate_maturity_amount(
                stadat_td[i].Interest_Rate,
                stadat_td[i].Balance_Currency
              ) || "-"
            }</td>
<td class="tabdat" colspan=2>${stadat_td[i].Owner.name || "-"}</td>
<td class="tabdat" colspan=2>${
              resolve_account_type(stadat_td[i].A_c_Type) || "-"
            }</td>
</tr>`;
            table4.innerHTML += row4;
          }
        }
      });
      */
    //////////------------Advance Table--------////////////
    //////////-------Add the Account Search Line below ------------/////////
    console.log("advances table");
    // populate_fb_advances(new_advances);
    /*
      ZOHO.CRM.API.searchRecord({
        Entity: "Loan_Accounts",
        Type: "criteria",
        Query: "(Customer_Name:equals:" + rid + ")",
      }).then(function (data) {
        $("#tbladvdtb tr").remove();
        stadat_ad = "";
        stadat_ad = data.data || "";
        console.log("Dataaaaa", data);
        var stadat = [];
        if (stadat_ad != "") {
          for (let index = 0; index < stadat_ad.length; index++) {
            const data = stadat_ad[index];
            // console.log("Advances  ", data.A_c_Type_Current_Saving);
            if (
              data.A_c_Type_Current_Saving != "" ||
              data.A_c_Type_Current_Saving != null
            ) {
              stadat.push(data);
            }
          }
        }
        stadat_ad = stadat;
        /*
        fb_adv = sort_accounts_adv(stadat_ad);
        populate_fb_advances(fb_adv);
        */
    //   var table5 = document.getElementById("tbladvdtb");
    //   console.log(stadat_ad);
    //   if (stadat_ad.length == 0) {
    //     console.log("GOT THERE in loan accounts", data);
    //     var row = `<tr>
    // <td class="tabdat" colspan=2>-</td>
    // <td class="tabdat" colspan=2>-</td>
    // <td class="tabdat" colspan=2>-</td>
    // <td class="tabdat" colspan=2>-</td>
    // </tr>`;
    //     table5.innerHTML += row;
    //   } else {
    //     fb_adv = stadat_ad;
    //     for (var i = 0; i < stadat_ad.length; i++) {
    //       // console.log("scheme name is",stadat_ad[i].Scheme_Name.name);
    //       try {
    //         scheme_name = stadat_ad[i].Scheme_Name.name;
    //       } catch (error) {
    //         scheme_name = "-";
    //       }
    //       try {
    //         name_ = stadat_ad[i].Name;
    //       } catch (error) {
    //         name_ = "-";
    //       }
    //       try {
    //         ac_open_date = stadat_ad[i].A_c_Open_Date;
    //       } catch (error) {
    //         ac_open_date = "-";
    //       }
    //       try {
    //         ac_type_curr_sav = stadat_ad[i].A_c_Type_Current_Saving;
    //       } catch (error) {
    //         ac_type_curr_sav = "-";
    //       }
    //       var row5 = `<tr id="${stadat_ad[i].id}" onclick="advClk(this,${i})">
    //     <td class="tabdat" colspan=2 title="${name_}">${name_ || "-"}</td>
    //     <td class="tabdat"  colspan=2>${stadat[i].Account_Name || "-"}</td>
    //     <td class="tabdat" colspan=2>${
    //       stadat_ad[i].Branch_Sol_ID.name || "-"
    //     }</td>
    //     <td class="tabdat" colspan=2>${scheme_name || "-"}</td>
    //     <td class="tabdat" colspan=2>${
    //       format_date(stadat_ad[i].A_c_Open_Date) || "-"
    //     }</td>
    //     <td class="tabdat" colspan=2>${
    //       stadat_ad[i].Sanctioned_Amount || "-"
    //     }</td>
    //     <td class="tabdat" colspan=2>${
    //       stadat_ad[i].Balance_Currency || "-"
    //     }</td>
    //     <td class="tabdat" colspan=2>${
    //       stadat_ad[i].Balance_Currency || "-"
    //     }</td>
    //     <td class="tabdat" colspan=2>${
    //       stadat_ad[i].Overdue_Amount || "-"
    //     }</td>
    //     <td class="tabdat" colspan=2>${stadat_ad[i].Owner.name || "-"}</td>
    //     <td class="tabdat" colspan=2>${
    //       format_last_update_time(stadat_ad[i].Account_Close_Date) || "-"
    //     }</td>
    //     </tr>`;
    //       table5.innerHTML += row5;
    //     }
    //   }
    // });
    /*
      })
      .catch((err) => {
        populate_fb_deposits([], false);
        populate_fb_term_deposits([], false);
      });
      */
    // Asset Clarification
  } else if (na.id == "nfubLink") {
    console.log("NFB API CALL START    >>>>>>>>>>>>>>>>  ");
    document.getElementById("nfubChild").style.display = "block";
    document.getElementById("varNavChildDivNf").style.backgroundColor =
      "rgb(91 97 110)";
    //////////-----------Bank Guarantee Table----------///////////
    //new nbf table
    if (!nfub_link_loaded) {
      nfub_link_loaded = true;
      try {
        get_non_funds2(1);
      } catch {
        console.log("error in non funds API", e);
        populate_fb_advances([], false);
      }
      /*
      ZOHO.CRM.API.searchRecord({
        Entity: "Non_Fund_Based",
        Type: "criteria",
        Query: "(Customer_Name:equals:" + rid[0] + ")",
      }).then((d)=>{
        new_non_funds.push(...d.data);
        if(d.info.more_records)
        {
          get_non_funds(2);
        }
        else
        {
          console.log("nfb count is",new_non_funds.length);
          populate_nfb_table(new_non_funds,false);
        }
      }).catch((e)=>{
        populate_nfb_table([],false);
      });
      */
      if (new_advances.length == 0) {
        // get_advances(1);
        display_panel_overlay("adv_panel_overlay", loader_html);
        // get_advances2(1);
      }
    }

    //end of new non funds
    /*
    ZOHO.CRM.API.searchRecord({
      Entity: "Non_Fund_Based",
      Type: "criteria",
      Query: "(Customer_Name:equals:" + rid[0] + ")",
    }).then(function (data) {
      
      if(data.info.more_records)
      {

        // document.getElementById("").style.display='flex';
      }
      console.log("DATA OF BANK GUARANTEE TABLE ", data, rid[0]);
      $("#tblbgrdtb tr").remove();
      // console.log(data);
      stadat_bgrd = "";
      stadat_bgrd = data.data || "";
      var stadat = [];
      if (stadat_bgrd != "") {
        for (let index = 0; index < stadat_bgrd.length; index++) {
          const data = stadat_bgrd[index];
          // console.log(data.Non_Fund_Based_Type);
          // if (data.Non_Fund_Based_Type == "Bank Guarantee")
          if (true) {
            stadat.push(data);
          }
        }
        console.log("Collected non-fund based data", stadat);
      }
      console.log("Data ", stadat_bgrd);
      console.log("Data ", stadat);
      stadat_bgrd = stadat;
      console.log("Collected bgrd Data is", stadat);
      var table = document.getElementById("tblbgrdtb");
      if (stadat_bgrd.length == 0) {
        console.log("GOT THERE");
        var row = `<tr>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        <td class="tabdat" colspan=2>-</td>
        </tr>`;
        table.innerHTML += row;
      } else {
        // bank_guarantee = stadat_bgrd;
        nfb_data = stadat_bgrd;
        console.log("setting nfb data", nfb_data);
        for (var i = 0; i < stadat_bgrd.length; i++) {
          let exp_date = stadat_bgrd[i].Expiry_Date || "-";
          let close_date = stadat_bgrd[i].Date_Closed || "-";
          let close_flag = "No";
          let sol_id=stadat_bgrd[i].SOL||"-";
          let sol_lookup=stadat_bgrd.SOL_ID||"-";
          let sol_name='';
          if(sol_lookup=="-")
          {
            sol_name="-";
          }
          else
          {
            sol_name=stadat_bgrd[i].SOL_ID.name||"-";
          }
           
          let sol_str="";
          if(sol_name=="-"&&sol_id=="-")
          {
            sol_str='-';
          }
          else if(sol_name=="-"&&sol_id!="-")
          {
            sol_str+=`${sol_id}`;
          }
          else if(sol_name!="-"&&sol_id=="-")
          {
            sol_str+=`${sol_name}`;
          }
          else
          {
            sol_str+=`${sol_name}(${sol_id})`;
          }
          if (close_date != "-") {
            let today = new Date();
            let close_d = new Date(close_date.split(" ")[0]);

            if (today.getDate() < close_d.getDate()) {
              close_flag = "Yes";
              console.log("skipping records");
              console.log("Comparing dates", today, close_d, today > close_d);
              continue;
            }
          }
          if (exp_date != "-") {
            exp_date = format_date(exp_date.split(" ")[0]);
          }

          if (stadat_bgrd[i].Non_Fund_Type == "Letter of Credit") {
            // console.log("Letter if credit clicked");
            //add loc row
            var row = `<tr id="${
              stadat_bgrd[i].id
            }" onclick="nonfundrowclick(this, ${i},'${
              stadat_bgrd[i].Non_Fund_Type
            }')">
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].LC_No_Letter_of_Credit_No || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Non_Fund_Type || "-"}</td>
        <td class="tabdat" colspan=2>${sol_str}</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Beneficiary_Name || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Amount || "-"}</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Currency_Code || "-"}</td>
        <td class="tabdat" colspan=2>${exp_date}</td>
        <td class="tabdat" colspan=2>${close_flag}</td>
        </tr>`;
          } else if (stadat_bgrd[i].Non_Fund_Type == "Bank Guarantee") {
            console.log("Bank guarantee clicked",stadat_bgrd[i].BG_No_Bank_Gurantee_No_No);
            var row = `<tr id="${
              stadat_bgrd[i].id
            }" onclick="nonfundrowclick(this, ${i},'${
              stadat_bgrd[i].Non_Fund_Type
            }')">
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].BG_No_Bank_Gurantee_No_No || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Non_Fund_Type || "-"}</td>
        <td class="tabdat" colspan=2>${sol_str}</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Beneficiary_Name || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Amount || "-"}</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Currency_Code || "-"}</td>
        <td class="tabdat" colspan=2>${exp_date}</td>
        <td class="tabdat" colspan=2>${close_flag}</td>
        </tr>`;
          } else if (stadat_bgrd[i].Non_Fund_Type == "Forward Contract") {
            console.log("Forward contract clicked");
            var row = `<tr id="${
              stadat_bgrd[i].id
            }" onclick="nonfundrowclick(this, ${i},'${
              stadat_bgrd[i].Non_Fund_Type
            }')">
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Forward_Contract || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Non_Fund_Type || "-"}</td>
        <td class="tabdat" colspan=2>${sol_str}</td>
        <td class="tabdat" colspan=2>${
          stadat_bgrd[i].Beneficiary_Name || "-"
        }</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Contract_Amount || "-"}</td>
        <td class="tabdat" colspan=2>${stadat_bgrd[i].Currency_Code || "-"}</td>
        <td class="tabdat" colspan=2>${exp_date}</td>
        <td class="tabdat" colspan=2>${close_flag}</td>
        </tr>`;
          }

          table.innerHTML += row;
        }
      }
    });
    */
    console.log("END ADVANCES");
    //////////-----------Letter of Credit Table----------///////////
    // ZOHO.CRM.API.getAllRecords({
    //   Entity: "Non_Fund_Based",
    // ZOHO.CRM.API.searchRecord({
    //   Entity: "Non_Fund_Based",
    //   Type: "criteria",
    //   Query:
    //     "((Customer_Name:equals:" +
    //     rid +
    //     ")and(Non_Fund_Types:equals:Letter of Credit))",
    /*
    ZOHO.CRM.API.searchRecord({
      Entity: "Non_Fund_Based",
      Type: "criteria",
      Query: "(Customer_Name:equals:" + rid + ")",
    }).then(function (data) {
      console.log(data);
      $("#tbllocrdtb tr").remove();
      stadat_loc = "";
      stadat_loc = data.data || "";
      var stadat = [];
      if (stadat_loc != "") {
        for (let index = 0; index < stadat_loc.length; index++) {
          const data = stadat_loc[index];
          console.log(data.Non_Fund_Type);
          if (data.Non_Fund_Type == "Letter of Credit") {
            stadat.push(data);
          }
        }
      }
      stadat_loc = stadat;
      // nfb_data=stadat_loc;
      // console.log("nfb data is",nfb_data);
      var table1 = document.getElementById("tbllocrdtb");
      if (stadat_loc.length == 0) {
        console.log("GOT THERE");
        var row1 = `<tr>
        <td class="tabdat" colspan=2>-</td>
        </tr>`;
        table1.innerHTML += row1;
      } else {
        letter_of_credit = stadat_loc;
        for (var i = 0; i < stadat_loc.length; i++) {
          var row1 = `<tr id="${stadat_loc[i].id}" onclick="locClk(this, ${i})">
        <td class="tabdat" colspan=2>${
          stadat_loc[i].LC_No_Letter_of_Credit_No || "-"
        }</td>
        <td class="tabdat" colspan=2>${
          stadat_loc[i].Contract_Amount || "-"
        }</td>
        <td class="tabdat" colspan=2>${
          stadat_loc[i].Beneficiary_Name || "-"
        }</td>
        <td class="tabdat" colspan=2>${
          format_date(stadat_loc[i].Expiry_Date) || "-"
        }</td>
        <td class="tabdat" colspan=2>${
          stadat_loc[i].Currency_in_Amount || "-"
        }</td>
        </tr>`;
          table1.innerHTML += row1;
        }
      }
    });
    */
    //////////-----------Forward Contract Table----------///////////
    // ZOHO.CRM.API.getAllRecords({
    //   Entity: "Non_Fund_Based",
    // ZOHO.CRM.API.searchRecord({
    //   Entity: "Non_Fund_Based",
    //   Type: "criteria",
    //   Query:
    //     "((Customer_Name:equals:" +
    //     rid +
    //     ")and(Non_Fund_Types:equals:Forward Contract No))",
    /*
    ZOHO.CRM.API.searchRecord({
      Entity: "Non_Fund_Based",
      Type: "criteria",
      Query: "(Customer_Name:equals:" + rid + ")",
    }).then(function (data) {
      $("#tblfcrdtb tr").remove();
      stadat_fcr = "";
      stadat_fcr = data.data || "";
      var stadat = [];
      if (stadat_fcr != "") {
        for (let index = 0; index < stadat_fcr.length; index++) {
          const data = stadat_fcr[index];
          console.log(data.Non_Fund_Type);
          if (data.Non_Fund_Type == "Forward Contract") {
            stadat.push(data);
          }
        }
      }
      console.log("Forward Contract   ", stadat_fcr);
      console.log("Forward Contract   ", stadat);
      stadat_fcr = stadat;
      var table2 = document.getElementById("tblfcrdtb");
      if (stadat_fcr.length == 0) {
        console.log("GOT THERE");
        var row2 = `<tr>
         <td class="tabdat" colspan=2>-</td>
         <td class="tabdat" colspan=2>-</td>
         <td class="tabdat" colspan=2>-</td>
         <td class="tabdat" colspan=2>-</td>
         <td class="tabdat" colspan=2>-</td>
         <td class="tabdat" colspan=2>-</td>
         </tr>`;
        table2.innerHTML += row2;
      } else {
        forward_contracts = stadat_fcr;
        console.log("Forward Contract ", forward_contracts);
        for (var i = 0; i < stadat_fcr.length; i++) {
          var row2 = `<tr id="${stadat_fcr[i].id}" onclick="fcrClk(this,${i})">
         <td class="tabdat" colspan=2>${
           stadat_fcr[i].Forward_Contract || "-"
         }</td>
         <td class="tabdat" colspan=2>${
           stadat_fcr[i].Contract_Amount || "-"
         }</td>
         <td class="tabdat" colspan=2>${stadat_fcr[i].O_s_Balance || "-"}</td>
         <td class="tabdat" colspan=2>${stadat_fcr[i].Validity_To || "-"}</td>
         <td class="tabdat" colspan=2>${stadat_fcr[i].Register_Type || "-"}</td>
         <td class="tabdat" colspan=2>${stadat_fcr[i].SOL || "-"}</td>
         </tr>`;
          table2.innerHTML += row2;
        }
      }
    });
    */
  } else if (na.id == "tickLink") {
    //No I18N
    document.getElementById("tkt_panel_overlay").style.display = "none";
    document.getElementById("ticket_desk_panel_overlay").style.display = "none";
    document.getElementById("notickettable-container").style.display = "none";
    document.getElementById("ticketTable-container").style.display = "none";
    document.getElementById("tickChild").style.display = "block"; //No I18N
    document.getElementById("varNavChildDivTk").style.backgroundColor =
      "rgb(91 97 110)"; //No I18N
    //console.log("in ticket");	//No I18N
    //ticket page code start//
    console.log(custid);
    console.log(crm_desk_id);
    if (
      crm_desk_id == null ||
      crm_desk_id == undefined ||
      crm_desk_id == " "
    ) {
      // FETCH DATA 
      crm_desk_id = await get_desk_contact(custid,ds_record_id).catch((err) => {
        console.log("AWAIT RESPONSE ERROR");
      });
      crm_desk_id = await create_desk_contact(last_name_for_desk,document.getElementById("ctprefcntno").innerHTML,custid).catch((err) => {
        console.log("AWAIT RESPONSE ERROR");
      });
      // CREATE DESK CONTACT AND ADD CUSTID TO CONTACT
    }
    console.log("CRM DESK ID", crm_desk_id);
    try {
      if (crm_desk_id.code == "SUCCESS") {
        if (
          crm_desk_id.details.status == "true" &&
          crm_desk_id.details.statusMessage != " " &&
          crm_desk_id.details.statusMessage != ""
        ) {
          console.log("SUCCESS IN::",crm_desk_id);
          // if (crm_desk_id.details.statusMessage != "") {
          //   console.log(crm_desk_id);
          //   get_ticket(1);
          // }
          if (crm_desk_id.details.statusMessage != "") {
            console.log(crm_desk_id);
            get_ticket(1);
          } else {
            console.log("loading close 23");
            document.getElementById("loadingWrapper").style.display = "none";
            document.getElementById("ticket_desk_panel_overlay").style.display =
              "flex";
          }
        } else {
          console.log("loading close 24");
          document.getElementById("loadingWrapper").style.display = "none";
          // display_panel_overlay(
          //   "tkt_panel_overlay",
          //   "No Desk Contact Assigned"
          // );
          document.getElementById("notickettable-container").style.display = "block";
        }
      } else {
        console.log("loading close 25");
        document.getElementById("loadingWrapper").style.display = "none";
        display_panel_overlay(
          "tkt_panel_overlay",
          "Oops! Something went wrong"
        );
      }
    } catch (error) {
      console.log("loading close 26");
      document.getElementById("loadingWrapper").style.display = "none";
      display_panel_overlay("tkt_panel_overlay", "Oops! Something went wrong");
    }

    // get_ticket(1);
    //ticket-page_code end//
  } else if (na.id == "campLink") {
    document.getElementById("campChild").style.display = "block";
    document.getElementById("varNavChildDivCp").style.backgroundColor = "#5b616e";
  } else if (na.id == "leadLink") {
    document.getElementById("leadChild").style.display = "block";
    document.getElementById("varNavChildDivLd").style.backgroundColor = "#5b616e";
    if(!leadsLoaded)
    {
      document.getElementById("nolead-container").style.display = "none";
      loadLeads();
    }
    console.log("Leads results", leads_results);
  } else if (na.id == "gbmLink") {

    
    document.getElementById("gbmChild").style.display = "block";
    document.getElementById("varNavChildDivGbm").style.backgroundColor = "#5b616e";
    
    // add loader
    displayGBM(0);
    gbm_flg = true;
    await get_gbmdata(1);
  }
  else if (na.id == "notesLink") {
    document.getElementById("notesChild").style.display = "block";
    document.getElementById("varNavChildDivNt").style.backgroundColor = "#5b616e";
    getNotes();
  } 
  else if (na.id == "SRLink") {
    //No I18N
    document.getElementById("SRChild").style.display = "block"; //No I18N
    document.getElementById("SRChild").classList.remove("hide_tab_imp"); //No I18N
    document
      .getElementById("SRChild")
      .classList.remove("SrContainer-first-time"); //No I18N
    document.getElementById("SRChild").classList.add("SrContainer"); //No I18N
    document.getElementById("varNavChildDivSR").style.backgroundColor =
      "rgb(91 97 110)"; //No I18N
  }
  else if (na.id == "outboundCallLink") {
    //No I18N
    document.getElementById("outboundCallChild").style.display = "block"; //No I18N
    document.getElementById("outboundCallChild").classList.remove("hide_tab_imp"); //No I18N
    document
      .getElementById("outboundCallChild")
      .classList.remove("SrContainer-first-time"); //No I18N
    document.getElementById("outboundCallChild").classList.add("SrContainer"); //No I18N
    document.getElementById("varNavChildDivOC").style.backgroundColor =
      "rgb(91 97 110)"; //No I18N
  }
   else {
    console.log("error");
  }
}

var ctrApi1 = 0;

var fundbasedtabCounter = 0;
function fbdivonclickDisplay(d) {
  // fundbasedtabCounter++;
  // console.log(fundbasedtabCounter);
  // if( fundbasedtabCounter%2!=0)
  // {
  if (d.id == "fubHead1") {
    document.getElementById("depositPanel").style.display = "block";
    document.getElementById("fubHead1").style.backgroundColor = "#eef7ff";
    document.getElementById("fubHead1").style.borderColor = "#86c8f3";
    document.getElementById("fubHead2").style.borderColor = "#D7E2ED";
    document.getElementById("fubHead1").style.fontWeight = "500";
    document.getElementById("fubHead2").style.fontWeight = "300";
    document.getElementById("advPanel").style.display = "none";
    document.getElementById("fubHead2").style.backgroundColor = "white";
  } else if (d.id == "fubHead2") {
    document.getElementById("depositPanel").style.display = "none";
    document.getElementById("fubHead1").style.backgroundColor = "white";
    document.getElementById("fubHead1").style.borderColor = "#D7E2ED";
    document.getElementById("fubHead2").style.borderColor = "#86c8f3";
    document.getElementById("fubHead1").style.fontWeight = "300";
    document.getElementById("fubHead2").style.fontWeight = "500";
    document.getElementById("advPanel").style.display = "block";
    document.getElementById("fubHead2").style.backgroundColor = "#eef7ff";
  } else {
    console.log("Error: Fund based Tab Error!");
  }
  // }
  // else
  // {
  // if(d.id == "fubHead1"){
  //   document.getElementById("depositPanel").style.display = "none";
  // }
  // else if(d.id == "fubHead2"){
  //   document.getElementById("advPanel").style.display = "none";
  // }
  // else{
  //   console.log("Error: Fund based Tab Error!");
  // }
  // }
}

var fundbasedsubtabCounter = 0;
function fbsubdivonclickDisplay(e) {
  // fundbasedsubtabCounter++;
  // console.log(fundbasedsubtabCounter);
  // if( fundbasedsubtabCounter%2!=0)
  // {
  if (e.id == "fubsubHead1") {
    document.getElementById("casaPanel").style.display = "block";
    
    document.getElementById("fubsubHead1").classList.add("tab_selected_start");
    document.getElementById("fubsubHead1").classList.remove("tab_unselected");
    document.getElementById("fubsubHead2").classList.add("tab_unselected");
    document.getElementById("fubsubHead2").classList.remove("tab_selected_end");
    // document.getElementById("fubsubHead1").style.backgroundColor = "#eef7ff";
    // document.getElementById("fubsubHead1").style.borderColor = "#86c8f3";
    // document.getElementById("fubsubHead2").style.borderColor = "#D7E2ED";
    // document.getElementById("fubsubHead1").style.fontWeight = "500";
    // document.getElementById("fubsubHead2").style.fontWeight = "300";
    document.getElementById("termdepositPanel").style.display = "none";
    // document.getElementById("fubsubHead2").style.backgroundColor = "white";
    document.getElementById("casa_toggle").style.display = "block";
    document.getElementById("td_toggle").style.display = "none";
  } else if (e.id == "fubsubHead2") {
    console.log("inside term deposit click");
    document.getElementById("casaPanel").style.display = "none";
    document.getElementById("fubsubHead2").classList.add("tab_selected_end");
    document.getElementById("fubsubHead2").classList.remove("tab_unselected");
    document.getElementById("fubsubHead1").classList.add("tab_unselected");
    document.getElementById("fubsubHead1").classList.remove("tab_selected_start");
    // document.getElementById("fubsubHead1").style.backgroundColor = "white";
    // document.getElementById("fubsubHead2").style.borderColor = "#86c8f3";
    // document.getElementById("fubsubHead1").style.borderColor = "#D7E2ED";
    // document.getElementById("fubsubHead2").style.fontWeight = "500";
    // document.getElementById("fubsubHead1").style.fontWeight = "300";
    document.getElementById("termdepositPanel").style.display = "block";
    // document.getElementById("fubsubHead2").style.backgroundColor = "#eef7ff";
    document.getElementById("casa_toggle").style.display = "none";
    document.getElementById("td_toggle").style.display = "block";
  } else {
    console.log("Error: Fund based Tab Error!");
  }
  // }
  // else
  // {
  // if(e.id == "fubsubHead1"){
  //   document.getElementById("casaPanel").style.display = "none";
  // }
  // else if(e.id == "fubsubHead2"){
  //   document.getElementById("termdepositPanel").style.display = "none";
  // }
  // else{
  //   console.log("Error: Fund based Tab Error!");
  // }
  // }
}

var nonfundbasedtabCounter = 0;
function nfbdivonclickDisplay(f) {
  // nonfundbasedtabCounter++;
  // console.log(nonfundbasedtabCounter);
  // if( nonfundbasedtabCounter%2!=0)
  // {
  if (f.id == "nfubHead1") {
    document.getElementById("nfubbgPanel").style.display = "block";
    document.getElementById("nfubHead1").style.backgroundColor = "#eef7ff";
    document.getElementById("nfubHead1").style.borderColor = "#86c8f3";
    document.getElementById("nfubHead1").style.fontWeight = "500";
    document.getElementById("nfubHead2").style.borderColor = "#D7E2ED";
    document.getElementById("nfubHead2").style.fontWeight = "300";
    document.getElementById("nfubHead3").style.borderColor = "#D7E2ED";
    document.getElementById("nfubHead3").style.fontWeight = "300";
    document.getElementById("nfublcPanel").style.display = "none";
    document.getElementById("nfubHead2").style.backgroundColor = "white";
    document.getElementById("nfubfcPanel").style.display = "none";
    document.getElementById("nfubHead3").style.backgroundColor = "white";
  } else if (f.id == "nfubHead2") {
    document.getElementById("nfubbgPanel").style.display = "none";
    document.getElementById("nfubHead1").style.backgroundColor = "white";
    document.getElementById("nfubHead2").style.borderColor = "#86c8f3";
    document.getElementById("nfubHead2").style.fontWeight = "500";
    document.getElementById("nfubHead1").style.borderColor = "#D7E2ED";
    document.getElementById("nfubHead1").style.fontWeight = "300";
    document.getElementById("nfubHead3").style.borderColor = "#D7E2ED";
    document.getElementById("nfubHead3").style.fontWeight = "300";
    document.getElementById("nfublcPanel").style.display = "block";
    document.getElementById("nfubHead2").style.backgroundColor = "#eef7ff";
    document.getElementById("nfubfcPanel").style.display = "none";
    document.getElementById("nfubHead3").style.backgroundColor = "white";
  } else if (f.id == "nfubHead3") {
    document.getElementById("nfubbgPanel").style.display = "none";
    document.getElementById("nfubHead1").style.backgroundColor = "white";
    document.getElementById("nfubHead3").style.borderColor = "#86c8f3";
    document.getElementById("nfubHead3").style.fontWeight = "500";
    document.getElementById("nfubHead1").style.borderColor = "#D7E2ED";
    document.getElementById("nfubHead1").style.fontWeight = "300";
    document.getElementById("nfubHead2").style.borderColor = "#D7E2ED";
    document.getElementById("nfubHead2").style.fontWeight = "300";
    document.getElementById("nfublcPanel").style.display = "none";
    document.getElementById("nfubHead2").style.backgroundColor = "white";
    document.getElementById("nfubfcPanel").style.display = "block";
    document.getElementById("nfubHead3").style.backgroundColor = "#eef7ff";
  } else {
    console.log("Error: Fund based Tab Error!");
  }
  // }
  // else
  // {
  // if(f.id == "nfubHead1"){
  //   document.getElementById("nfubbgPanel").style.display = "none";
  // }
  // else if(f.id == "nfubHead2"){
  //   document.getElementById("nfublcPanel").style.display = "none";
  // }
  // else if(f.id == "nfubHead3"){
  //   document.getElementById("nfubfcPanel").style.display = "none";
  // }
  // else{
  //   console.log("Error: Fund based Tab Error!");
  // }
  // }
}
function format_card_type(n){
  if (n == "R") return "RUPAY";
  if (n == "V") return "VISA";
  if (n == "M") return "MASTERCARD";
  if (n == "INVALID_CARDTYPE") return "INVALID CARD TYPE";
}
function GetSelectedTextValue() {
  let acct_drop_down = document.getElementById("membership");
  console.log("account drop down is", acct_drop_down.options);
  acct_drop_down.style.display = "flex";
  
  let selected_acct =
    acct_drop_down.options[acct_drop_down.options.selectedIndex].value;
  console.log("selected acct is", selected_acct);
  if (selected_acct == "No accounts available") {
    console.log("returning out");
    return;
  }
  let t=document.getElementById("modalDataTable1");
  t.innerHTML=`<div style="position:relative;width:100%;height:120px;background-color:white;border-radius:4px;box-shadow: 0 2px 8px 0 #b1b1b1;">${block_loader_html}</div>`;
  let request = {
    url: "https://sandbox.zohoapis.in/crm/v2/functions/customer360services/actions/execute",
    params: {
      auth_type: "apikey",
      zapikey:
        "1003.600980f6c77d6565e75469173e5481bc.4130ee5339b56ed6fc918aec16f1329e",
      sat: "debitcard",
      accountNumber: "566802070000735",
    },
  };
  let func_name = "Fetch_DebitCard_API";
  let params = { Accn: selected_acct };
  call_crm_function(func_name, params)
    .then(function (res) {
      // document.getElementById('accountdropdown').style.display="block";
      // let res = JSON.parse(data);
      // document.getElementById('loadingWrapper').style.display = 'none';
      document.getElementById("modalDataTable1").innerHTML = "";
      console.log("debit card fetch is", res);
      modal1.style.display = "none";
      if (res.code == "success") {
        stadat = "";
        stadat = JSON.parse(res.details.output);
        stadat = stadat.data;
        console.log("stadat for debit card info", stadat);
        let resp = stadat.statusDesc || "";
        console.log(resp);
        if (resp == "SUCCESS") {
          var table = document.getElementById("modalDataTable1");
          table.innerHTML='';
          let hdr = `<tr class="modalDataDc">
    <th>Debit Card Number</th>

    <th>Card Status</th>
    <th>Card Type</th>
    </tr>`;
          table.innerHTML = hdr;
          if (stadat.length == 0) {
            table.innerHTML += `<tr>
      <td>-</td>
      <td>-</td>
      </tr>`;
          } else {
            for (var i = 0; i < stadat.cardDetails.length; i++) {
              var row = `<tr >
                <td>${mask_str(stadat.cardDetails[i].cardNumber,"card")}</td>
                <td>${format_Card_status(stadat.cardDetails[i].cardStatus)}</td>
                <td>${format_card_type(stadat.cardDetails[i].cardType)}</td>
              </tr>`;
              table.innerHTML += row;
            }
          }
        } else if (resp == "CARD_NOT_AVAILABLE") {
          var table = document.getElementById("modalDataTable1");
          table.innerHTML='';
          let hdr = `<tr class="modalDataDc">
  
    </tr>`;
          table.innerHTML = hdr;
          table.innerHTML += `<tr>
      <td>Debit cards are not available for this account</td>
      </tr>`;
        }
      }
      /////-----FMR-----//////
      // var table = document.getElementById('modalDataTable1');
      // let hdr = `<tr class="modalDataDc">
      // <th>Debit Card Number</th>
      // <th>Daily Limit</th>
      // // <th>Card Status</th>
      // // <th>Last Used Date</th>
      // </tr>`;
      // table.innerHTML += hdr;
      // for (var i = 0; i < stadat.cardDetails.length; i++){
      //   var row = `<tr>
      //           <td>${stadat.cardDetails[i].cardNumber}</td>
      //           <td>${stadat.cardDetails[i].cardStatus}</td>
      //           <td>${stadat.cardDetails[i].noOfCards}</td>
      //           // <td>${stadat.cardDetails[i].statusCode}</td>
      //         </tr>`
      //   table.innerHTML += row
      //API URL Assignment and Parameters Setting
      /*  var url8 = new URL("https://reqres.in/api/users"); 
// var url = new URL("https://cdn-api.co-vin.in/api/v2/admin/location/states");
var params8 = {page:1};
url8.search = new URLSearchParams(params8).toString();
var recordPromisem8 = new Promise(async (resolve, reject) => {
// const stdat = await fetch("https://cdn-api.co-vin.in/api/v2/admin/location/states");
const stdat = await fetch(url8);
resolve(stdat);
});
recordPromisem8
.then((response)=>{
// console.log(data.json());
return response.json();
}).then((dt)=>{
// console.log(dt.data);
stadat="";
stadat = dt.data;
var table = document.getElementById('modalDataTable1');
let hdr = `<tr class="modalDataDc">
<th>Debit Card Number</th>
<th>Daily Limit</th>
<th>Card Status</th>
<th>Last Used Date</th>
</tr>`;
table.innerHTML += hdr;
for (var i = 0; i < stadat.length; i++){
var row = `<tr>
<td>${stadat[i].id}</td>
<td>${stadat[i].first_name}</td>
<td>${stadat[i].last_name}</td>
<td>${stadat[i].email}</td>
</tr>`
table.innerHTML += row
}
})

span.onclick = () => {
modal.style.display = "none";
$("#modalDataTable1 tr").remove();
}
window.onclick = (event) => {
if (event.target == modal) {
modal.style.display = "none";
$("#modalDataTable1 tr").remove();
}
}*/
    })
    .catch((err) => {
      console.log("Error in debit card info fetch", err);
    });
  /*
ZOHO.CRM.HTTP.get(request)
                      .then(function(data){
                        // document.getElementById('accountdropdown').style.display="block";
                        let res = JSON.parse(data);
                        // document.getElementById('loadingWrapper').style.display = 'none';
                        modal1.style.display = "none";
                        if(res.code == "success")
                        {
                          stadat="";
                          stadat = JSON.parse(res.details.output);
                          stadat = stadat.data;
                          console.log(stadat);
                          let resp=stadat.statusDesc || "";
                          console.log(resp);
                          if(resp == "SUCCESS")
                          {
                              var table = document.getElementById('modalDataTable1');
                        let hdr = `<tr class="modalDataDc">
                        <th>Debit Card Number</th>
          
                        <th>Card Status</th>
                        </tr>`;
                        table.innerHTML = hdr;
                        for (var i = 0; i < stadat.cardDetails.length; i++){
                          var row = `<tr onclick="debitnoClk(this)">
                                  <td>${stadat.cardDetails[i].cardNumber}</td>
                                  <td>${stadat.cardDetails[i].cardStatus}</td>
            
                                </tr>`
                          table.innerHTML += row
                        }
                        
                      }
                        }
                        /////-----FMR-----//////
                        // var table = document.getElementById('modalDataTable1');
                        // let hdr = `<tr class="modalDataDc">
                        // <th>Debit Card Number</th>
                        // <th>Daily Limit</th>
                        // // <th>Card Status</th>
                        // // <th>Last Used Date</th>
                        // </tr>`;
                        // table.innerHTML += hdr;
                        // for (var i = 0; i < stadat.cardDetails.length; i++){
                        //   var row = `<tr>
                        //           <td>${stadat.cardDetails[i].cardNumber}</td>
                        //           <td>${stadat.cardDetails[i].cardStatus}</td>
                        //           <td>${stadat.cardDetails[i].noOfCards}</td>
                        //           // <td>${stadat.cardDetails[i].statusCode}</td>
                        //         </tr>`
                        //   table.innerHTML += row
    //API URL Assignment and Parameters Setting
  /*  var url8 = new URL("https://reqres.in/api/users"); 
    // var url = new URL("https://cdn-api.co-vin.in/api/v2/admin/location/states");
    var params8 = {page:1};
    url8.search = new URLSearchParams(params8).toString();
    var recordPromisem8 = new Promise(async (resolve, reject) => {
      // const stdat = await fetch("https://cdn-api.co-vin.in/api/v2/admin/location/states");
      const stdat = await fetch(url8);
      resolve(stdat);
    });
    recordPromisem8
    .then((response)=>{
      // console.log(data.json());
      return response.json();
    }).then((dt)=>{
      // console.log(dt.data);
      stadat="";
      stadat = dt.data;
      var table = document.getElementById('modalDataTable1');
      let hdr = `<tr class="modalDataDc">
      <th>Debit Card Number</th>
      <th>Daily Limit</th>
      <th>Card Status</th>
      <th>Last Used Date</th>
      </tr>`;
      table.innerHTML += hdr;
      for (var i = 0; i < stadat.length; i++){
        var row = `<tr>
                <td>${stadat[i].id}</td>
                <td>${stadat[i].first_name}</td>
                <td>${stadat[i].last_name}</td>
                <td>${stadat[i].email}</td>
              </tr>`
        table.innerHTML += row
      }
    })
  
  span.onclick = () => {
    modal.style.display = "none";
    $("#modalDataTable1 tr").remove();
  }
  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = "none";
      $("#modalDataTable1 tr").remove();
    }
  }
}).catch((err)=>{console.log("Error in debit card info fetch",err)});*/
}
//scrolls
// document.getElementById('homeChild').addEventListener("scroll",(event)=>{console.log('Scroll fired from home child',event);track_chart_scroll();});
// document.getElementById('mainDisplayDiv').addEventListener("scroll",(event)=>{console.log('Scroll fired from mainDisplayDiv',event);track_chart_scroll();});
// document.getElementById('main_div').addEventListener("scroll",(event)=>{console.log('Scroll fired from main_div',event);track_chart_scroll();});
// document.getElementById('w3c').addEventListener("scroll",(event)=>{console.log('Scroll fired from w3c',event);track_chart_scroll();});
function track_chart_scroll() {
  console.log("body's top is", document.body.scrollTop);
  let chart_widget = document.getElementById("advanceschartPanel");
  console.log("chart widget top is", chart_widget.scrollTop);
}
function balance_api_handle(data, acct,loc,n) {
  document.getElementById("refresh-icon").classList.remove("fa-spin");
  let spinners=document.getElementsByClassName("fa-arrows-rotate");
  console.log("SPINNER LIST",spinners);
    for(let s of spinners)
    {
     if (s.id == "refresh-icon-1") {
      continue;
     }
      s.classList.add("fa-spin");
    }
  // document.getElementById('refresh-parent').classList.remove("blue-load");
  document.getElementById("refresh-icon").classList.add("blue");
  if (data.code == "INVALID_DATA") {
    console.log("All balance inquiry API failed", data);
    if (loc == "adv") {
      if ((n == "ODA" || n == "CCA") && prev_balance != "-") {
        document.getElementById(
          "ctcsactadv"
        ).innerHTML = `${format_bal3(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}','${n}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
      }else{
        document.getElementById(
          "ctcsactadv"
        ).innerHTML = `${format_bal3(prev_balance)}`;
      }
    }else if (loc == "td"){
    document.getElementById(
      "ctcsacttd"
    ).innerHTML = `${format_bal2(prev_balance)}`;
    }else if (loc == "casa"){
    document.getElementById(
      "ctcsactcasa"
    ).innerHTML = `${format_bal2(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
    }
  } else if (data.code == "success") {
    //if the function executed successfully
    //handle the actual API's error responses
    let output = data.details.output;
    let json_data = JSON.parse(output);
    console.log("JSON parsed data is", json_data);
    if (json_data.status == "00") {
      let sorf = json_data.data.SuccessOrFailure;
      console.log("sorf is", json_data.data);
      if (sorf == "N") {
        console.log("inside sorf");
        if (loc == "adv") {
          if (n == "ODA" || n == "CCA") {
            document.getElementById(
              "ctcsactadv"
            ).innerHTML = `${format_bal3(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>${
              json_data.data.Error_1 || "Failed to fetch current balance"
            }</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}','${n}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
          }else{
            document.getElementById(
              "ctcsactadv"
            ).innerHTML = `${format_bal3(prev_balance)}`;
          }
        }else if (loc == "casa"){
        document.getElementById(
          "ctcsactcasa"
        ).innerHTML = `${format_bal2(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>${
          json_data.data.Error_1 || "Failed to fetch current balance"
        }</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
      }else if (loc == "td"){
        document.getElementById(
          "ctcsacttd"
        ).innerHTML = `${format_bal2(prev_balance)}`;
      }
        console.log("All balance inquiry API failed", json_data);
        return;
      }
      let d = json_data.data;
      let acct_bal = d.ACCOUNT_BALANCE || "-";
      if (loc == "adv") {
        acct_bal = format_bal3(acct_bal);
        if (n == "ODA" || n == "CCA") {
          document.getElementById("ctcsactadv").innerHTML = `${
            acct_bal || "-"
          }<span id='bal-check-err-msg' class='bal-check-err-msg'></span><span class='icon-click' id='refresh-parent' onclick="fundbasedReload('${acct || "-"}','${loc}','${n}')"><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
        }else{
          document.getElementById(
            "ctcsactadv"
          ).innerHTML = `${
            format_bal3(prev_balance)
          }`;
        }
        
      }else if (loc == "td"){
        acct_bal = format_bal2(acct_bal);
        document.getElementById("ctcsacttd").innerHTML = `${
          acct_bal || "-"
        }`;
      }else if (loc == "casa"){
        acct_bal = format_bal2(acct_bal);
        document.getElementById("ctcsactcasa").innerHTML = `${
          acct_bal || "-"
        }<span id='bal-check-err-msg' class='bal-check-err-msg'></span><span class='icon-click' id='refresh-parent' onclick="fundbasedReload('${acct || "-"}','${loc}')"><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
      }
      
    } else {
      //API failure
      console.log("All balance inquiry API failed", json_data);
      if (loc == "adv") {
        if (n == "ODA" || n == "CCA") {
          document.getElementById(
            "ctcsactadv"
          ).innerHTML = `${format_bal3(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}','${n}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
        }else{
          document.getElementById(
            "ctcsactadv"
          ).innerHTML = `${format_bal3(prev_balance)}`;
        }
      }else if (loc == "td"){
      document.getElementById(
        "ctcsacttd"
      ).innerHTML = `${format_bal2(prev_balance)}`;
      }else if (loc == "casa"){
      document.getElementById(
        "ctcsactcasa"
      ).innerHTML = `${format_bal2(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
      }
     
    }
  } else {
    //API failure
    if (loc == "adv") {
      if (n == "ODA" || n == "CCA") {
        document.getElementById(
          "ctcsactadv"
        ).innerHTML = `${format_bal3(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}','${n}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
      }else{
        document.getElementById(
          "ctcsactadv"
        ).innerHTML = `${format_bal3(prev_balance)}`;
      }
    }else if (loc == "td"){
    document.getElementById(
      "ctcsacttd"
    ).innerHTML = `${format_bal2(prev_balance)}`;
    }else if (loc == "casa"){
    document.getElementById(
      "ctcsactcasa"
    ).innerHTML = `${format_bal2(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
    }
    console.log("All balance inquiry API failed", data);
  }
}
function balance_error_handler(e,n) {
  console.log("error in balance handler", e);
  if (loc == "adv") {
    if (n == "ODA" || n == "CCA") {
      document.getElementById(
        "ctcsactadv"
      ).innerHTML = `${format_bal3(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}','${n}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
    }else{
      document.getElementById(
        "ctcsactadv"
      ).innerHTML = `${format_bal3(prev_balance)}`;
    }
  }else if (loc == "td"){
  document.getElementById(
    "ctcsacttd"
  ).innerHTML = `${format_bal2(prev_balance)}`;
  }else if (loc == "casa"){
  document.getElementById(
    "ctcsactcasa"
  ).innerHTML = `${format_bal2(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
  }
}
function fundbasedReload(acct,loc,n) {
  //   acct=`${acct}`;
  try {
    if (!ref_clicked) {
      ref_clicked = true;
      // return;
    } else {
      ref_clicked = false;
    }
    console.log("BAL",acct, loc, ref_clicked,n);
    console.log("triggering fund based reload");
    document.getElementById("refresh-icon").classList.add("fa-spin");
    let spinners=document.getElementsByClassName("fa-arrows-rotate");
    console.log("SPINNER LIST",spinners);
    for(let s of spinners)
    {
      if (s.id == "refresh-icon-1") {
        continue;
       }
      s.classList.add("fa-spin");
    }
    // document.getElementById('refresh-parent').classList.add("blue-load");
    document.getElementById("refresh-icon").classList.remove("blue");
    if (acct != "-") {
      console.log("triggering fund based reload");
      let f_name = "All_Balance_Inq_UBI_DC_360";
      let params = { accno: acct };
      call_crm_function(f_name, params)
        .then((data) => {
          console.log("balance check", data);
          balance_api_handle(data, acct,loc,n);
        })
        .catch((err) => {
          console.log("error in balance check", err);
        });
    }

    return;
  } catch (e) {
    console.log("error in fund-based reload", e);
    if (loc == "adv") {
      if (n == "ODA" || n == "CCA") {
        document.getElementById(
          "ctcsactadv"
        ).innerHTML = `${format_bal3(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}','${n}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
      }else{
        document.getElementById(
          "ctcsactadv"
        ).innerHTML = `${format_bal3(prev_balance)}`;
      }
      
    }else if (loc == "td"){
    document.getElementById(
      "ctcsacttd"
    ).innerHTML = `${format_bal2(prev_balance)}`;
    }else if (loc == "casa"){
    document.getElementById(
      "ctcsactcasa"
    ).innerHTML = `${format_bal2(prev_balance)}<span id='bal-check-err-msg' class='bal-check-err-msg'>Failed to fetch current balance.</span><span style='padding-left:2%' onclick="fundbasedReload('${acct}','${loc}')" class="icon-click" id='refresh-parent'><i class='fa fa-refresh blue' id='refresh-icon'></i></span>`;
    }
   
  }

  flag = 1;
  // modal.style.display = "none";
  // // location.reload();
  // $("#tblbgrdtb tr").remove();
  // $("#tbllocrdtb tr").remove();
  // $("#tblfcrdtb tr").remove();

  // $("#tbldepdtbcs tr").remove();
  // $("#tbldepdtbtd tr").remove();
  // $("#tbladvdtb tr").remove();

  // $("#tbltkrdtbtkk tr").remove();
  // $("#tblcprdtbcpp tr").remove();
  // $("#tblleadtabb tr").remove();
  // fetch("https://reqres.in/api/users?page=2")
  //   .then(function (dt) {
  //     return dt.json();
  //   })
  //   .then((data) => {
  //     // console.log(data);
  //     data = data.data;
  //     // var table = document.getElementById('tblbgrdtb');
  //     var table1 = document.getElementById("tbllocrdtb");
  //     var table2 = document.getElementById("tblfcrdtb");

  //     // var table3 = document.getElementById('tbldepdtbcs');
  //     // var table4 = document.getElementById('tbldepdtbtd');
  //     // var table5 = document.getElementById('tbladvdtb');

  //     var table6 = document.getElementById("tbltkrdtbtkk");
  //     var table7 = document.getElementById("tblcprdtbcpp");
  //     var table8 = document.getElementById("tblleadtabb");

  //     for (var i = 0; i < data.length; i++) {
  //       // if(data[i].Status=="Closed" || data[i].Product1=="Credit Card"){
  //       // var row = `<tr id="${data[i].id}" onclick="bgnClk(this)">
  //       //           <td class="tabdat" colspan=2>${data[i].id || "-"}</td>
  //       //           <td class="tabdat" colspan=2>${data[i].email || "-"}</td>
  //       //           <td class="tabdat" colspan=2>${data[i].first_name || "-"}</td>
  //       //           <td class="tabdat" colspan=2>${data[i].last_name || "-"}</td>
  //       //           <td class="tabdat" colspan=2>${data[i].avatar || "-"}</td>
  //       //           </tr>`
  //       // // var row1 = `<tr id="${data[i].id}" onclick="locClk(this)">
  //       // // <td class="tabdat" colspan=2>${data[i].id+446 || "-"}</td>
  //       // // <td class="tabdat" colspan=2>${data[i].id+834 || "-"}</td>
  //       // // <td class="tabdat" colspan=2>${data[i].first_name || "-"}</td>
  //       // // <td class="tabdat" colspan=2>${data[i].last_name || "-"}</td>
  //       // // <td class="tabdat" colspan=2>${data[i].avatar || "-"}</td>
  //       // </tr>`
  //       // var row2 = `<tr id="${data[i].id}" onclick="fcrClk(this)">
  //       // <td class="tabdat" colspan=2>${data[i].id || "-"}</td>
  //       // <td class="tabdat" colspan=2>${data[i].email || "-"}</td>
  //       // <td class="tabdat" colspan=2>${data[i].first_name || "-"}</td>
  //       // <td class="tabdat" colspan=2>${data[i].last_name || "-"}</td>
  //       // <td class="tabdat" colspan=2>${data[i].avatar || "-"}</td>
  //       // </tr>`
  //       // var row3 = `<tr id="${data[i].id}" onclick="casaClk(this)">
  //       //           <td class="tabdat" colspan=2>67${data[i].id+87876987 || "-"}</td>
  //       //           <td class="tabdat" colspan=2>${liability_accountNumber}</td>
  //       //           <td class="tabdat" colspan=2>Kisan Vikas Patra</td>
  //       //           <td class="tabdat" colspan=2>Savings A/C</td>
  //       //           <td class="tabdat" colspan=2><button id="fundbasedreloadButton" onclick="fundbasedReload()">Refresh!</button></td>
  //       //           </tr>`
  //       // var row4 = `<tr id="${data[i].id}" onclick="tdClk(this)">
  //       // <td class="tabdat" colspan=2>${data[i].id+624526766 || "-"}</td>
  //       // <td class="tabdat" colspan=2>NO</td>
  //       // <td class="tabdat" colspan=2>Sukanya Samridhhi Scheme</td>
  //       // <td class="tabdat" colspan=2>Current A/C</td>
  //       // <td class="tabdat" colspan=2><button id="fundbasedreloadButton" onclick="fundbasedReload()">Refresh!</button></td>
  //       // </tr>`
  //       // var row5 = `<tr id="${data[i].id}" onclick="advClk(this)">
  //       // <td class="tabdat" colspan=2>${data[i].id+767656676 || "-"}</td>
  //       // <td class="tabdat" colspan=2>Pending</td>
  //       // <td class="tabdat" colspan=2>Senior Citizen Saving Scheme</td>
  //       // <td class="tabdat" colspan=2>Salary Account</td>
  //       // <td class="tabdat" colspan=2><button id="fundbasedreloadButton" onclick="fundbasedReload()">Refresh!</button></td>
  //       // </tr>`
  //       var row6 = `<tr id="${data[i].id}" onclick="tkClk(this)">
  //         <td class="tabdat" colspan=2>${data[i].id || "-"}</td>
  //         <td class="tabdat" colspan=2>${data[i].email || "-"}</td>
  //         <td class="tabdat" colspan=2>${data[i].first_name || "-"}</td>
  //         <td class="tabdat" colspan=2>${data[i].last_name || "-"}</td>
  //         <td class="tabdat" colspan=2>${data[i].avatar || "-"}</td>
  //         </tr>`;
  //       var row7 = `<tr id="${data[i].id}" onclick="cpClk(this)">
  //         <td class="tabdat" colspan=2>${data[i].id || "-"}</td>
  //         <td class="tabdat" colspan=2>${data[i].email || "-"}</td>
  //         <td class="tabdat" colspan=2>${data[i].first_name || "-"}</td>
  //         </tr>`;
  //       var row8 = `<tr id="${data[i].id}" onclick="leadClk(this)">
  //         <td class="tabdat" colspan=2>${data[i].id || "-"}</td>
  //         <td class="tabdat" colspan=2>Open</td>
  //         <td class="tabdat" colspan=2>Website</td>
  //         <td class="tabdat" colspan=2>${data[i].first_name || "-"}</td>
  //         <td class="tabdat" colspan=2>03-07-2022</td>
  //         </tr>`;

  //       table.innerHTML += row;
  //       table1.innerHTML += row1;
  //       table2.innerHTML += row2;

  //       // table3.innerHTML += row3
  //       // table4.innerHTML += row4
  //       // table5.innerHTML += row5

  //       table6.innerHTML += row6;
  //       table7.innerHTML += row7;
  //       table8.innerHTML += row8;
  //       // }

  //       // document.getElementById("fubrefreshTime").innerHTML = now;
  //     }
  //     console.log("Refreshed!");
  //     let d = new Date();
  //     let dd = d.getDate();
  //     dd = dd.toString();
  //     if (dd.length != 2) {
  //       dd = "0" + dd;
  //     }
  //     let MM = d.getMonth() + 1;
  //     MM = MM.toString();
  //     if (MM.length != 2) {
  //       MM = "0" + MM;
  //     }
  //     let yyyy = d.getFullYear();
  //     yyyy = yyyy.toString();
  //     let hh = d.getHours();
  //     hh = hh.toString();
  //     if (hh.length != 2) {
  //       hh = "0" + hh;
  //     }
  //     let mm = d.getMinutes();
  //     mm = mm.toString();
  //     if (mm.length != 2) {
  //       mm = "0" + mm;
  //     }
  //     let ss = d.getSeconds();
  //     ss = ss.toString();
  //     if (ss.length != 2) {
  //       ss = "0" + ss;
  //     }
  //     let date =
  //       yyyy + "-" + MM + "-" + dd + "T" + hh + ":" + mm + ":" + ss + "+05:30";
  //     console.log(date);
  //     ZOHO.CRM.API.getRelatedRecords({
  //       Entity: "Contacts",
  //       RecordID: rid,
  //       RelatedList: "Deals",
  //       page: 1,
  //       per_page: 200,
  //     }).then((data) => {
  //       let dt = data.data || "";
  //       if (dt != "") {
  //         dt.forEach((element) => {
  //           let config = {
  //             Entity: "Deals",
  //             APIData: {
  //               id: element.id,
  //               Widget_Refresh_Date_Time: date,
  //             },
  //           };
  //           ZOHO.CRM.API.updateRecord(config).then(function (data) {
  //             console.log(data);
  //           });
  //         });
  //       }
  //     });

  //     ZOHO.CRM.API.getRelatedRecords({
  //       Entity: "Contacts",
  //       RecordID: rid,
  //       RelatedList: "Deals",
  //       page: 1,
  //       per_page: 200,
  //     }).then((data) => {
  //       let dt = data.data[0] || "";
  //       if (dt != "") {
  //         document.getElementById("oppTitle").innerHTML =
  //           "Opportunities as of: " + dt.Widget_Refresh_Date_Time || "";
  //         document.getElementById("depTitle").innerHTML =
  //           "Deposits as of: " + dt.Widget_Refresh_Date_Time || "";
  //         document.getElementById("advTitle").innerHTML =
  //           "Advances as of: " + dt.Widget_Refresh_Date_Time || "";
  //         document.getElementById("fubrefreshTime").innerHTML =
  //           dt.Widget_Refresh_Date_Time || "";
  //       }
  //     });
  //   })
  //   .catch((error) => console.log(error));
}
function poll_deposits_for_SR_pops() {
  //function to poll deposit flag inorder to populate the mini statement dropdown.
  let sr_drops = ["c_s_acc_no", "acct_no_dd", "acct_no_ds"];
  console.log("check deposits flag");
  if (deposits_flg && advances_flg) {
    //hide mini-statement loader
    //populate ms dropdown with
    for (let i = 0; i < sr_drops.length; i++) {
      populate_cb_dropdown(new_deposits.concat(new_advances), sr_drops[i]);
    }
  } else {
    setTimeout(poll_deposits_for_SR_pops, 1000); 
  }
}
function transfer_click(elem_id)
{
  document.getElementById(elem_id).click();
  console.log("transferring click");
}
function redirect_to_cust_search(disable)
{
  // history.back();
  if(disable)
  {
    window.open(`https://ucrm.unionbankofindia.co.in/crm/org60009764661/tab/WebTab2?widgetparams=%7B%22s360%22%3A%22true%22%2C%22disable%22%3A%22true%22%2C%22instanceId%22%3A%22${instanceId}%22%7D`,"_top");
    return;
  }
  window.open("https://ucrm.unionbankofindia.co.in/crm/org60009764661/tab/WebTab2?widgetparams=%7B%22s360%22%3A%22true%22%7D","_top");
}
function get_logged_in_user()
{
  console.log("window href:",window.location.href);
  ZOHO.CRM.CONFIG.getCurrentUser().then((data)=>{
    console.log("Logged-in user is",data);
    let user_obj=data.users[0];
    let user_profile=user_obj.profile;
    logged_in_user_mail=user_obj.email;
    logged_in_user_id=user_obj.id;
    logged_in_user_full_name=user_obj.full_name;
    // change for enabling lien remarks for set of users
    base_url =`https://ucrm.unionbankofindia.co.in/crm/v7/users/${logged_in_user_id}`; //No I18N
    // console.log(base_url);
    let req_data = {
      headers: {}, //No I18N
      method: "GET", //No I18N
      url: base_url, //No I18N
    };
    let conn_name="zohocrm";
    ZOHO.CRM.CONNECTION.invoke(conn_name, req_data).then((data)=>{
      console.log("Getting user object",data);
      userSpecialPermissions=data.details.statusMessage.users[0].Special_permissions;

      //bug fix for some customers profile special permissions hook not working issue
      dynamicSpecialPermissionsCheckHook(userSpecialPermissions);


      displayHideSectionsBasedProfile(logged_in_user_profile_id,userSpecialPermissions);
    }).catch((e)=>{
      console.error("Error in user object fetch",e);
    })
    //
    let usr_profile_id=user_profile.id;
    logged_in_user_profile=user_profile.name;
    logged_in_user_profile_id=usr_profile_id;
    //displayHideSectionsBasedProfile(logged_in_user_profile_id);
    if(verification_needed_profile_ids.includes(usr_profile_id))
    {
      for(i=0;i<verification_needed_tabs.length;i++)
      {
        document.getElementById(verification_needed_tabs[i]).classList.add('vfd-tab');
      }
      show_tabs_on_verification(false);
    }
    //change: denying hotlist, account freeze & stop cheque for 'Call Center Internal Bank' profile
    //change for debit freeze profile inclusion
    if(!df_access_allowed_profiles.includes(String(usr_profile_id)))
    {
      let dynamic_style_rule=document.createElement('style');
      dynamic_style_rule.innerHTML=`.acc-freeze-btn
      {
          background-color: #949494 !important;
          background: #949494 !important;
          pointer-events: none !important;
      }`;
      document.body.appendChild(dynamic_style_rule);
      console.log("Call center internal profile");
    }
    if(!sc_access_allowed_profiles.includes(String(usr_profile_id)))
    {
      let dynamic_style_rule=document.createElement('style');
      dynamic_style_rule.innerHTML=`.stop-cheque-btn
      {
          background-color: #949494 !important;
          background: #949494 !important;
          pointer-events: none !important;
      }`;
      document.body.appendChild(dynamic_style_rule);
      console.log("Call center internal profile");
    }
    if(!dh_access_allowed_profiles.includes(String(usr_profile_id)))
    {
      let dynamic_style_rule=document.createElement('style');
      dynamic_style_rule.innerHTML=`.debit-hotlist
      {
          background-color: #949494 !important;
          background: #949494 !important;
          pointer-events: none !important;
      }`;
      document.body.appendChild(dynamic_style_rule);
      console.log("Call center internal profile");
    }
    //
    user_fetched=true;
    if(cust_data_loaded)
    {
      complete_loading();
    }
    //check if loading can be completed
  }).catch((e)=>{
    user_fetched=true;  
    if(cust_data_loaded)
    {
      complete_loading();
    }
    //check if loading can be completed
  })
}
function complete_loading()
{
  document.getElementById('skeleton_loader').style.display='none';
}

//change: functions to make pop-ups (elements with class .pop-up) moveable
function mobilise_pop_ups(class_name)
{
  let pop_ups=document.getElementsByClassName(class_name);
  for(let i=0;i<pop_ups.length;i++)
  {
    pop_ups[i].classList.add("mobilise")
    pop_ups[i].onmousedown=mobilise_on_mouse_down;
  }
}
function mobilise_on_mouse_down(e)
{
  // console.log("mouse down event fired",parseInt(e.target.style.top));
  
  // document.activeElement.blur();
  current_pop_elem=e.currentTarget;
  if(current_pop_elem.classList.contains('pop-up'))
  {
    current_pop_elem.classList.add('elem-on-move');
  }
  e=e||window.event;
  current_pop_top=parseInt(current_pop_elem.style.top||0);
  current_pop_left=parseInt(current_pop_elem.style.left||0);  
  current_x=e.clientX;
  current_y=e.clientY;
  document.addEventListener("mousemove",mobilise_on_mouse_move);
  document.addEventListener("mouseup",mobilise_close_drag);
  /*
  document.mousemove=mobilise_on_mouse_move;
  document.mouseup=mobilise_close_drag;
  */
}
function mobilise_on_mouse_move(e)
{
  // console.log("mouse movement fired",e.clientY,",X:",e.clientX);
  // current_pop_elem.classList.add(".elem-on-move");
  current_pop_top=current_pop_top+(e.clientY-current_y);
  current_pop_left=current_pop_left+(e.clientX-current_x);
  current_x=e.clientX;
  current_y=e.clientY;
  current_pop_elem.style.top=(current_pop_top)+'px';
  current_pop_elem.style.left=(current_pop_left)+'px';
}
function mobilise_close_drag(e)
{
  // console.log("Mouse close fired");
  current_pop_elem.classList.remove("elem-on-move");
  document.removeEventListener("mousemove",mobilise_on_mouse_move);
  document.removeEventListener("mouseup",mobilise_close_drag);
}

//change: 'user can send log' feature
function append_send_log(msg_id,api_name)
{
  let msgContainer=document.getElementById(msg_id);
  if(msgContainer)
  {
    msgContainer.innerHTML=`<br><span class='resp-notif hide'>Not quite the response you expected? You can send logs to be checked, to the admins.</span><div class='send-log-btn' id="send_log_btn" onclick="send_log_manual('${api_name}',this)"> Send logs <i class="fa fa-share-from-square circular-btn"></i></div><div class="show-log-btn" onclick="show_logs('${api_name}')">Show logs</div>`;
    msgContainer.addEventListener("mouseenter",send_log_container_mouse_enter);
    msgContainer.addEventListener("mouseleave",send_log_container_mouse_out);
  }
  
}
function send_log_container_mouse_enter()
{
  this.children[1].classList.remove("hide");
}
function send_log_container_mouse_out()
{
  this.children[1].classList.add("hide");
}
function sendLogsNew(btnRef,evt)
{
  let btnParent=btnRef.parentNode;
  let apiName=btnParent.getAttribute("apiName");
  send_log_manual_new(apiName,btnRef,evt); 
}
function attachToolTiponHover(elem)
{
  elem.removeEventListener("mouseenter",attachToolTiponHover);
  let toolTipText=elem.getAttribute("itemName");
  let toolTipAdded=elem.getAttribute("tipAdded");
  if(toolTipText&&toolTipText!="")
  {
    if(toolTipAdded!="true")
    {
      addToolTip(elem,toolTipText);
      elem.setAttribute("tipAdded","true");
    }
  }
}
function show_logs(api_name)
{
    console.log("Requested API logs:",api_logs[api_name]);
    document.getElementById("v_pop_up_backdrop").classList.remove("hide"); //No I18N
    document.getElementById("v_pop_up_backdrop").classList.add("flex-row"); //No I18N
    document.getElementById("show_logs_pop_up").classList.remove("hide"); //No I18N
    let st="";
    for(const key in api_logs)
    {
      if(key==api_name)
      {
        let itemViewName=key;
        if(itemViewName.length>9)
        {
          itemViewName=itemViewName.slice(0,8)+"...";
          st+=`<div class='left-list-items-selected' apiName="${key}" itemname="${key}" onclick="select_log(this,'${key}')">${itemViewName} <div class="crm-style-btn" style="margin-left:10px; display:flex;flex-direction:row;align-items:center;" id="sendLogBtn">Send logs <i class="fa fa-share-from-square circular-btn"></i></div></div>`;
        }
        else
        {
          st+=`<div class='left-list-items-selected' apiName="${key}" onmouseenter="attachToolTiponHover(this)" itemname="${key}" onclick="select_log(this,'${key}')">${itemViewName} <div class="crm-style-btn" style="margin-left:10px; display:flex;flex-direction:row;align-items:center;" id="sendLogBtn">Send logs <i class="fa fa-share-from-square circular-btn"></i></div></div>`;
        }
        
      }
      else
      {
        if(api_logs[key] && api_logs[key]!="")
        {
          st+=`<div class='left-list-items' apiName="${key}" onclick="select_log(this,'${key}')">${key}</div>`;
        }  
      }
    }
    document.getElementById("list_col").innerHTML=st;
    select_log(undefined,api_name);
    let sendLgBtn=document.getElementById("list_col").querySelector("#sendLogBtn");
    if(sendLgBtn)
    {
      sendLgBtn.addEventListener("click",(evt)=>{sendLogsNew(sendLgBtn,evt);
      
      });
    }
    
}
function select_log(elem,api_name)
{
  if(elem!==undefined)
  {
    let selected_log=document.getElementsByClassName('left-list-items-selected');
    for(i=0;i<selected_log.length;i++)
    {
      if(selected_log[i])
      {
        selected_log[i].classList.add('left-list-items');
        let sendBtn=selected_log[i].querySelector("#sendLogBtn");
        let itemName=selected_log[i].getAttribute("itemName");
        if(itemName&&itemName!="")
        {
          selected_log[i].innerHTML="";
          selected_log[i].innerHTML=itemName;
        }
        selected_log[i].classList.remove('left-list-items-selected');
        if(sendBtn)
        {
          sendBtn.remove();
        }
        
      }
      

    }
    elem.classList.remove('left-list-items');
    elem.classList.add('left-list-items-selected');
    let itemViewName=elem.getAttribute("apiName");
    if(itemViewName.length>8)
    {
      elem.setAttribute("itemName",itemViewName);
      itemViewName=itemViewName.slice(0,8)+"...";
      elem.innerHTML="";
      elem.innerHTML=itemViewName;
      elem.setAttribute("tipAdded","false");
      attachToolTiponHover(elem);
    }
    elem.innerHTML+=`<div class="crm-style-btn" style="margin-left:10px; display:flex;flex-direction:row;align-items:center;" id="sendLogBtn">Send logs <i class="fa fa-share-from-square circular-btn"></i></div>`;
    let sendLogBtn=elem.querySelector("#sendLogBtn");
    if(sendLogBtn)
    {
      sendLogBtn.addEventListener("click",(evt)=>{sendLogsNew(sendLogBtn,evt);});
    }
  }
  
  populate_logs(api_name);
}
function populate_logs(api_name)
{
  //to handle exception in future
  let req_logs="";
  try
  {
    req_logs=api_logs[api_name];
  }
  catch(e)
  {
    document.getElementById("logs_box_big").innerHTML="Could not fetch logs.";
    return;
  }
  //change to mask sensitive information in show logs
  let req;
  let resp;
  let url;
  try{
    req=req_logs.details.userMessage[2];
    resp=req_logs.details.userMessage[11];
    url=req_logs.details.userMessage[12];
    try{
      let req_obj=JSON.parse(req.replaceAll(" ",""));
      req=JSON.stringify(mask_logs(req_obj,maskKeys));
    }
    catch(e)
    {
        //silently discard error
    }
    try{
      let resp_obj=JSON.parse(resp);
      resp=JSON.stringify(mask_logs(resp_obj,maskKeys));
    }
    catch(e)
    {
      //silently discard error
    }
    

    // // document.getElementById("pop_url").innerHTML=req;
    // document.getElementById("pop_request").innerHTML=req;
    // document.getElementById("pop_response").innerHTML=resp;
    document.getElementById("logs_box_big").innerHTML=`{Request:${req},\nResponse:${resp},\nURL:'${url}'}`;
  }
  catch(e)
  {
    document.getElementById("logs_box_big").innerHTML=JSON.stringify(req_logs);
  }
  //
}
function copy_on_click()
{
  copy_to_clipboard(clip_board_str);
}
function copy_to_clipboard(str)
{
  navigator.clipboard.writeText(str).then(() => {
    console.log('Content copied to clipboard',str);
    /* Resolved - text copied to clipboard successfully */
  },(err) => {
    console.error('Failed to copy',err);
    /* Rejected - text failed to copy to the clipboard */
  });
}
function send_log_manual(api_name,elem)
{
  // elem.classList.remove("crm-style-btn-secondary");
  // elem.classList.add("crm-style-btn-2");
  elem.style.pointerEvents="none";
  elem.innerHTML="<span class='disappearise'>Thank you!</span>";
  elem.parentNode.children[1].classList.add("hide");
  elem.parentNode.removeEventListener("mouseenter",send_log_container_mouse_enter);
  elem.parentNode.removeEventListener("mouseleave",send_log_container_mouse_out);
  // show_notification_msg("info","Generating logs","Logs will be sent in the background");
  write_to_error_log_module(api_name+(logged_in_user_mail==null?"":("-"+logged_in_user_mail.split("@")[0])),api_logs[api_name]);
}

function send_log_manual_new(api_name,elem,evt)
{
  elem.style.pointerEvents="none";
  elem.innerHTML="<span class='disappearise'>Thank you!</span>";
  setTimeout(()=>{
    let menuItem=elem.parentNode;
    if(menuItem)
    {
      let itemName=menuItem.getAttribute("itemname");
      if(itemName&&itemName!="")
      {
        menuItem.innerHTML="";
        menuItem.innerHTML=itemName;
      }
    }
    elem.remove();
  },800);
  write_to_error_log_module(api_name+(logged_in_user_mail==null?"":("-"+logged_in_user_mail.split("@")[0])),api_logs[api_name]);
  evt.stopPropagation();
}

function append_send_log_elems(main_section_id)
{
  let sr_mains=document.getElementsByClassName(main_section_id);
  for(i=0;i<sr_mains.length;i++)
  {
    sr_mains[i].innerHTML+=`<div class="send-log-row"><div class="send-log-container" id="send_log_container_${i}"></div></div>`;
  }
}
//change for: branch SOL ID for ticket creation
function get_branch_sol_id(acc_no)
{
  console.log("accounts",new_advances,new_deposits);  
  let deposits_len=new_deposits.length;
  let advances_len=new_advances.length;
  try{
    acc_no=acc_no.replaceAll("\n","").replaceAll(" ","").trim();
  }
  catch(err)
  {
    console.err("Error in trimming account number");
  }
  for(i=0;i<(deposits_len>advances_len?deposits_len:advances_len);i++)
  {
    if(i<deposits_len)
    {
      if(new_deposits[i]['Name']==acc_no)
      {
        return new_deposits[i]['Branch_Sol_ID.Branch_SOL_ID']||"-";
      }
    }
    if(i<advances_len)
    {
      if(new_advances[i]['Name']==acc_no)
      {
        return new_advances[i]['Branch_Sol_ID.Branch_SOL_ID']||"-";
      }
    }
  }
}
//change for masking card numbers & sensitive data in show logs & send logs features

function mask_logs(obj,keysToBeMasked)
{
  try{
    if((typeof obj==="object"))
    {
      let objKeys=Object.keys(obj);
      let i;
      for(i=0;i<objKeys.length;i++)
      {
        if(typeof obj[objKeys[i]]==="object")
        {
          obj[objKeys[i]]=mask_logs(obj[objKeys[i]],keysToBeMasked);
        }
        else
        {
          if(keysToBeMasked.includes(objKeys[i]))
        {
          obj[objKeys[i]]=mask_str(String(obj[objKeys[i]]),"card");
        }
        }
      }
    }
    return obj
  }
  catch(e)
  {
    //silently discard error if object.keys() throws an error
    return obj;
  }
}
//
//change for masking logs on storing logs
function store_log(api_name,logObj)
{
  let reqJson;
  let respJson;
  try{
    reqJson=JSON.parse(logObj.details.userMessage[2]);
    logObj.details.userMessage[2]=JSON.stringify(mask_logs(reqJson));
  }
  catch(e)
  {
    //silently discard error
  }
  try{
    respJson=JSON.parse(req_logs.details.userMessage[11]);
    logObj.details.userMessage[2]=JSON.stringify(mask_logs(respJson));
  }
  catch(e)
  {
    //silently discard error 
  }
    api_logs[api_name]=logObj;
}
//
//loading lead on tab click
function loadLeads()
{
  table_loader('tblleadtabb',5,7);
  conn_name = "zohocrm";
  // base_url ="https://ucrmapi.unionbankofindia.co.in/crm/v2/Leads/search?criteria=(Mobile:equals:" +mobl +")"; //No I18N
  //((Customer_ID:equals:${custid})or(Finacle_Customer_ID:equals:${custid}))
  base_url =`https://ucrmapi.unionbankofindia.co.in/crm/v2/Leads/search?criteria=((Customer_ID:equals:${custid})or(Finacle_Customer_ID:equals:${custid}))`; //No I18N
  console.log(base_url);
  var req_data = {
    headers: {}, //No I18N
    method: "GET", //No I18N
    url: base_url, //No I18N
  };
  ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)

    // ZOHO.CRM.API.searchRecord({
    //   Entity: "Leads",
    //   Type: "criteria",
    //   Query: "(Mobile:equals:" + mobl + ")",
    //   delay: false,
    // })
    .then((data) => {
      console.log("Leads search data", data);
      let arrDat = [];
      console.log("arrDat", arrDat);
      if (data.details.statusMessage == "") {
        
        // populateLeads("No Associated Leads");

        document.getElementById("lead-table-container").style.display = "none";
        document.getElementById("nolead-container").style.display = "block";
        leadsLoaded=true;
        return;
      }
      arrDat = data.details.statusMessage.data;
      leads_results = arrDat;
      let c = 0;
      let r = 0;
      let u = 0;
      if (arrDat.length == 0) {
        // populateLeads("No Associated Leads");

        document.getElementById("lead-table-container").style.display = "none";
        document.getElementById("nolead-container").style.display = "block";
        leadsLoaded=true;
        return;
      } else {
        populateLeads(); 
      }
      leadsLoaded=true;
    })
    .catch((error) => {
      console.log("error in leads api call", error, "mobl is ", mobl);
      if (mobl == "" || mobl == null || mobl == "-") {
       populateLeads("No associated leads");
       leadsLoaded=true;
        return;
      }
      populateLeads("Couldn't load leads, something went wrong");
      leadsLoaded=true;
    });
}
function populateLeads(error)
{
    let lead_table = document.getElementById("tblleadtabb");
    let table_st = ``;
    if(error)
    {
      lead_table.innerHTML=`<tr><td>${error}</td></tr>`;
      return;
    }
    if (leads_results.length == 0) {
      // table_st += `<tr>`;
      // table_st += `<td class='tabdat'>-</td>`;
      // table_st += `<td class='tabdat'>-</td>`;
      // table_st += `<td class='tabdat'>-</td>`;
      // table_st += `<td class='tabdat'>-</td>`;
      // table_st += `<td class='tabdat'>-</td>`;
      // table_st += `<td class='tabdat'>-</td>`;
      // table_st += `<td class='tabdat'>-</td>`;
      // table_st += `<td class='tabdat'>-</td>`;
      // table_st += `</tr>`;
      document.getElementById("nolead-container").style.display = "block";
      document.getElementById("lead-table-container").style.display = "none";
    } else{
      document.getElementById("lead-table-container").style.display = "block";
    for (var i = 0; i < leads_results.length; i++) {
      table_st += `<tr class="highlighted_row" onclick='leadClk1(${leads_results[i].id})'>`;
      table_st += `<td class='tabdatt2'>${leads_results[i].Customer_Reference_Id}</td>`;
      table_st += `<td class='tabdatt2'>${
        leads_results[i].Lead_Status || "-"
      }</td>`;
      table_st += `<td class='tabdatt2'>${
        leads_results[i].Lead_Source || "-"
      }</td>`;
      table_st += `<td class='tabdatt2'>${leads_results[i].Owner.name}</td>`;
      table_st += `<td class='tabdatt2'>${format_date(
        leads_results[i].Created_Time.split("T")[0]
      )}</td>`;
      table_st += `<td class='tabdatt2'>${leads_results[i].Product}</td>`;
      table_st += `<td class='tabdatt2'>${leads_results[i].Expected_Business}</td>`;
      table_st += `</tr>`;
    }
  }
    lead_table.innerHTML = table_st;
}
// change for branch off-loading
function loadBranchDetails()
{
  document.getElementById("ctbranch").innerHTML = circular_loader_colorless;
  document.getElementById("ctregion").innerHTML = circular_loader_colorless;
  document.getElementById("ctzone").innerHTML =   circular_loader_colorless;
}
function branchLoadFailed()
{
  let failureStr=`Failed <span onclick="fetchCustBranch()" class="show-log-btn" style=" style="color: #66ff67;">retry</span>`;
  document.getElementById("ctbranch").innerHTML = failureStr;
  document.getElementById("ctregion").innerHTML = failureStr;
  document.getElementById("ctzone").innerHTML =   failureStr;
}
function fetchCustBranch()
{
  let conn_name = "zohocrm";
  let base_url =
    "https://ucrmapi.unionbankofindia.co.in/crm/v2/ETL_Branch_Masters/search?criteria=(Branch_SOL_ID:equals:" +
    solid +
    ")"; //No I18N
  console.log(base_url);
  var req_data = {
    headers: {}, //No I18N
    method: "GET", //No I18N
    url: base_url, //No I18N
  };
  loadBranchDetails();
  ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
    .then(function (data) {
      console.log("found a match for sol ID", solid, data);
      if (data.status == 204) {
        document.getElementById("ctbranch").innerHTML = "-";
        document.getElementById("ctregion").innerHTML = "-";
        document.getElementById("ctzone").innerHTML = "-";
        return;
      }
      if (data.details.statusMessage == "") {
        document.getElementById("ctbranch").innerHTML = "-";
        document.getElementById("ctregion").innerHTML = "-";
        document.getElementById("ctzone").innerHTML = "-";
        return;
      }
      let dt = data.details.statusMessage.data;
      for (var i = 0; i < dt.length; i++) {
        if (i == 0) {
          let bc_code = dt[i].Branch_SOL_ID || "-";
          customer_branch_sol_id_for_desk=bc_code;
          console.log("Bc code", bc_code, dt[i]);
          let bc_name = dt[i].Name || "-";
          if (bc_name == "-"){
            document.getElementById("ctbranch").innerHTML = "-";
            desk_contat_data.Branch_Name = "-";
          }else {
            desk_contat_data.Branch_Name = bc_name;
            if (bc_code != "-") {
              document.getElementById(
                "ctbranch"
              ).innerHTML = `${bc_name} (${bc_code})`;
            } else {
              document.getElementById("ctbranch").innerHTML = `${bc_name}`;
            }
          }
          document.getElementById("ctregion").innerHTML =
            dt[i].Region || "-";
          document.getElementById("ctzone").innerHTML = dt[i].DIVISION_NAME.split("-")[1] || "-";
          break;
        }
  }
  })
  .catch((error) => {
    console.log("Branch API error", error);
    branchLoadFailed();
    // write error log module
    write_to_error_log_module("Branch API",error);
  });
}

function getRandomArbitrary(min,max)
{
  return ((Math.random()*(max-min))+min);
}
function reloadSmoothly()
{
  let randomNoForReload=getRandomArbitrary(200,500);
  document.getElementById("s360_load_msg").innerHTML="";
  console.log("Random number for reload is",randomNoForReload);
  let reloadTimer=setTimeout(()=>{load_cust_data();},randomNoForReload);
}
function disableBtn(btnRef)
{
  if(!btnRef)
  {
    return null;
  }
  let circleLoader=`<div style="position:absolute;top:0;left:0;right:0;bottom:0; display:flex; align-items:center; justify-content:center; border-radius:6px; background-color: rgba(0, 0, 0, 0.25);" id="circular_loader"><div style="border: 3px solid rgba(254,254,254,0.5); border-top-color:white;" class="small-circular-loader"></div></div>`;
  let currBtnContent=btnRef.innerHTML;
  btnRef.classList.add("btn-loader-parent");
  btnRef.classList.add("disable-btn");
  btnRef.innerHTML+=circleLoader;
  return currBtnContent;
}
function enableBtn(btnRef,originalContent)
{
  if(!btnRef)
  {
    return;
  }
  btnRef.classList.remove("btn-loader-parent");
  btnRef.classList.remove("disable-btn");
  if(btnRef.classList.contains("crm-style-btn-2"))
  {
    btnRef.classList.remove("crm-style-btn-2");
    btnRef.classList.add("crm-style-btn");
  }
  btnRef.innerHTML=originalContent?originalContent:btnRef.innerHTML;
}
//function for turning off a button
function turnOffBtn(btnRef)
{
  btnRef.classList.add("crm-style-btn-2");
  btnRef.classList.remove("crm-style-btn");
  btnRef.classList.add("disable-btn");
}
//dropDownValuesArr - array of values to be populated in the dropdown
//selectAction - function to be triggered when an item is clicked
function createDynamicDropDown(dropDownValuesArr,selectAction,initialValue)
{
  let dropDownTemplate=document.getElementById("fancyDropDownTemplate");
  let dropDownClone=dropDownTemplate.cloneNode(true);
  let dropSelect=dropDownClone.querySelector("#fc_drop_select");
  let dropContent=dropDownClone.querySelector("#fc_drop_content");
  let dropOptionClone=document.getElementById("fc_drop_option");
  let atleastOneOptionPresent=false;
  dropDownClone.id=dropDownClone.id+""+dynamicDropCount;
  dropSelect.id+=""+dynamicDropCount;
  dropContent.id+=""+dynamicDropCount;
  dropSelect.innerHTML=initialValue|| "--Select--";
  dropDownClone.addEventListener("click",(evt)=>{
    console.log("toggle dropdown");
    show_drop(dropContent.id);
    let elemBoundingClient=dropContent.getBoundingClientRect();
    let elemLeft=elemBoundingClient.left;
    let elemRight=elemBoundingClient.right;
    let elemTop=elemBoundingClient.top;
    let elemBottom=elemBoundingClient.bottom;
    let windowWidth=window.innerWidth;
    let windowHeight=window.innerHeight;
    if(elemLeft<0)
    {
      dropContent.style.left='10px';
    }
    if(elemTop<0)
    {
      dropContent.style.top='10px';
    }
    if(elemBottom>windowHeight)
    {
      dropContent.style.bottom=`10px`;
    }
    if(elemRight>windowWidth)
    {
      dropContent.style.right=`10px`;
    }
    evt.stopPropagation();
  });
  for(let i=0;i<dropDownValuesArr.length;i++)
  {
    if(!dropDownValuesArr[i])
    {
        continue;
    }
    else
    {
        atleastOneOptionPresent=true;
    }
    let dropOption=dropOptionClone.cloneNode(true);
    dropOption.id+=""+dynamicDropCount+"_"+i;
    dropOption.classList.remove("hide");
    dropOption.innerHTML=dropDownValuesArr[i];
    if(dropDownValuesArr[i])
    {
      dropOption.setAttribute("data-selector-id",dropDownValuesArr[i].replaceAll(" ","_"));
    }
    dropOption.addEventListener("click",(evt)=>{
      let targetParent=evt.target.parentNode;
      let targetOptions=targetParent.querySelectorAll(".drop-line.dr");
      dropSelect.innerHTML=evt.target.innerHTML;
      show_drop(dropContent.id);
      for(let option of targetOptions)
      {
        option.classList.remove("drop-line-selected");
      }
      evt.target.classList.add("drop-line-selected");
      dropDownClone.setAttribute("Value",evt.target.innerHTML);
      if(selectAction)
      selectAction(evt.target.innerHTML);
      evt.stopPropagation();
    });
    dropContent.appendChild(dropOption);
  }
  if(!atleastOneOptionPresent)
  {
    dropSelect.innerHTML="No Options Available";
  }
  dropDownClone.classList.remove("hide");
  dropDownClone.selectItemByIndex=(index)=>{
    let options=dropDownClone.querySelectorAll(".drop-line");
    console.log("inside selectItemByIndex",options);
    if((index>=options.length)||(index<0))
    {
        console.error("The given index is out of bounds:",index);
        return;
    }
    var nonHiddenElems=-1;
    for(let option of options)
    {
        if(!option.classList.contains("hide"))
        {
            nonHiddenElems++;
        }
        if(nonHiddenElems==index)
        {
            option.click();
            option.click();
        }
    }
  };
  dropDownClone.attachChangeListener=(changeAction)=>{
    let dropOptions=dropDownClone.querySelectorAll(".drop-line");
    for(let option of dropOptions)
    {
      option.addEventListener("click",(evt)=>{changeAction(evt.target.innerHTML);});
    }
  };
  //adding populate drop-down function - this can be used to reset the dropdown externally
  dropDownClone.populateDropDown=(dropDownValuesArr)=>{
    dropContent.innerHTML="";
    for(let i=0;i<dropDownValuesArr.length;i++)
  {
    if(!dropDownValuesArr[i])
    {
        continue;
    }
    else
    {
        atleastOneOptionPresent=true;
    }
    let dropOption=dropOptionClone.cloneNode(true);
    dropOption.id+=""+dynamicDropCount+"_"+i;
    dropOption.classList.remove("hide");
    dropOption.innerHTML=dropDownValuesArr[i];
    dropOption.addEventListener("click",(evt)=>{
      let targetParent=evt.target.parentNode;
      let targetOptions=targetParent.querySelectorAll(".drop-line.dr");
      dropSelect.innerHTML=evt.target.innerHTML;
      show_drop(dropContent.id);
      for(let option of targetOptions)
      {
        option.classList.remove("drop-line-selected");
      }
      evt.target.classList.add("drop-line-selected");
      dropDownClone.setAttribute("Value",evt.target.innerHTML);
      if(selectAction)
      selectAction(evt.target.innerHTML);
      evt.stopPropagation();
    });
    dropContent.appendChild(dropOption);
  }
  if(!atleastOneOptionPresent)
  {
    dropSelect.innerHTML="No Options Available";
  }
  };
  //
  //Function to get the drop-option elements of the drop-down
  dropDownClone.getOptionElems=()=>{
    let dropOptions=dropDownClone.querySelectorAll(".drop-content > .drop-line.dr");
    return dropOptions;
  }
  dynamicDropCount++;
  return dropDownClone;
}
//
//dropDownValuesArr - array of values to be populated in the dropdown
//selectAction - function to be triggered when an item is clicked
//onPopulateFn - function to manipulate the drop-down options when they are being populated (for eg) changing colors of some drop-down options based on the values it holds.
//  ->) The function gets two inputs when it is invoked: the dropOption element to be manipulated & the value it holds
//  ->) When the function gets invoked? whenever the populatedropDown function is explicitly called on the returned drop-down object
function createDynamicDropDownWithSearch(dropDownValuesArr,selectAction,initialValue,searchActionSmooth,searchPlaceHolder,onPopulateFn)
{
  let dropDownTemplate=document.getElementById("fancyDropDownWithSearchTemplate");
  let dropDownClone=dropDownTemplate.cloneNode(true);
  let thisDropDown=dropDownClone;
  let dropSelect=dropDownClone.querySelector("#fc_drop_select");
  let dropContent=dropDownClone.querySelector("#fc_drop_content");
  let dropOptionsContainer=dropDownClone.querySelector("#fc_drop_options_container");
  let dropOptionClone=document.getElementById("fc_drop_option");
  let searchTextBox=dropDownClone.querySelector("#fcDropDownSearch");
  let utilsContainer=dropDownClone.querySelector("#fc_utils_container");
  let atleastOneOptionPresent=false;
  let loaderElem=dropDownClone.querySelector("#fcSearchLoader");
  //initialising search related attributes to thisDropDown obj
  thisDropDown.initialArr=dropDownValuesArr;
  thisDropDown.searchActionSmooth=searchActionSmooth;
  thisDropDown.searchText='';
  thisDropDown.searchTimer=null;
  thisDropDown.onPopulateFn=onPopulateFn;
  //
  //Initialising search place holder
  if(searchPlaceHolder)
  {
    searchTextBox.placeholder=searchPlaceHolder;
  }
  //
  dropDownClone.id=dropDownClone.id+""+dynamicDropCount;
  dropSelect.id+=""+dynamicDropCount;
  dropContent.id+=""+dynamicDropCount;
  dropSelect.innerHTML=initialValue|| "--Select--";
  dropDownClone.addEventListener("click",(evt)=>{
    console.log("toggle dropdown");
    show_drop(dropContent.id);
    let elemBoundingClient=dropContent.getBoundingClientRect();
    let elemLeft=elemBoundingClient.left;
    let elemRight=elemBoundingClient.right;
    let elemTop=elemBoundingClient.top;
    let elemBottom=elemBoundingClient.bottom;
    let windowWidth=window.innerWidth;
    let windowHeight=window.innerHeight;
    if(elemLeft<0)
    {
      dropContent.style.left='10px';
    }
    if(elemTop<0)
    {
      dropContent.style.top='10px';
    }
    if(elemBottom>windowHeight)
    {
      dropContent.style.bottom=`10px`;
    }
    if(elemRight>windowWidth)
    {
      dropContent.style.right=`10px`;
    }
    evt.stopPropagation();
  });
  for(let i=0;i<dropDownValuesArr.length;i++)
  {
    if(!dropDownValuesArr[i])
    {
        continue;
    }
    else
    {
        atleastOneOptionPresent=true;
    }
    let dropOption=dropOptionClone.cloneNode(true);
    dropOption.id+=""+dynamicDropCount+"_"+i;
    dropOption.classList.remove("hide");
    dropOption.innerHTML=dropDownValuesArr[i];
    dropOption.addEventListener("click",(evt)=>{
      let targetParent=evt.target.parentNode;
      let targetOptions=targetParent.querySelectorAll(".drop-line.dr");
      dropSelect.innerHTML=evt.target.innerHTML;
      show_drop(dropContent.id);
      for(let option of targetOptions)
      {
        option.classList.remove("drop-line-selected");
      }
      evt.target.classList.add("drop-line-selected");
      dropDownClone.setAttribute("Value",evt.target.innerHTML);
      if(selectAction)
      selectAction(evt.target.innerHTML);
      evt.stopPropagation();
    });
    if(thisDropDown.onPopulateFn)
    {
      thisDropDown.onPopulateFn(dropOption,dropDownValuesArr[i]); //to manipulate the dropOption element. For eg) to change its color based on the value it holds
    }
    dropOptionsContainer.appendChild(dropOption);
  }
  if(!atleastOneOptionPresent)
  {
    dropSelect.innerHTML="No Options Available";
  }
  dropDownClone.classList.remove("hide");
  dropDownClone.selectItemByIndex=(index)=>{
    let options=dropDownClone.querySelectorAll(".drop-line");
    console.log("inside selectItemByIndex",options);
    if((index>=options.length)||(index<0))
    {
        console.error("The given index is out of bounds:",index);
        return;
    }
    var nonHiddenElems=-1;
    for(let option of options)
    {
        if(!option.classList.contains("hide"))
        {
            nonHiddenElems++;
        }
        if(nonHiddenElems==index)
        {
            option.click();
            option.click();
        }
    }
  };
  dropDownClone.attachChangeListener=(changeAction)=>{
    let dropOptions=dropDownClone.querySelectorAll(".drop-line");
    for(let option of dropOptions)
    {
      option.addEventListener("click",(evt)=>{changeAction(evt.target.innerHTML);});
    }
  }
  //adding search functionality
  utilsContainer.addEventListener("click",(evt)=>{
    evt.stopPropagation();
  });
  searchTextBox.addEventListener("click",(evt)=>{
    evt.stopPropagation();
  });

  //appending search function 
  searchTextBox.addEventListener("keyup",(evt)=>{
    let searchText=searchTextBox.value;
    thisDropDown.searchText=searchText;
    thisDropDown.showSearchLoader();
    console.log("inside search textbox",evt);
    if(thisDropDown.searchTimer)
    {
      clearTimeout(thisDropDown.searchTimer);
    }
    thisDropDown.searchTimer=setTimeout(()=>{
      if(searchText)
      {
        thisDropDown.searchActionSmooth(searchText,thisDropDown.initialArr);
      }
      else
      {
        thisDropDown.resetDropDown();
      }
        
        clearTimeout(thisDropDown.searchTimer);
        thisDropDown.searchTimer=null;
        thisDropDown.clearLoader();
    },500);
    evt.stopPropagation();
  });
  //
  //appending reset function
  thisDropDown.resetDropDown=()=>{
    //
    let initialVals=thisDropDown.initialArr;
    let atleastOneOptionPresent=false;
    dropOptionsContainer.innerHTML='';
    for(let i=0;i<initialVals.length;i++)
  {
    if(!initialVals[i])
    {
        continue;
    }
    else
    {
        atleastOneOptionPresent=true;
    }
    let dropOption=dropOptionClone.cloneNode(true);
    dropOption.id+=""+dynamicDropCount+"_"+i;
    dropOption.classList.remove("hide");
    dropOption.innerHTML=initialVals[i];
    dropOption.addEventListener("click",(evt)=>{
      let targetParent=evt.target.parentNode;
      let targetOptions=targetParent.querySelectorAll(".drop-line.dr");
      dropSelect.innerHTML=evt.target.innerHTML;
      show_drop(dropContent.id);
      for(let option of targetOptions)
      {
        option.classList.remove("drop-line-selected");
      }
      evt.target.classList.add("drop-line-selected");
      thisDropDown.setAttribute("Value",evt.target.innerHTML);
      if(selectAction)
      selectAction(evt.target.innerHTML);
      evt.stopPropagation();
    });
    if(thisDropDown.onPopulateFn)
    {
      thisDropDown.onPopulateFn(dropOption,dropDownValuesArr[i]); //to manipulate the dropOption element. For eg) to change its color based on the value it holds
    }
    dropOptionsContainer.appendChild(dropOption);
  }
    //
  };
  //
  //appending populatedropDown function
  thisDropDown.populatedropDown=(optionsToPopulate)=>{
    //
    let initialVals=optionsToPopulate;
    let atleastOneOptionPresent=false;
    dropOptionsContainer.innerHTML='';
    for(let i=0;i<initialVals.length;i++)
  {
    if(!initialVals[i])
    {
        continue;
    }
    else
    {
        atleastOneOptionPresent=true;
    }
    let dropOption=dropOptionClone.cloneNode(true);
    dropOption.id+=""+dynamicDropCount+"_"+i;
    dropOption.classList.remove("hide");
    dropOption.innerHTML=initialVals[i];
    dropOption.addEventListener("click",(evt)=>{
      let targetParent=evt.target.parentNode;
      let targetOptions=targetParent.querySelectorAll(".drop-line.dr");
      dropSelect.innerHTML=evt.target.innerHTML;
      show_drop(dropContent.id);
      for(let option of targetOptions)
      {
        option.classList.remove("drop-line-selected");
      }
      evt.target.classList.add("drop-line-selected");
      thisDropDown.setAttribute("Value",evt.target.innerHTML);
      if(selectAction)
      selectAction(evt.target.innerHTML);
      evt.stopPropagation();
    });
    if(thisDropDown.onPopulateFn)
    {
      thisDropDown.onPopulateFn(dropOption,initialVals[i]); //to manipulate the dropOption element. For eg) to change its color based on the value it holds
    }
    dropOptionsContainer.appendChild(dropOption);
  }
    //
  };
  //
  //attaching search loader
  thisDropDown.showSearchLoader=()=>{
    let nBeads=4;
    let containerElem=loaderElem;
    let beadSt=``;
    if(containerElem.innerHTML!=``)
    {
      return;
    }
    for(let i=0;i<nBeads;i++)
    {
      beadSt+=`<div class="load-beads"></div>`;
    }
    containerElem.innerHTML=beadSt;
  };
  //Attaching clear loader
  thisDropDown.clearLoader=()=>{
    loaderElem.innerHTML='';
  };
  //

  dynamicDropCount++;
  return dropDownClone;
}
//
var genericPopUpCount=0;
function createGenericPopUp()
{
  let popUpRef=document.getElementById("modalClone");
  let popUpClone=popUpRef.cloneNode(true);
  let popUpCloseBtn=popUpClone.querySelector("#modalCloneClose");
  document.body.appendChild(popUpClone);
  popUpClone.id=popUpClone.id+"_"+genericPopUpCount;
  popUpCloseBtn.id= popUpCloseBtn.id+"_"+genericPopUpCount;
  popUpClone.addEventListener("click",(evt)=>{
    if(evt.target==popUpClone)
    {
      popUpClone.remove();
    }
    });
  popUpCloseBtn.addEventListener("click",()=>{popUpClone.remove();});
  popUpClone.classList.remove("hide");
  popUpClone.classList.add("mobilise");
  popUpClone.querySelector(".modal-content").onmousedown=mobilise_on_mouse_down;
  genericPopUpCount++;
  return popUpClone;
}
var cloneCount=0;
function displayCreditCardDetails(evt,parentZIndex,cardProfile)
{
  let genericPopUp=createGenericPopUp();
  let genericPopUpContentContainer=genericPopUp.querySelector("#modalCloneBody");
  genericPopUp.style.zIndex=Number(parentZIndex)+1;
  let ccGDTable=document.getElementById("creditCardGDTableClone").cloneNode(true);
  let ccCDTable=document.getElementById("creditCardCDTableClone").cloneNode(true);
  let ccLBTable=document.getElementById("creditCardLBTableClone").cloneNode(true);
  let ccCardLimitTable=document.getElementById("creditCardCLTableClone").cloneNode(true);
  ccGDTable.id+=""+cloneCount++;
  ccCDTable.id+=""+cloneCount++;
  ccLBTable.id+=""+cloneCount++;
  ccCardLimitTable.id+=""+cloneCount++;
  let gdTableRow=`<tr><td>${cardProfile.ccCustId || "-"}</td><td>${cardProfile.cbsCustId || "-"}</td><td>${cardProfile.cbsAcntNo || "-"}</td><td>${cardProfile.mobileNumber || "-"}</td><td>${cardProfile.emailId || "-"}</td></tr>`;
  let cdTableRow=`<tr><td>${cardProfile.maskCardNo || "-"}</td><td>${cardProfile.cardStatus || "-"}</td><td>${cardProfile.cardVariant || "-"}</td><td>${cardProfile.nameOnCard || "-"}</td></tr>`;
  let lastBillDetails=cardProfile.lastBillDetails;
  let lbTableRow=`<tr><td>-</td><td>-</td><td>-</td></tr>`;
  if(lastBillDetails)
  {
    let lastBillDate=lastBillDetails.lastBillDate;
    let billDueDate=lastBillDetails.dueDate;
    lbTableRow=`<tr><td>${lastBillDate ? lastBillDate.replaceAll("-","/") : "-"}</td><td>${format_bal2(lastBillDetails.lastBillAmt || "-")}</td><td>${billDueDate? billDueDate.replaceAll("-","/") : "-"}</td></tr>`;
  }
  let cardLimitDetails=cardProfile.cardLimitDetails;
  let clTableRow=`<tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>`;
  if(cardLimitDetails)
  {
    clTableRow=`<tr><td>${cardLimitDetails.creditLimit || "-"}</td><td>${format_bal2(cardLimitDetails.cashLimit || "-")}</td><td>${cardLimitDetails.availCreditLimit || "-"}</td><td>${format_bal2(cardLimitDetails.availCashLimit || "-")}</td><td>${format_bal2(cardLimitDetails.pendAuthAmt || "-")}</td><td>${format_bal2(cardLimitDetails.pendEMIAmt || "-")}</td><td>${format_bal2(cardLimitDetails.unBilledDebitAmt||"-")}</td><td>${cardLimitDetails.unBilledCreditAmt||"-"}</td><td>${format_bal2(cardLimitDetails.totOSAmt||"-")}</td></tr>`;
  }
  
  ccGDTable.innerHTML+=gdTableRow;
  ccCDTable.innerHTML+=cdTableRow;
  ccLBTable.innerHTML+=lbTableRow;
  ccCardLimitTable.innerHTML+=clTableRow;
  // ccGDTable.classList.add("marginTop");
  // ccCDTable.classList.add("marginTop");
  // ccLBTable.classList.add("marginTop");
  // ccCardLimitTable.classList.add("marginTop");
  genericPopUpContentContainer.innerHTML=`<div class="section-header">General Details</div>`;
  ccGDTable.classList.remove("hide");
  ccCDTable.classList.remove("hide");
  ccLBTable.classList.remove("hide");
  ccCardLimitTable.classList.remove("hide");
  genericPopUpContentContainer.appendChild(ccGDTable);
  genericPopUpContentContainer.innerHTML+=`<div class="marginTop2 section-header">Card Details</div>`;
  genericPopUpContentContainer.appendChild(ccCDTable);
  genericPopUpContentContainer.innerHTML+=`<div class="marginTop2 section-header">Last Bill Details</div>`;
  genericPopUpContentContainer.appendChild(ccLBTable);
  genericPopUpContentContainer.innerHTML+=`<div class="marginTop2 section-header">Card Limit Details</div>`;
  genericPopUpContentContainer.appendChild(ccCardLimitTable);
}
//Insurance functions
function displayPolicyDetails(evt,parentZIndex,policy)
{
  let genericPopUp=createGenericPopUp();
  let genericPopUpContentContainer=genericPopUp.querySelector("#modalCloneBody");
  genericPopUp.style.zIndex=Number(parentZIndex)+1;
  console.log("policy details are",policy);
  let insuranceDetailsTableClone=document.getElementById("insuranceDetailsClone");
  let insuranceDetailsTable=insuranceDetailsTableClone.cloneNode(true);
  insuranceDetailsTable.id+=""+cloneCount++;
  //add all the rows
  insuranceDetailsTable.innerHTML+=`<tr><td><span class="status-key">Policy Number</span><span class="status-value">${policy.policyNumber || "-"}</span></td><td><span class="status-key">Insurer</span><span class="status-value">${policy.insurer || "-"}</span></td></tr>`;
  insuranceDetailsTable.innerHTML+=`<tr><td><span class="status-key">Type of Insurance</span><span class="status-value">${getInsuranceVerticalDescription(policy.vertical)}</span></td><td><span class="status-key">Plan Name</span><span class="status-value">${policy.planName || "-"}</span></td></tr>`;
  insuranceDetailsTable.innerHTML+=`<tr><td><span class="status-key">Status</span><span class="status-value">${policy.status || "-"}</span></td><td><span class="status-key">Policy Holder Name</span><span class="status-value">${policy.policyHolderName || "-"}</span></td></tr>`;
  insuranceDetailsTable.innerHTML+=`<tr><td><span class="status-key">Policy Holder relation with Account Holder</span><span class="status-value">${policy.policyHolderRelation || "-"}</span></td><td><span class="status-key">Sum Insured</span><span class="status-value">${format_bal2(policy.sumInsured) || "-"}</span></td></tr>`;
  insuranceDetailsTable.innerHTML+=`<tr><td><span class="status-key">Start Date</span><span class="status-value">${format_date_fb_adv(policy.startDate) || "-"}</span></td><td><span class="status-key">End Date</span><span class="status-value">${format_date_fb_adv(policy.endDate) || "-"}</span></td></tr>`;
  insuranceDetailsTable.innerHTML+=`<tr><td><span class="status-key">Gross Premium</span><span class="status-value">${format_bal2(policy.grossPremium) || "-"}</span></td><td><span class="status-key">Premium Due Date</span><span class="status-value">${format_date_fb_adv(policy.premiumDueDate) || "-"}</span></td></tr>`;
  insuranceDetailsTable.innerHTML+=`<tr><td><span class="status-key">Premium Frequency</span><span class="status-value">${policy.premiumFrequency || "-"}</span></td><td><span class="status-key">Payment Mode</span><span class="status-value">${policy.paymentMode || "-"}</span></td></tr>`;
  insuranceDetailsTable.innerHTML+=`<tr><td><span class="status-key">Nominee Name</span><span class="status-value">${policy.nomineeName || "-"}</span></td><td><span class="status-key">Nominee Relation</span><span class="status-value">${policy.nomineeRelation || "-"}</span></td></tr>`;
  insuranceDetailsTable.innerHTML+=`<tr><td><span class="status-key">Commission Earned</span><span class="status-value">${policy.commissionEarned || "-"}</span></td><td></td></tr>`;
  genericPopUpContentContainer.innerHTML=``;
  genericPopUpContentContainer.appendChild(insuranceDetailsTable);
  insuranceDetailsTable.classList.remove("hide");
}
function getInsuranceType(vertical)
{
  if(vertical=="-"||!(vertical))
    return "-";
  for(const [k,val] of Object.entries(insuranceTypeMapping))
  {
    if(val.includes(vertical))
    {
      return k;
    }
  }
  return "general";
}
function getInsuranceVerticalDescription(insuranceVertical)
{
  if(!insuranceVertical)
  {
    return "-";
  }
  let descriptionValue=insuranceVerticalDescriptionMapping[insuranceVertical];
  return descriptionValue?descriptionValue:"Couldn't fetch description";
}
function getInsuranceForCustomer(custId,insuranceType)
{
  let genericPopUp=createGenericPopUp();
  let genericPopUpContentContainer=genericPopUp.querySelector("#modalCloneBody");
  let genericPopUpzIndex=window.getComputedStyle(genericPopUp).getPropertyValue("z-index");
  //test for firefox
  if((genericPopUpzIndex==null)||(genericPopUpzIndex==undefined))
  {
    genericPopUpzIndex=window.getComputedStyle(genericPopUp).getPropertyValue("zIndex");
  }
  let func_name = "Insurance_Test";
  if((segregatedInsurancedata)&&(Object.keys(segregatedInsurancedata).length>0))
  {
    let insuranceTable=document.getElementById("insuranceTableClone");
    let insuranceTableClone=insuranceTable.cloneNode(true);
    insuranceTableClone.id+=""+cloneCount++;
    let policyDetails=segregatedInsurancedata[insuranceType];
    if(!policyDetails)
    {
      genericPopUpContentContainer.innerHTML=`This insurance type could not be fetched from integration`;
      return;
    }
    for(let policy of policyDetails)
    {
      let policyRow=document.createElement("tr");
      policyRow.classList.add("clickable");
      policyRow.innerHTML=`<td>${policy.policyNumber||"-"}</td><td>${getInsuranceVerticalDescription(policy.vertical)}</td><td>${policy.insurer||"-"}</td><td>${policy.status||"-"}</td>`;
      policyRow.addEventListener("click",(evt)=>{displayPolicyDetails(evt,genericPopUpzIndex,policy)})
      insuranceTableClone.appendChild(policyRow);
    }
    insuranceTableClone.classList.remove("hide");
    genericPopUpContentContainer.innerHTML=``;
    genericPopUpContentContainer.appendChild(insuranceTableClone);
  }
  else
  {
    call_crm_function(func_name, { custId: custId })
    .then((res) => {
      console.log("inside insurance API", res);
      if(res.code=="success")
      {
        let apiResp=JSON.parse(res.details.output);
        console.log("api resp is",apiResp);
        if(apiResp.error)
        {
          genericPopUpContentContainer.innerHTML=`Error from Insurance system: "${apiResp.error}"`;
          console.log("Error in policy details fetch",apiResp);
          return;
        }
        let insuranceTable=document.getElementById("insuranceTableClone");
        let insuranceTableClone=insuranceTable.cloneNode(true);
        insuranceTableClone.id+=""+cloneCount++;
        if((apiResp.status)&&(apiResp.status=="SUCCESS"))
        {
          let policyDetails=apiResp.policyDetails;
          for(let policy of policyDetails)
          {
            let policyType=getInsuranceType(policy.vertical);
            if(policyType==insuranceType)
            {
              let policyRow=document.createElement("tr");
              policyRow.classList.add("clickable");
              policyRow.innerHTML=`<td>${policy.policyNumber||"-"}</td><td>${getInsuranceVerticalDescription(policy.vertical)}</td><td>${policy.insurer||"-"}</td><td>${policy.status||"-"}</td>`;
              policyRow.addEventListener("click",(evt)=>{displayPolicyDetails(evt,genericPopUpzIndex,policy)})
              insuranceTableClone.appendChild(policyRow);
            }
            if((segregatedInsurancedata)&&(Object.keys(segregatedInsurancedata).includes(policyType))&&(policyType!="-"))
            {
              let typePolicies=segregatedInsurancedata[policyType];
              typePolicies.push(policy);
              segregatedInsurancedata[policyType]=typePolicies;
            }
            else if(policyType!="-")
            {
              if(!segregatedInsurancedata)
              {
                segregatedInsurancedata={};
                segregatedInsurancedata[policyType]=[policy];
              }
              else
              {
                segregatedInsurancedata[policyType]=[policy];
              } 
            }
          }
          insuranceTableClone.classList.remove("hide");
          let tdElems=insuranceTableClone.querySelectorAll("td");
          if(tdElems.length>0)
          {
            genericPopUpContentContainer.innerHTML=``;
            genericPopUpContentContainer.appendChild(insuranceTableClone);
          }
          else
          {
            genericPopUpContentContainer.innerHTML=`This insurance type could not be fetched in integration`;
          }
        }
        else if(apiResp.status)
        {
          genericPopUpContentContainer.innerHTML=`Policy details could not be fetched. Reason from Insurance system: "${apiResp.status}"`;
          console.log("Error in policy details fetch",apiResp);
        }
        else
        {
          genericPopUpContentContainer.innerHTML=`Policy details could not be fetched`;
          console.log("Error in policy details fetch",apiResp);
        }
      }
      else
      {
        genericPopUpContentContainer.innerHTML=`Insurance data couldn't be fetched`;
        console.log("Error in credit card API", res);
      }
      
    })
    .catch((err) => {
      console.log("Error in insurance API", err);
      genericPopUpContentContainer.innerHTML="Insurance data could not be fetched";
    });
  }
  

}
//
//Mutual fund functions
function displayFundDetailView(holdingData,folioNumber)
{
  let genericPopUpClone=createGenericPopUp();
  let mutualFundContainerRef=document.getElementById("mutualPopUpContainer2");
  let mutualFundContainerClone=mutualFundContainerRef.cloneNode(true);
  let fundDetailsTable=mutualFundContainerClone.querySelector("#fundDetailClone");
  let sipDetailsTable=mutualFundContainerClone.querySelector("#sipDetailsTableClone");
  let mutualFundPopUpContainer=genericPopUpClone.querySelector("#modalCloneBody");
  let sipsArr=holdingData.sips;
  if(sipsArr&&sipsArr.length>0)
  {
    let sipRows=``;
    for(let sipData of sipsArr)
    {
      //dateMonthStrToDateNumberStr
      sipRows+=`<tr><td>${sipData.sip_day}</td><td>${sipData.start_date}</td><td>${format_bal2(sipData.amount)}</td></tr>`;
    }
    sipDetailsTable.innerHTML+=sipRows;
    let fundDetailsSt=`<tr><td>${holdingData.mf_name||"-"}</td><td>${folioNumber||"-"}</td><td>${format_bal2(holdingData.invested_amount||"-")}</td><td>${format_bal2(holdingData.current_amount||"-")}</td><td>${format_bal2(holdingData.withdrawable_amount||"-")}</td></tr>`;
    fundDetailsTable.innerHTML+=fundDetailsSt;
  }
  else
  {
    //show sips not found
    mutualFundPopUpContainer.innerHTML=`SIPS not found for the fund`;
    console.error("Sips not found for this holding",holdingData);
  }
  mutualFundContainerClone.id+="_"+genericPopUpCount;
  fundDetailsTable+="_"+genericPopUpCount;
  sipDetailsTable+="_"+genericPopUpCount;
  mutualFundPopUpContainer.innerHTML=``;
  mutualFundPopUpContainer.appendChild(mutualFundContainerClone);
  mutualFundContainerClone.classList.remove("hide");
  genericPopUpCount++;
}
function getMutualFund(panNo)
{
  let genericPopUpClone=createGenericPopUp();
  let mutualFundContainerRef=document.getElementById("mutualPopUpContainer1");
  let mutualFundContainerClone=mutualFundContainerRef.cloneNode(true);
  let userDetailsTable=mutualFundContainerClone.querySelector("#userDetailsTableClone");
  let folioDetailsTable=mutualFundContainerClone.querySelector("#folioDetailsTableClone");
  let mutualFundPopUpContainer=genericPopUpClone.querySelector("#modalCloneBody");
  panNo="ASOPB5666M"; //testing pan
  mutualFundContainerClone.id+="_"+genericPopUpCount;
  userDetailsTable.id+="-"+genericPopUpCount;
  folioDetailsTable.id+="_"+genericPopUpCount;
  mutualFundPopUpContainer.id+="_"+genericPopUpCount;
  let funcIp = {
    pan: panNo
  };
  call_crm_function("mutual_fund_api",funcIp).then((data)=>{
    console.log("Response from mutual fund API is",data);
    if((data.code=="success")||(data.code=="Success"))
    {
      let funcResp=JSON.parse(data.details.output);
      console.log("Function response is",funcResp);
      if(((funcResp.pfwmessage=="Success")||(funcResp.pfwmessage=="success"))||(funcResp.pfwstatus_code==200||funcResp.pfwstatus_code=="200"))
      {
        let mfResp=funcResp.pfwresponse;
        if((mfResp.status_code==200)||(mfResp.status_code=="200"))
        {
          let mfResult=mfResp.result;
          let holdings=mfResult.holdings;
          let userDetails=mfResult.user_details;
          let usrRow=``;
          if((!holdings)||(holdings.length==0))
          {
            mutualFundPopUpContainer.innerHTML=`No holdings found in the integration`;
            return;
          }
          else
          {

            let kycDetails=mfResult.kyc_details;
            let kycStatus="-";
            let nomineeDetails=userDetails.nominee_details;
            let nomineeDob="-";
            let nomineeName="-";
            let accountDetails=mfResult.account_details;
            let accountNumber="-";
            let accountIFSC="-";
            if(nomineeDetails)
            {
              nomineeDob=nomineeDetails.dob || "-";
              nomineeName=nomineeDetails.name || "-";
            }
            if(kycDetails)
            {
              kycStatus=kycDetails.status||"-";
            }
            if(accountDetails&&accountDetails.length>0)
            {
              accountNumber=accountDetails[0].account_number||"-";
              accountIFSC=accountDetails[0].account_ifsc||"-";
            }
            if(!userDetails)
            {
              usrRow=`<tr><td>User details not found in the integration</td></tr>`;
            }
            usrRow=`<tr><td>${userDetails.user_source||"-"}</td><td>${kycStatus}</td><td>${nomineeName}</td><td>${nomineeDob}</td><td>${accountNumber}</td><td>${accountIFSC}</td></tr>`;
            userDetailsTable.innerHTML+=usrRow;
            for(let h of holdings)
            {
              // holdingsRows+=`<tr><td>${h.folio}</td><td>${}</td><td>${}</td></tr>`;
              let foliosArr=h.folio_numbers;
              if((foliosArr)&&(foliosArr.length>0))
              {
                let folio=foliosArr.join(", ");
                holdingRowElem=document.createElement("tr");
                  holdingRowElem.classList.add("clickable");
                  holdingRowElem.innerHTML=`<td>${folio}</td><td>${h.mf_name||"-"}</td><td>${format_bal2(h.current_amount)}</td>`;
                  holdingRowElem.addEventListener("click",(evt)=>{console.log("row clicked",h);
                  displayFundDetailView(h,folio);
                });
                  folioDetailsTable.appendChild(holdingRowElem);
                /*
                for(let folio of foliosArr)
                {
                  holdingRowElem=document.createElement("tr");
                  holdingRowElem.classList.add("clickable");
                  holdingRowElem.innerHTML=`<td>${folio}</td><td>${h.mf_name||"-"}</td><td>${format_bal2(h.current_amount)}</td>`;
                  holdingRowElem.addEventListener("click",(evt)=>{console.log("row clicked",h);
                  displayFundDetailView(h,folio);
                });
                  folioDetailsTable.appendChild(holdingRowElem);
                }
                */
              }
            }
          }
          mutualFundPopUpContainer.innerHTML="";
          if(mutualFundPopUpContainer&&mutualFundContainerClone)
          {
            mutualFundPopUpContainer.appendChild(mutualFundContainerClone);
            mutualFundContainerClone.classList.remove("hide");
          }
        }
        else
        {
          //show error
          let errResp;
          if((mfResp.result)&&(mfResp.result.error))
          {
            errResp=mfResp.result.error;
          }
          mutualFundPopUpContainer.innerHTML=errResp?errResp:"Couldn't fetch mutual fund details";
          console.error("error in mutual fund API",mfResp);
        }
      }
      else
      {
        //show error
        mutualFundPopUpContainer.innerHTML="Couldn't fetch mutual fund details";
        console.error("error in mutual fund API",funcResp);
      }
    }
    else
    {
      //show error
      mutualFundPopUpContainer.innerHTML=`Couldn't fetch mutual fund details`;
      console.error("Error in mutual fund API",data);
    }
  }).catch((err)=>{
    mutualFundPopUpContainer.innerHTML=`Couldn't fetch mutual fund details`;
    console.error("Error in mutual fund API",err);
    //show error
  }).finally(()=>{

    //After data loading
    
  });

  genericPopUpCount++;

}
// Average Balance Functions
function isEarlierDate(date1,date2,separator)
{
  let year1=Number(date1.split(separator)[0]);
  let month1=Number(date1.split(separator)[1]);
  let day1=Number(date1.split(separator)[2]);
  let year2=Number(date2.split(separator)[0]);
  let month2=Number(date2.split(separator)[1]);
  let day2=Number(date2.split(separator)[2]);
  if(year1<year2)
  {
    return true;
  }
  else if(year1>year2)
  {
    return false;
  }
  else
  {
    if(month1<month2)
    {
      return true;
    }
    else if(month1>month2)
    {
      return false;
    }
    else
    {
      if(day1<day2)
      {
        return true;
      }
      else
      {
        return false; 
      }
    } 
  }
}
function populateAverageBalanceForPopUps(acid)
{
  //population id: accAvgBal_${selectedAcid}
  let selectedAverageBalance;
  let outputId="accAvgBal_"+acid;
  if(Object.keys(averageBalances).includes(acid))
  {
    selectedAverageBalance=averageBalances[acid];
    selectedAverageBalance=selectedAverageBalance[selectedAverageBalance.length-1];
    let latestAvgBalanceStartDate=selectedAverageBalance.startDate;
    let latestAvgBalanceEndDate=selectedAverageBalance.endDate;
    let balsign="";
    if(selectedAverageBalance.balance<0)
    {
      balsign="-";
    }
    document.getElementById(outputId).innerHTML=`${balsign+format_bal2(selectedAverageBalance.balance)} (${format_date(latestAvgBalanceStartDate)} - ${format_date(latestAvgBalanceEndDate)})`;
  }
  else
  {
    let funcParams = {
      acid: acid,
      page:"1"
    };
    call_crm_function("get_average_balance_by_acc_num", funcParams).then((resp)=>{
      console.log("average balance resp",resp);
      if((resp.code=="success")&&(resp.details.output))
      {
        let apiResp=JSON.parse(resp.details.output);
        if(apiResp.status=="success")
        {
          let avgBalData=JSON.parse(apiResp.response);
          if((!avgBalData)||(avgBalData.length==0))
          {
            // show average balance not found
            document.getElementById(outputId)="Average Balance could not be found";
          }
          else
          {
            console.log("Average balance data is",avgBalData);
            let avgBalRow=avgBalData[0].data[0];
            if(!avgBalRow)
            {
              document.getElementById(outputId).innerHTML=`Average Balance not found`;
              return;
            }
            console.log("Average Balance row",avgBalRow);
            let avgBalDs=[];
            for(i=1;i<=12;i++)
            {
              if((avgBalRow["Average_Balance_"+i]==0||avgBalRow["Average_Balance_"+i])&&(avgBalRow["Average_Balance_"+i+"_STARTDATE"])&&(avgBalRow["Average_Balance_"+i+"_ENDDATE"]))
              {
                let monthBal={};
                monthBal["balance"]=avgBalRow["Average_Balance_"+i];
                monthBal["startDate"]=avgBalRow["Average_Balance_"+i+"_STARTDATE"].split(" ")[0];
                monthBal["endDate"]=avgBalRow["Average_Balance_"+i+"_ENDDATE"].split(" ")[0];
                avgBalDs=insertMonthBal(avgBalDs,monthBal);
              }
            }
            console.log("Average Balance Ds is",avgBalDs);
            console.log("latest average balance",avgBalDs[avgBalDs.length-1]);
            averageBalances[acid]=avgBalDs;
            let latestAvgBalance=avgBalDs[avgBalDs.length-1];
            let latestAvgBalanceStartDate=latestAvgBalance.startDate;
            let latestAvgBalanceEndDate=latestAvgBalance.endDate;
            let balsign="";
            if(latestAvgBalance.balance<0)
            {
              balsign="-";
            }
            document.getElementById(outputId).innerHTML=`${balsign+format_bal2(latestAvgBalance.balance)} (${format_date(latestAvgBalanceStartDate)} - ${format_date(latestAvgBalanceEndDate)})`;
          }
        }
        else
        {
          //error
          document.getElementById(outputId).innerHTML=`Average Balance couldn't be found`;
        }
      }
      else
      {
        //error
        document.getElementById(outputId).innerHTML=`Average Balance couldn't be found`;
      }
    }).catch((err)=>{
      //error in handling average balance
      console.error("Error in Average Balance fetch",err);
      document.getElementById(outputId).innerHTML=`Average Balance couldn't be found`;
    });
  }
  

}
function insertMonthBal(avgBalDs,currMonthBal)
{
  let avgBalLen=avgBalDs.length;
  let i=0;
  let newArr=[];
  if(avgBalLen==0)
  {
    avgBalDs.push(currMonthBal);
    return avgBalDs;
  }
  while((i<avgBalLen)&&(isEarlierDate(avgBalDs[i]["startDate"],currMonthBal["startDate"],"-")))
  {
    newArr.push(avgBalDs[i]);
    i++;
  }
  newArr.push(currMonthBal);
  console.log("pushed current balance",currMonthBal);
  while(i<avgBalLen)
  {
    newArr.push(avgBalDs[i]);
    i++;
  }
  return newArr;
}
//
//Notes changes

function editNote(id,message){
  
  messageDiv = message.closest('.message');
  // make text editable
  old_content = document.getElementById(id+"_content");
  old_text = old_content.value;
  console.log(old_text);
  // save it somewhere
  // TODO
  old_content.removeAttribute("readonly");
  old_content.classList.add("message-body");
  old_content.classList.remove("message-body-readonly");
  console.log(old_content);
  // change icon save and cancel
  const editButton = messageDiv.querySelector('.edit-button');
  const deleteButton = messageDiv.querySelector('.delete-button');

  // console.log(editButton,deleteButton);
  // editButton.innerHTML = `<i class='fa fa-check blue' style="font-size: 13px;padding: 2px;" ></i>`;
  // editButton.classList.add("edit-button-not-allowed");
  // editButton.addEventListener('click',() => {});
  // deleteButton.innerHTML = `<i class='fa fa-xmark blue' style="font-size: 13px;padding: 2px;" ></i>`;
  // deleteButton.addEventListener("click", ()=>{
  //   // call cancel
  //   cancelNote(id, message);
  // });

  // hide the delete and edit unhide update and cancel
  const updateButton = messageDiv.querySelector('.update-button');
  const cancelButton = messageDiv.querySelector('.cancel-button');

  updateButton.classList.remove("hide-button");
  cancelButton.classList.remove("hide-button");
  editButton.classList.add("hide-button");
  deleteButton.classList.add("hide-button");


  
  old_content.addEventListener('change',() => {
    cur_text  = document.getElementById(id+"_content").value;
    console.log(cur_text,old_text, old_text == cur_text);
    if (old_text != cur_text) {
      updateButton.classList.remove("update-button-not-allowed");
    }else{
      updateButton.classList.add("update-button-not-allowed");
    }
  })

}

function updateNote(id,message){
  // update note
  ZOHO.CRM.CONFIG.getCurrentUser().then(function(data){
    console.log("Current User :: ",data);
    content_text = document.getElementById(id+"_content").value;
    content_text = format_content(content_text);
    console.log(content_text);
    timeStamp = document.getElementById(id+"_chat-times");
    attach_section = document.getElementById(id+"_attach");
    content_text = content_text.content + `- CreatedBy : ${timeStamp.getAttribute("createdby")} - Attachments : ${attach_section.getAttribute("attach")}`;
    user = data.users[0];
    let conn_name = "zohocrm";
    let base_url =
      "https://ucrmapi.unionbankofindia.co.in/crm/v5/Contacts/"+rid+"/Notes/"+id; //No I18N
    console.log(base_url);
    const params = {
      "data": [
        {
            "Note_Content": content_text + `- ModifiedBy : ${user.full_name}`
        }
    ]
    };
    console.log(params);
    var req_data = {
      headers: {}, //No I18N
      method: "PUT", //No I18N
      url: base_url, //No I18N
      parameters: params
    };
    // document.getElementById("add-note").value = "";
    ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
      .then(function (data) {
        console.log(data);
        // getNotes();
        // update modified 
        if(data.code != "SUCCESS"){
          show_msg_box("Update Failed! Please try again", "red",3);
          console.log("Message Update Error : ", data);
          return;
        }if(data.details.statusMessage.data[0].code != "SUCCESS"){
          show_msg_box("Update Failed! Please try again", "red",3);
          console.log("Message Update Error : ", data.details.statusMessage.data);
          return;
        }
        timeStamp.innerText = timeStamp.innerText.split(" - ")[0] +" - "+ user.full_name + " (Edited)";
        cancelNote(id,message);
      }).catch((e) => {
        show_msg_box("Update Failed! Please try again", "red",3);
        console.log("Message Update Error : ", e);
      });
  });
}
function cancelNote(id,message){
  messageDiv = message.closest('.message');
  old_content = document.getElementById(id+"_content");
  old_content.setAttribute("readonly","true");
  old_content.classList.remove("message-body");
  old_content.classList.add("message-body-readonly");

  const editButton = messageDiv.querySelector('.edit-button');
  const deleteButton = messageDiv.querySelector('.delete-button');

  // console.log(editButton,deleteButton);
  // editButton.innerHTML = `<i class='fa fa-pen blue' style="font-size: 13px;padding: 2px;color: grey" ></i>`;
  // editButton.classList.remove("edit-button-not-allowed");
  // editButton.onclick = function() {
  //   console.log("Delete is called");
  //   editNote(id,message);
  // };
  // deleteButton.innerHTML = `<i class='fa fa-trash blue' style="font-size: 13px;padding: 2px;" ></i>`;

  // deleteButton.onclick = function() {
  //   console.log("Delete is called");
  //   deleteNote(id);
  // };

  const updateButton = messageDiv.querySelector('.update-button');
  const cancelButton = messageDiv.querySelector('.cancel-button');

  updateButton.classList.add("hide-button");
  cancelButton.classList.add("hide-button");
  editButton.classList.remove("hide-button");
  deleteButton.classList.remove("hide-button");
}
function confirmNoteDelete(id)
{
  let popUpContent=document.getElementById("popContent");
  let actionTray=document.getElementById("actionTray");
  let actionbtn=document.getElementById("actionBtnClone").cloneNode(true);
  let cancelbtn=document.getElementById("cancelBtnClone").cloneNode(true);
  popUpContent.innerHTML="Are you sure you want to delete the note?";
  actionTray.innerHTML="";
  actionbtn.id="noteDeleteBtn";
  actionbtn.innerHTML="Delete";
  cancelbtn.id="cancelBtn";
  cancelbtn.addEventListener("click",()=>{
    close_pop_up2('general_pop_up','general_pop_up_backdrop');
  });
  actionbtn.addEventListener("click",()=>{
    close_pop_up2('general_pop_up','general_pop_up_backdrop');
    deleteNote(id);
  });
  actionTray.appendChild(actionbtn);
  actionTray.appendChild(cancelbtn);
  showPopUp("general_pop_up","general_pop_up_backdrop");

}
async function deleteNote(id){
  // get id delete the note and call getNote()
  // check if any attachments
  attachment_section = document.getElementById(id+"_attach");
  attachment_list = attachment_section.getAttribute("attach").trim().split(",");
  console.log("Deleting Attachment List : ", attachment_list);

  if (attachment_list.length > 0){
    // no attachments to delete
    for (const e of attachment_list){
      if(e == "") continue; // skip blanks
      let conn_name = "zohocrm";
      let base_url =
        "https://ucrmapi.unionbankofindia.co.in/crm/v5/Contacts/"+rid+"/Attachments/"+e; //No I18N
      console.log(base_url);
      var req_data = {
        headers: {}, //No I18N
        method: "DELETE", //No I18N
        url: base_url, //No I18N
      };
      response = await ZOHO.CRM.CONNECTION.invoke(conn_name, req_data);
      console.log("Delete response : ",response);
      try {
        // console.log("response delete test : ",response.details.statusMessage.data[0].code);
        if(response.code != "SUCCESS"){
          show_msg_box("Attachment Delete Failed", "red",5);
        }else if (response.details.statusMessage.data[0].code != "SUCCESS"){
          show_msg_box("Attachment Delete Failed", "red",5);
        }
      } catch (error) {
        show_msg_box("Attachment Delete Failed", "red",5);
      }
    }
  }
  
  // delete note
  let conn_name = "zohocrm";
    let base_url =
      "https://ucrmapi.unionbankofindia.co.in/crm/v5/Contacts/"+rid+"/Notes?ids="+id; //No I18N
    console.log(base_url);
    var req_data = {
      headers: {}, //No I18N
      method: "DELETE", //No I18N
      url: base_url, //No I18N
    };
    ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
      .then(function (data) {
        console.log(data);
        if (data.code != "SUCCESS") {
          show_msg_box("Delete Failed! Please try again", "red",3);
          console.log("Message Delete Error : ", data);
          return;
        }if(data.details.statusMessage.data[0].code != "SUCCESS"){
          show_msg_box("Delete Failed! Please try again", "red",3);
          console.log("Message Delete Error : ", data.details.statusMessage.data);
          return;
        }
        show_msg_box("Message Delete Successfull", "green",3);
        getNotes();
      }).catch((e) => {
        show_msg_box("Delete Failed! Please try again", "red",3);
        console.log("Message Delete Error : ", e);
      });
}
async function sendNotes(){
  // add notes to the end and call fetch 
  // get all data
  // get header 
  
  const text = document.getElementById("add-note").value;
  const pattern = /\*\*(.*?)\*\*/;
  const matches = text.match(pattern);
  console.log("Notes HEADERS",matches);

  hdr = "";
  if (matches) {
    hdr = matches[1];
    console.log(hdr);
  }

  let firstMatch = true;
  const content = text.replace(pattern, (match) => {
    if (firstMatch) {
      firstMatch = false;
      return match;
    }
    return "";
  });

  console.log("Notes Content:: ",content);
  // let conn_name = "zohocrm";
  // let base_url =
  //   "https://ucrmapi.unionbankofindia.co.in/crm/v5/users?type=CurrentUser";
  // console.log(base_url);
  // var req_data = {
  //   headers: {}, //No I18N
  //   method: "GET", //No I18N
  //   url: base_url, //No I18N
  // };
  // ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
  //   .then(function (data) {
  //     console.log("Notes current user",data);
  //     if(data.code != "SUCCESS"){
  //       // dont populate
  //     }
  //     else if(data.details.status != "true"){
  //       // dont populate
  //     }
  //     else{
  //       data = data.details.statusMessage.users[0];
  //       const userName = data.full_name;
        
  //     }
  //   });

  // validate if note content is not empty
  if(content == "") {
    show_msg_box("Please type to add note..", "yellow", 5);
    return;
  }

  // Add attachment if any
  upload_count = 0
  attach_file_id_list = [];
  for (const ele of attach_list){
    // const ele = attach_list[i];
    attach_resp = await call_upload_attachment(ele);
    console.log("Attach response ",attach_resp);
    file_resp = attach_resp.data[0];
    try {
      console.log("Attach response code",file_resp.code);
      if( file_resp.code != "SUCCESS"){
        // failed upload attach message
        upload_count += 1;
        close_msgbox();
        show_msg_box(upload_count +" Upload Failed", "red",5);
        console.log("Attachment Error : ", file_resp);
      }
      // Success
      // remove from list
      removeFilefromList(ele.id);
      details = file_resp.details;
      const AttachId = details.id;
      attach_file_id_list.push(AttachId);
    } catch (error) {
      show_msg_box("Something went wrong!", "red",5);
      console.log("Attachment Fail before sending message : (error) ", error);
      return;
    }
  }

  // Send message with attachment IDs
  ZOHO.CRM.CONFIG.getCurrentUser().then(function(data){
    console.log("Current User :: ",data);
    if (data == null) {
      show_msg_box("User has Logged out", "yellow",5);
      console.log("Error while fetching Current user : ", data);
    }
    user = data.users[0];
    let conn_name = "zohocrm";
    let base_url =
      "https://ucrmapi.unionbankofindia.co.in/crm/v5/Contacts/"+rid+"/Notes"; //No I18N
    console.log(base_url);
    const params = {
      "data": [
        {
            "Note_Title": hdr,
            "Note_Content": content + `- CreatedBy : ${user.full_name} - Attachments : ${attach_file_id_list.join(",")}`
            ,
            "Parent_Id": rid,
            "se_module": "Contacts",
        }
    ]
    };
    var req_data = {
      headers: {}, //No I18N
      method: "POST", //No I18N
      url: base_url, //No I18N
      parameters: params
    };
    document.getElementById("add-note").value = "";
    ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
      .then(function (data) {
        console.log("Notes Added response : ",data);
        if(data.code != "SUCCESS"){
          show_msg_box("Failed Adding Notes!!" , "red", 5);
          console.log("Error Adding notes : ", data);
          return;
        }if(data.details.statusMessage.data[0].code != "SUCCESS"){
          show_msg_box("Failed Adding Notes!!" , "red", 5);
          console.log("Error Adding notes : ", data.details.statusMessage.data);
          return;
        }
        getNotes();
      }).catch((e) => {
        show_msg_box("Failed Adding Notes!!" , "red", 5);
        console.log("Add note Error : ", e);
      });
  });
  
}
// Upload Attachment
async function call_upload_attachment(ele){
  file = ele.File;
  const blob = new Blob([file], { type: file.type });
  var req_data = {
    "Entity" : "Contacts",
    "RecordID": rid[0],
    "File":
      {
        "Name":file.name,
        "Content":blob
      },
    connectionLinkName: 'zohocrm',
  };

  response = await ZOHO.CRM.API.attachFile(req_data);
  return response;
  // .then(function (data) {
  //   console.log("Attachment Data : ",data);
  //   // unhide Uparrow and append file
  //   file_resp = data.data[0];
    
  //   try {
  //     // Failure
  //     if( file_resp[0].code != "SUCCESS"){
  //       // failed upload attach message
  //       show_msg_box("Upload Failed!!", "rgb(215,74,73)",5);
  //       console.log("Attachment Error : ", file_resp);
  //     }
  //     // Success
  //     details = file_resp[0].details;
  //     const AttachId = details.id;
  //     // Unhide the up-arrow amd 
  //     document.getElementById("attached-icon").classList.remove("hide-button");
  //     show_msg_box("Upload Successfull","rgb(92,194,162)",3);
  //     // append to attach list
  //     append_to_attach_list(AttachId,file);
  //   } catch (error) {
  //     show_msg_box("Something went wrong!", "rgb(215,74,73)",5);
  //   }
  // });
}
// Popup Toggle
function togglePopupDropdown(breadCrumb) {
  var dropdown = document.querySelector(".dropdown-container");
  dropdown.classList.toggle("active");
}
// Attachment toggle
function toggleAttachDropdown() {
  var dropdown = document.querySelector(".dropdown-attachment");
  dropdown.classList.toggle("active");
}
function toggleAlrAttachDropdown() {
  var dropdown = document.querySelector(".dropdown-attached");
  dropdown.classList.toggle("active");
}

// Fetch file based on type in attachment dropdown
function addItem(itemType) {
  var dropdownContent = document.getElementById("dropdownContent");
  var fileInput = document.createElement("input");
  fileInput.type = "file";
  fileInput.accept = itemType === "Images" ? "image/*" : itemType === "Videos" ? "video/*" : "application/*";
  dropdownContent.appendChild(fileInput);
  fileInput.addEventListener("change", function() {
    if (fileInput.files.length > 0) {
      console.log("Selected file name: " + fileInput.files[0].name);
      // upload and attach file to UI
      // add to attachment
      let conn_name = "zohocrm";
      // let base_url =
      //   "https://ucrmapi.unionbankofindia.co.in/crm/v5/Contacts/"+rid+"/Attachments"; //No I18N
      // console.log(base_url);
      // var req_data = {
      //   headers: {}, //No I18N
      //   method: "POST", //No I18N
      //   url: base_url //No I18N
      // };
      // ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
      //   .then(function (data) {
      //     console.log("Attachment Status : ", data);
      // });
      file = fileInput.files[0];
      console.log(file,file.type, file.name);
      const fileSizeInMb = file.size / (1024 * 1024);
      if (fileSizeInMb > attach_file_size) {
        show_msg_box("Maximum of " + attach_file_size + "MB is allowed", "yellow", 5);
        return;
      }
      if (attach_list.length > 1) {
        show_msg_box("Only two files can be attached simultaneously.", "blue", 5);
        return;
      }else{
        fileId = generateID();
        // unhide attach dropdown
        document.getElementById("attached-drop-down-container").classList.remove("hide-button");
        attach_list.push({
          "File":file,
          "id": fileId
        });
        console.log(fileId);
        append_to_attach_list(fileId);
      }
     

      // console.log("Form Data : ",formData);
      // var upload_data = {
      // parameters: formData,
      // headers: {
      //   "Content-Type": "multipart/form-data",
      // },
      // method: "POST",
      // url: base_url,
      // param_type: 2,
      // };

      // const blob = new Blob([file], { type: file.type });
      // var req_data = {
      //   "Entity" : "Contacts",
      //   "RecordID": rid[0],
      //   "File":
      //     {
      //       "Name":file.name,
      //       "Content":blob
      //     }
      // }

      // ZOHO.CRM.API.attachFile(req_data).then(function (data) {
      //     console.log("Attachment Data : ",data);
      //     // unhide Uparrow and append file
      //     file_resp = data.data[0];
          
      //     try {
      //       // Failure
      //       if( file_resp[0].code != "SUCCESS"){
      //         // failed upload attach message
      //         show_msg_box("Upload Failed!!", "rgb(215,74,73)",5);
      //         console.log("Attachment Error : ", file_resp);
      //       }
      //       // Success
      //       details = file_resp[0].details;
      //       const AttachId = details.id;
      //       // Unhide the up-arrow amd 
      //       document.getElementById("attached-icon").classList.remove("hide-button");
      //       show_msg_box("Upload Successfull","rgb(92,194,162)",3);
      //       // append to attach list
      //       append_to_attach_list(AttachId,file);
      //     } catch (error) {
      //       show_msg_box("Something went wrong!", "rgb(215,74,73)",5);
      //     }
      //   });

    }
  });
  fileInput.click(); // Trigger the file input to open
  fileInput.style.display = "none"; // Hide the file input
  console.log("Selected Item: ",fileInput);
}
function generateID() {
  // Generate a random number between 1,000,000,000 and 9,999,999,999
  const min = 1000000000;
  const max = 9999999999;
  const randomNum = Math.floor(Math.random() * (max - min + 1)) + min;

  // Convert the random number to a string
  const randomNumStr = randomNum.toString();

  return randomNumStr;
}

function append_to_attach_list(id){
  // append to list and create a delete option to remove from list
  console.log("Attach List", attach_list);
  attach_dropdown = document.getElementById("dropdownAttachedContent");
  attach_dropdown.innerHTML = "";
  if (attach_list.length == 0) {
    // hide and clear attach dropdown
    document.getElementById("attached-drop-down-container").classList.add("hide-button");
    return;
  }
  for (let i = 0; i < attach_list.length; i++) {
    const element = attach_list[i];
    console.log("Attach dropdown : ", id, element.id);
      file_type = element.File.name.split(".");
      file_type = file_type[file_type.length-1];
      file_name = element.File.name.length >= 17 ? element.File.name.slice(0,15) + ".." : element.File.name;
      attach_dropdown.innerHTML += `
      <a class="attach-top" href="#" ><i class='fa fa-${getIcon(file_type)}' style="cursor:pointer" ></i><div class="space"></div><p class="attach-text">${file_name}</p><div class="space"></div><i class='fa fa-xmark' onclick="removeFilefromList('${id}')" style="cursor:pointer" ></i></a>
      `;
  }
}
function removeFilefromList(fileId){
  if (attach_list.length == 1) {
    toggleAlrAttachDropdown();
    attach_list = [];
    append_to_attach_list(""); // clear attach dropdown
    return;
  }
  for (let i = 0; i < attach_list.length; i++) {
    const element = attach_list[i];
    if(fileId == element.id) attach_list = attach_list.slice(0,i).concat(attach_list.slice(i + 1));
  }
  append_to_attach_list(""); // clear attach dropdown
}
function getIcon(file_type){
  image_list = ["png","jpg","jpeg","svg"];
  doc_list = ["doc","txt","pdf"];
  excel = ["xlsx","xls","excel"];
  // zip = ["zip","rar"];
  if (image_list.includes(file_type)) return "image"
  if (doc_list.includes(file_type)) return "file"
  if (excel.includes(file_type)) return "file-excel"
  else return "file";
}
var timerInteval;
function show_msg_box(msg,color,timer){

  color_list = {
    "red": "rgb(215,74,73)",
    "yellow": "rgb(236,191,88)",
    "green": "rgb(92,194,162)",
    "blue": "rgb(110,178,198)"
  }
  // color - #red, #green
  // timer - 2sec, 3sec, 5sec
  close_msgbox();
  timer = timer || 0;
  msgbox = document.getElementById("chat-message-box-container");
  msgbox.style.backgroundColor = color_list[color];
  para = document.getElementById("chat-msg-text");
  para.innerText = msg;
  msgbox.classList.remove("hide-button");
  
  if(timer != 0){
    timerInteval = setInterval(()=> {
      close_msgbox();
      console.log("msg box closed");
      clearInterval(timerInteval);
    },timer * 1000);
  }
}
function close_msgbox(){
  // hide the msg box
  msgbox = document.getElementById("chat-message-box-container");
  msgbox.classList.add("hide-button")
  clearInterval(timerInteval);
}

function format_content(n){
  //Content Created C Attach A Modified M
  console.log(n);
  // split by ""- CreatedBy : ""
  content = n.split("- CreatedBy : ")[0] || "";
  modified = n.split("- ModifiedBy : ")[1] || "";
  created = n.split("- Attachments :")[0].split("- CreatedBy : ")[1] || "";
  attachments = n.split("- ModifiedBy : ")[0].split("- Attachments : ")[1] || "";
  content_list = {content,modified,created,attachments};
  console.log("Formatted Content List",content_list);
  return content_list;
}
function dummyDownloadMsg(msg){
  close_msgbox();
  show_msg_box(msg,"blue",5)
}
function baseNotesMsg(){
  base_msg = `
  <div class="message">
    <div class="bubble" style="align-">
      <p>No Notes Available</p>
    </div>
  </div>
  `;

  return base_msg;
}
function fetchAttachBuilder(attachments){
  console.log("Attachment Builder : ",attachments);
  if (attachments.length == 0) {
    return "";
  }
  attachments = attachments.trim().split(",");
  console.log("List of attachments : ",attachments);
  attach_body = "";
  for (let i = 0; i < attachments.length; i++) {
    const ele = attachments[i];
    console.log("AttachId : ",ele);
    if (ele == "") {
      continue;
    }
    attach_body += `
    <div class="file-section" onclick="downloadAttachment('${ele}')">
          <i class="fa fa-download"></i>
          <a href="#" class="file-link">Attachment ${i+1}</a>
        </div>
    `;
    //<div class="space"></div>
  }
  return attach_body;
}
function downloadAttachment(attachId){
  let conn_name = "zohocrm";
  let base_url =
    "https://ucrmapi.unionbankofindia.co.in/crm/v5/Contacts/"+rid+"/Attachments?fields=$file_id,id,Size,File_Name"; //No I18N
  console.log(base_url);
  var req_data = {
    headers: {}, //No I18N
    method: "GET", //No I18N
    url: base_url, //No I18N
  };
  ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
    .then(function (response) {
      console.log(response);
      try {
        if (response.code != "SUCCESS") {
          show_msg_box("Attachment Download Failed", "red",5);
        }else{
          try {
            if(response.details.status != "true"){
              show_msg_box("Attachment Download Failed","red",5);
            }else{
              file_list = response.details.statusMessage.data;
              file_id = "";
              fileName = "";
              for (const d of file_list){
                if (attachId == d.id){
                  file_id = d["$file_id"];
                  fileName = d.File_Name;
                  break;
                }
              }
              if (file_id == "") {
                show_msg_box("Attachment not Found", "red",5);
              }else{
                console.log("File Downloading...");
                ZOHO.CRM.API.getFile({id:file_id}).then((data) => {
                  console.log("File binary Data : ",data); // remove this after testing
                  const url = URL.createObjectURL(data);
                  const a = document.createElement("a");
                  a.href = url;
                  a.download = fileName;
                  a.style.display = "none";
                  document.body.appendChild(a);
                  a.click();
                  document.body.removeChild(a);
                  URL.revokeObjectURL(url);
                });
              }
              // show_msg_box("Download Successfull","rgb(92,194,162)",3);
            }
          } catch (error) {
            show_msg_box("Attachment Download Failed", "red",5);
            console.log("Attachmet Download ", error);
          }
        }
      } catch (error) {
        show_msg_box("Attachment Download Failed", "red",5);
        console.log("Attachmet Download ", error);
      }
      // for (const k of Object.keys(data)){
      //   console.log(data[k]);
      // }
    });
}
function displayGlowLoaders(parentContainerId)
{
  let parentElem=document.getElementById(parentContainerId);
  for(let i=0;i<=6;i++)
  {
    parentElem.innerHTML+=glowLoader;
  }
}
function getNotes(){
  // fetch all notes and populate
  // console.log("#---------------------------------#");
  displayGlowLoaders("chat-container");
  let conn_name = "zohocrm";
  let base_url =
    "https://ucrmapi.unionbankofindia.co.in/crm/v5/Contacts/"+rid+"/Notes?fields=Owner,Created_Time,Modified_Time,$attachments,Parent_Id,$editable,$se_module,Modified_By,id,Created_By,Note_Title,Note_Content,is_shared_to_client,size,$voice_note"; //No I18N
  console.log(base_url);
  var req_data = {
    headers: {}, //No I18N
    method: "GET", //No I18N
    url: base_url, //No I18N
  };
  ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)
    .then(function (data) {
      console.log("Notes Data::: ",data);
      // populate notes
      chat_row = "";
      if(data.code != "SUCCESS"){
        // dont populate
      }
      else if(data.details.status != "true"){
        // dont populate
      }else if (data.details.statusMessage == ""){
        // empty notes
        chat_container = document.getElementById("chat-container");
        chat_container.innerHTML = baseNotesMsg();
      }
      else{
        data = data.details.statusMessage.data;
        console.log(data);
        for (let i = 0; i < data.length; i++) {
          console.log("Notes Content : ",data[i].Note_Content);
          note_data = format_content(data[i].Note_Content);
          console.log(note_data);
          owner_name = data[i].Owner.name;
          if(note_data.modified != "") owner_name = note_data.modified + " (Edited)";
          else owner_name = note_data.created != "" ? note_data.created : owner_name;
          
          if(data[i].Note_Title != null){

        
          chat_row += `
          <div class="message">
                      <div class="bubble">
                        <div class="button-container">
                          <button class="edit-button" onclick='editNote(${data[i].id},this)'><i class='fa fa-pen blue' style="font-size: 13px;
    padding: 2px;" ></i></button>
                          <button class="delete-button" onclick='confirmNoteDelete(${data[i].id})'><i class='fa fa-trash blue' style="font-size: 13px;
    padding: 2px;" ></i></button>
                          <button class="update-button hide-button update-button-not-allowed" onclick='updateNote(${data[i].id},this)'><i class='fa fa-check blue' style="font-size: 13px;
    padding: 2px;" ></i></button>
                          <button class="cancel-button hide-button" onclick='cancelNote(${data[i].id},this)'><i class='fa fa-xmark blue' style="font-size: 13px;
    padding: 2px;" ></i></button>
                        </div>
                        <h4 id='${data[i].id}_hdr'>${data[i].Note_Title}</h4>
                        <input type='text' class='message-body-readonly' readonly id='${data[i].id}_content' value='${note_data.content}'>
                        <div class="attached-section" id="${data[i].id}_attach" attach="${note_data.attachments}">
                          ${fetchAttachBuilder(note_data.attachments || "") || ""}
                        </div>
                      </div>
                      <span id="${data[i].id}_chat-times" class="time" createdBy="${note_data.created}" modifiedBy="${note_data.modified}">${format_date(data[i].Created_Time)} - ${owner_name}</span>
                    </div>
          `;
          }else{
            chat_row += `
          <div class="message">
                      <div class="bubble">
                        <div class="button-container">
                          <button class="edit-button" onclick='editNote(${data[i].id},this)'><i class='fa fa-pen blue' style="font-size: 13px;
    padding: 2px;" ></i></button>
                          <button class="delete-button" onclick='confirmNoteDelete(${data[i].id})'><i class='fa fa-trash blue' style="font-size: 13px;
    padding: 2px;" ></i></button>
                          <button class="update-button hide-button update-button-not-allowed" onclick='updateNote(${data[i].id},this)'><i class='fa fa-check blue' style="font-size: 13px;
    padding: 2px;" ></i></button>
                          <button class="cancel-button hide-button" onclick='cancelNote(${data[i].id},this)'><i class='fa fa-xmark blue' style="font-size: 13px;
    padding: 2px;" ></i></button>
                        </div>
                        <input type='text' class='message-body-readonly' readonly id='${data[i].id}_content' value='${note_data.content}'>
                        <div class="attached-section" id="${data[i].id}_attach" attach="${note_data.attachments}">
                          ${fetchAttachBuilder(note_data.attachments || "") || ""}
                        </div>
                      </div>
                      <span id="${data[i].id}_chat-times" class="time" createdBy="${note_data.created}" modifiedBy="${note_data.modified}">${format_date(data[i].Created_Time)} - ${owner_name}</span>
                    </div>
          `;
          }
        }
        chat_container = document.getElementById("chat-container");
        chat_container.innerHTML = chat_row
        chat_container.scrollTop = chat_container.scrollHeight;
      }
      
    });
}

//Functions for statement / certificates feature
function generateStatementCert(btnRef,acctDropDown,fromDateElem,toDateElem,serviceOptionStr,outputContainer,logMsgId)
{
  let selectedVal;
  let fromDateStr=reverseDateStr(fromDateElem.value);
  let toDateStr=reverseDateStr(toDateElem.value);
  let serviceCodesMap={
    "Account Statement":"0",
    "Interest Certificate - Deposit":"1",
    "Interest Certificate - Loans":"2"
  };
  let serviceCode=serviceCodesMap[serviceOptionStr];
  //Bring output container & input elements to initial state with no content & status-based css classes
  outputContainer.innerHTML='';
  outputContainer.classList.remove("slide-down-appear-cls");
  outputContainer.classList.remove("sr-subsection-success");
  outputContainer.classList.remove("error-msg-sr");
  outputContainer.classList.remove("shake");
  acctDropDown?.classList.remove("shake");
  fromDateElem?.classList.remove("shake");
  toDateElem?.classList.remove("shake");
  //
  //Checking for mandatory inputs before firing API
  isInputsValid=true;
  if(acctDropDown)
  {
    selectedVal=acctDropDown.getAttribute("value");
    if(!selectedVal)
    {
      acctDropDown.classList.add("shake");
      isInputsValid=false;
      setTimeout(()=>{acctDropDown.classList.remove("shake");},500);
    }
  }
  if(fromDateElem && !fromDateElem.value)
  {
    fromDateElem.classList.add("shake");
    isInputsValid=false;
  }
  if(toDateElem && !toDateElem.value)
  {
    toDateElem.classList.add("shake");
    isInputsValid=false;
  }
  if(!isInputsValid)
  {
    outputContainer.innerHTML="Please fill in mandatory inputs";
    outputContainer.classList.add("error-msg-sr");
    outputContainer.classList.add("slide-down-appear-cls");
    setTimeout(()=>{outputContainer.classList.remove("slide-down-appear-cls");},500);
    return;
  }
  //
  console.log("Generating statement / certificate",fromDateStr,toDateStr);
  let btnLoader=btnRef.querySelector("#circular_loader");
  //check to not trigger API when button was alread loaded
  if(btnLoader)
  {
    return;
  }
  btnRef.classList.add("ldr");
  btnRef.innerHTML+=circular_loader;

  let accountNumber;
  let p={
    customerId: custid,
    customerEmail:mail_for_desk,
    startDate:fromDateStr,
    endDate:toDateStr,
    serviceOption:serviceCode
  };
  if(acctDropDown)
  {
    let selectedAcct=acctDropDown.getAttribute("value");
    if(selectedAcct)
    {
      p["accountNumber"]=selectedAcct;
      accountNumber=selectedAcct;
    }
  }
  let fn_name="";
  if(isUatInstance)
  {
    fn_name="certificate_statement_Api";
  }
  else
  {
    fn_name="certificate_statement_Api1";
  }

  /*
  //Ticket creation testing code
  let subject;
  let subArea;
  let resolution = "Statement/Certificate sent through E-mail."
  if(serviceCode=="0")
  {
    subject="Automated Account Statement";
    subArea="Account Statement";
  }
  else if(serviceCode=="1")
  {
    subject="Automated Deposit Interest Certificate";
    subArea="Deposit Interest certificate";
  }
  else if(serviceCode=="2")
  {
    subject="Automated Loan Interest Certificate";
    subArea="Loan Interest certificate";
  }
  create_ticket_in_desk(subject,null,"Service Request","Automated Request",subArea,accountNumber,null,null,null,null,null,null,resolution,reverseDateStr(fromDateStr),reverseDateStr(toDateStr));
  btnLoader.remove();
  btnRef.classList.remove("ldr");
  return;
  */
  console.log("Function inputs are",p);
  call_crm_function(fn_name,p,logMsgId,true).then((data)=>{
    console.log("Certificate Statement API",data);
    if(data.code=="success")
    {
      let fnOutput=data.details.output;
      if(fnOutput)
      {
        let outputJson=JSON.parse(fnOutput);
        let outputData=outputJson.data;
        let outputStatus=outputData.Status || outputData.successorfailure;
        if(outputStatus=="S")
        {
          //API success - show success msg
          let statusDesc=outputData.StatusDesc || outputData.StatusDes || outputData.Message;
          outputContainer.innerHTML=`Success: ${statusDesc}`;
          outputContainer.classList.add("slide-down-appear-cls");
          outputContainer.classList.add("sr-subsection-success");
          //change to create ticket automatically for account statement / certificate generation
          let subject;
          let subArea;
          let resolution = "Statement/Certificate sent through E-mail."
          if(serviceCode=="0")
          {
            subject="Automated Account Statement";
            subArea="Account Statement";
          }
          else if(serviceCode=="1")
          {
            subject="Automated Deposit Interest Certificate";
            subArea="Deposit Interest certificate";
          }
          else if(serviceCode=="2")
          {
            subject="Automated Loan Interest Certificate";
            subArea="Loan Interest certificate";
          }
          create_ticket_in_desk(subject,null,"Service Request","Automated Request",subArea,accountNumber,null,null,null,null,null,null,resolution,reverseDateStr(fromDateStr),reverseDateStr(toDateStr));
        }
        else
        {
          //API failed - show status description
          let statusDesc=outputData.StatusDesc || outputData.Message;
          if(statusDesc)
          {
            outputContainer.innerHTML=`Error in certificate / statement generation: ${statusDesc}`;
          }
          else
          {
            outputContainer.innerHTML=`Error in certificate / statement generation`;
          }
          
          outputContainer.classList.add("error-msg-sr");
          outputContainer.classList.add("shake");
          console.error("Certificate Statement API error",data);
        }
      }
      else
      {
        //Certificate generation failed error
        outputContainer.innerHTML=`Error in certificate / statement generation`;
        outputContainer.classList.add("error-msg-sr");
        outputContainer.classList.add("shake");
        console.error("Certificate Statement API error",data);
      }
    }
    else
    {
      //Certificate generation failed error
      outputContainer.innerHTML=`Error in certificate / statement generation`;
      outputContainer.classList.add("error-msg-sr");
      outputContainer.classList.add("shake");
      console.error("Certificate Statement API error",data);
    }
  }).catch((err)=>{
    outputContainer.innerHTML=`Error in certificate / statement generation`;
    outputContainer.classList.add("error-msg-sr");
    outputContainer.classList.add("shake");
    console.error("Certificate Statement API error",err);
  }).finally(()=>{
    let btnLoader=btnRef.querySelector("#circular_loader");
    btnLoader.remove();
    btnRef.classList.remove("ldr");
  });

}
function statementCertDropdownAction(selectedVal)
{
  let statementOpSection=document.getElementById("statement_interest_op");
  let srSectionParent=statementOpSection.parentElement;
  let logMsgId=findIthChildOfParent(srSectionParent);
  let menuContentIdMapping={
    "Account Statement":"accountStatementContainer",
    "Interest Certificate - Deposit":"interestDepositCertContainer",
    "Interest Certificate - Loans":"interestLoanCertContainer"
  };
  let contentId=menuContentIdMapping[selectedVal];
  let selectedSection=document.getElementById(contentId).cloneNode(true);
  let actionBtn=selectedSection.querySelector("#actionBtn");
  let selectedAccts=[];
  let accountDropDown;
  let fromDateElem=selectedSection.querySelector("#acctStatementFromDate");
  let toDateElem=selectedSection.querySelector("#acctStatementToDate");
  let outputContainer=selectedSection.querySelector("#opContainer");
  let fyContainer=selectedSection.querySelector("#fyContainer");
  statementOpSection.innerHTML="";
  statementOpSection.appendChild(selectedSection);
  //setting today's date in toDate Elem:
  let today=new Date();
  let dd=String(today.getDate()).padStart(2,'0');
  let mm=String(today.getMonth()+1).padStart(2,'0');
  let yyyy=today.getFullYear();
  let todayInStr=yyyy+"-"+mm+"-"+dd;
  toDateElem.value=todayInStr;
  //Filtering account population
  if(selectedVal=="Account Statement")
  {
    let acctNumberContainer=selectedSection.querySelector("#acctNumberContainer");
    let toggleSwitchElement=createDynamicToggleSwitchElem();
    let closedAccts=[];
    selectedAccts=new_deposits;
    selectedAccts=selectedAccts.concat(new_advances);
    selectedAccts=selectedAccts.map((val,ind)=>{
      if((val.ACCT_CLS_FLG!="N"&&val.ACCT_CLS_FLG)||(val.Account_Close_Flag!="N"&&val.Account_Close_Flag))
      {
        closedAccts.push(val.Name);
      }
      return val.Name;});
    // accountDropDown=createDynamicDropDown(selectedAccts);
    accountDropDown=createDynamicDropDownWithSearch(selectedAccts,null,null,(searchText,initialArr)=>{
      let toggleVal=toggleSwitchElement.getAttribute("value");
      let ArrToPopulate=[];
      if(toggleVal=="true")
      {
        for(let i=0;i<initialArr.length;i++)
        {
          if(initialArr[i].includes(searchText))
          {
            ArrToPopulate.push(initialArr[i]);
          }
        }
        accountDropDown.populatedropDown(ArrToPopulate);
      }
      else
      {
        for(let i=0;i<initialArr.length;i++)
        {
          if((!closedAccts.includes(initialArr[i]))&&(initialArr[i].includes(searchText)))
          {
            ArrToPopulate.push(initialArr[i]);
          }
        }
        accountDropDown.populatedropDown(ArrToPopulate);
      }
    },"Search Account",(dropOption,value)=>{
      if(closedAccts.includes(value))
      {
        dropOption.classList.add("closed-account");
      }
    });
    toggleSwitchElement.toggleEvent=()=>{
      let searchText=accountDropDown.searchText;
      let initialArr=accountDropDown.initialArr;
      let toggleVal=toggleSwitchElement.getAttribute("value");
      let ArrToPopulate=[];
      if(toggleVal == "true")
      {
        for(let i=0;i<initialArr.length;i++)
        {
          if(initialArr[i].includes(searchText))
          {
            ArrToPopulate.push(initialArr[i]);
          }
        }
        accountDropDown.populatedropDown(ArrToPopulate);
      }
      else
      {
        for(let i=0;i<initialArr.length;i++)
        {
          if((!closedAccts.includes(initialArr[i]))&&(initialArr[i].includes(searchText)))
          {
            ArrToPopulate.push(initialArr[i]);
          }
        }
        accountDropDown.populatedropDown(ArrToPopulate);
      }
    };
    toggleSwitchElement.classList.add("slider-yellow")
    toggleSwitchElement.turnOn();
    acctNumberContainer.innerHTML='';
    acctNumberContainer.appendChild(accountDropDown);

    let dropDownUtilsContainer=accountDropDown.querySelector("#fc_utils_container");
    dropDownUtilsContainer.classList.add("flex-parent-center-1axis");
    dropDownUtilsContainer.appendChild(toggleSwitchElement);
    toggleSwitchElement.classList.remove("hide");
    //Hiding fy drop down for account statement feature - UAT feedback
    fyContainer.remove();
    selectedSection.querySelector("#fyLabel")?.remove();
    selectedSection.querySelector("#acctNumLabel").style.marginRight="0";
  }
  else if(selectedVal=="Interest Certificate - Loans")
  {
    
    let acctNumberContainer=selectedSection.querySelector("#acctNumberContainer");
    selectedAccts=new_advances.filter((value,ind)=>{
      let acctCloseFlag=value.Account_Close_Flag;
      if(acctCloseFlag!="Y")
      return true;
      else
      return false;
    });
    selectedAccts=selectedAccts.map((val,ind)=>{return val.Name;});
    accountDropDown=createDynamicDropDown(selectedAccts);
    acctNumberContainer.innerHTML='';
    acctNumberContainer.appendChild(accountDropDown);
  }
  //
  //Adding financial year drop-down
  let fyOptions=[];
  let currentYear=yyyy;
  let todayObj=new Date(todayInStr);
  let fyEndObj=new Date(`${currentYear}-03-31`);
  if(todayObj<fyEndObj)
  {
    currentYear-=1;
  }
  for(let i=0;i<3;i++)
  {
    let prevYear=currentYear-1;
    fyOptions.push(`${prevYear} - ${currentYear}`);
    currentYear--;    
  }
  let fyDropDown=createDynamicDropDown(fyOptions,(selectedVal)=>{
    let selectedStrComponents=selectedVal.split(" - ");
    let fromYear=selectedStrComponents[0];
    let toYear=selectedStrComponents[1];
    let toDate;
    let fromDate;
    toDate=`${toYear}-03-31`;
    fromDate=`${fromYear}-04-01`;
    fromDateElem.value=fromDate;
    toDateElem.value=toDate;
  });
  fyContainer.innerHTML='';
  fyContainer.appendChild(fyDropDown);
  //
  if(actionBtn)
  {
    actionBtn.addEventListener("click",()=>{generateStatementCert(actionBtn,accountDropDown,fromDateElem,toDateElem,selectedVal,outputContainer,logMsgId)});
  }
}
function statementOnLoad()
{
  console.log("Inside statement on-load");
  let statementCertificateOptions=["Account Statement","Interest Certificate - Deposit","Interest Certificate - Loans"];
  let statementDropDownContainer=document.getElementById("statementDropdownContainer");
  let statementOptions;
  let statementDropDownInnerHTML=statementDropDownContainer.innerHTML.trim();
  if(statementDropDownInnerHTML=='')
  {
    statementOptions=createDynamicDropDown(statementCertificateOptions,(selectedVal)=>{
      statementCertDropdownAction(selectedVal);
    });
    statementDropDownContainer.appendChild(statementOptions);
    statementOptions.classList.add("move-right");
  }
  
}
// End of statement / certificates feature changes

//

// toggle switch template function
function setToggleValueParent(inputElem){
  let switchParent=inputElem.parentNode.parentNode;
  switchParent.setAttribute("value",inputElem.checked);
}
function createDynamicToggleSwitchElem(toggleEvent)
{
  let switchTemplate=document.getElementById("toggleSwitchTemplate");
  let switchClone=switchTemplate.cloneNode(true);
  switchClone.id+="_"+generalCloneCount;
  switchClone.toggleEvent=toggleEvent;
  switchClone.turnOn=()=>{
    let checkBox=switchClone.querySelector("#toggleCheckBox");
    if(checkBox)
    checkBox.checked=true;
  };
  switchClone.turnOff=()=>{
    let checkBox=switchClone.querySelector("#toggleCheckBox");
    if(checkBox)
    checkBox.checked=false;
  };
  let checkBox=switchClone.querySelector("#toggleCheckBox");
  if(checkBox)
  {
    checkBox.addEventListener("change",()=>{
      if(switchClone.toggleEvent)
      {
        switchClone.toggleEvent();
      }
    });
  }
  generalCloneCount++;
  return switchClone;
}
//
//change for including send log feature for certificates generation
function findIthChildOfParent(childElem)
{
  if(childElem)
  {
    let siblings=childElem.parentElement.children;
    let siblingsCount=siblings.length;
    for(let i=0;i<siblingsCount;i++)
    {
      let currElem=siblings[i];
      if(currElem===childElem)
      {
        return i;
      }
    }
  }
  return null;
}

//change for lien remarks
function enableLienRemarks(selectedAcct)
{
  let lienRemarksBtn=document.getElementById("add_lien_remarks");
  let parsedAcct=selectedAcct.replaceAll("\n","").replaceAll(" ","");
  let dynamicFieldsConditions=[
    {
      "inputCombinations":[
        {
        "label":"Lien Remarks",
        "rowId":"remarksDDRow",
        "condition":"is",
        "values":["CyberCrime Cell / LEA"]
      }
      ],
      "fieldsToBeCreated":[
        {
          "label":"Acknowledgement Number",
          "id":"lienAckNo",
          "type":"number",
          "placeHolder":"Crime Acknowledgement Number",
          "title":"Prefix ‘Cyber Ack’ will be added. Only acknowledgement number to be entered"
        }
      ],
      "mandatoryFields":[
        {
          "label":"Acknowledgement Number",
          "id":"lienAckNo",
        }
      ]
    }
  ];
  lienRemarksBtn.setAttribute("lienAcct",parsedAcct);
  if(lienRemarksBtn)
  {
    let isRemarksEnabled=lienRemarksBtn.getAttribute("remarksEnableď");
    if(isRemarksEnabled!="true")
    {
      let allowedAttribute=lienRemarksBtn.getAttribute("actionAllowed");
      if(allowedAttribute=="true")
      {
        enableBtn(lienRemarksBtn);
        lienRemarksBtn.addEventListener("click",(evt)=>{
          let popUp=createDynamicPopUp();
          lienRemarksBtn.setAttribute("linkedPopId",popUp.id);
          let popUpBody=popUp.querySelector("#popUpBody");
          let lienRemarksContent=document.getElementById("lienRemarksContent").cloneNode(true);
          lienRemarksContent.id+=dynamicDropCount++;
          popUp.children[0].classList.add("min-width400px");
          popUpBody.innerHTML='';
          popUpBody.appendChild(lienRemarksContent);
          //setting default values
          let dateElem=lienRemarksContent.querySelector("#fromEffDate");
          let remarksDropContainer=lienRemarksContent.querySelector("#remarksDropContainer");
          let codeDropContainer=lienRemarksContent.querySelector("#codeDropContainer");
          let lienRemarksOptions=["CyberCrime Cell / LEA"];
          let remarksCodeMapping={
            "CyberCrime Cell / LEA":["CCP"]
          };
          let codeDropDown=createDynamicDropDown([]);
          let lienRemarksDropDown=createDynamicDropDown(lienRemarksOptions,(selectedVal)=>{
            codeDropDown.populateDropDown(remarksCodeMapping[selectedVal]);
            // codeDropDown.selectItemByIndex(0);
            manageDynamicFields(lienRemarksContent,dynamicFieldsConditions);
          });
          let amountInput=lienRemarksContent.querySelector("#amountIp");
          let lienAcctElem=lienRemarksContent.querySelector("#markLienAcct");
          lienAcctElem.value=lienRemarksBtn.getAttribute("lienAcct");
          lienAcctElem.readOnly=true;
          codeDropDown.classList.add("dropDown100w");
          lienRemarksDropDown.classList.add("dropDown100w");
          lienRemarksDropDown.setAttribute("selector-id","inputValue");
          setDateInInput(new Date(),dateElem);
          dateElem.readOnly=true;
          remarksDropContainer.appendChild(lienRemarksDropDown);
          codeDropContainer.appendChild(codeDropDown);
          lienRemarksDropDown.selectItemByIndex(0);
          codeDropDown.selectItemByIndex(0);
          // Attaching action events
          let clearBtn=lienRemarksContent.querySelector("#remarksClrBtn");
          let submitBtn=lienRemarksContent.querySelector("#remarksSubmitBtn");
          clearBtn.addEventListener("click",(evt)=>{
            popUp.remove();
          });
          let submitSuccess;
          submitBtn.addEventListener("click",()=>{
            let inputElems=[lienAcctElem,amountInput,lienRemarksDropDown,codeDropDown,dateElem];
            let dynamicMandatoryFields=lienRemarksContent.querySelectorAll(".mandatory-input");
            inputElems=inputElems.concat(...dynamicMandatoryFields);
            let validation=validateNonEmptyInputs(inputElems);
            let apiOut=lienRemarksContent.querySelector("#apiOutContainer");
            let ackNoElem=lienRemarksContent.querySelector("#lienAckNo");
            if(validation)
            {
              let selectedAcct=lienAcctElem.value;
              let lienAmt=amountInput.value;
              let lienRemarks=lienRemarksDropDown.getAttribute("value");
              let lienCode=codeDropDown.getAttribute("value");
              if(ackNoElem)
              {
                lienRemarks="Cyber Ack"+(ackNoElem.value || ackNoElem.getAttribute("value"));
              }
              apiOut.innerHTML="";
              //call API
              let ip={
                Acct:selectedAcct,
                Amount:lienAmt,
                Profile:logged_in_user_profile,
                LienRemarks:lienRemarks,
                LienCode:lienCode

              };
              if(isUatInstance)
              {
                lienMarkAPI="lien_remarks_API_S360";
              }
              else
              {
                lienMarkAPI="lien_remarks_API_S3601";
              }
              disableBtn(submitBtn);
              let apiData;
              //
              let acctDetails=fetchAccountDetails(selectedAcct);
              let solId;
              if(acctDetails && acctDetails.hasOwnProperty("A_c_Type"))
              {
                //savings Account
                solId=acctDetails.Branch;
              }
              else if(acctDetails && acctDetails.hasOwnProperty("A_c_Type_Current_Saving"))
              {
                //loan account
                solId=acctDetails.Branch_Name;
              }
              //
              call_crm_function(lienMarkAPI, ip,null,true).then((data)=>{
                console.log("API response is",data);
                let apiResp=data.details.output;
                let repsObj=JSON.parse(apiResp);
                apiData=data;
                let errorFlg=repsObj["errorMsg"];
                if(errorFlg)
                {
                  show_msg_box("Lien Remarks Failed. Please try again or contact administrator.","red",5);
                  apiOut.innerHTML="Error from Lien System: "+errorFlg;
                  write_to_error_log_module("Lien Marking API",data);
                  return;
                }
                let lienAddObj=repsObj.data.LienAdd;
                let successFlag=lienAddObj?lienAddObj.successorfailure:"F" ;
                let message=lienAddObj?repsObj.data.LienAdd.Message:repsObj.data.messageField;
                if(successFlag=="S" || successFlag == "s")
                {
                  show_msg_box("Lien Remarks Added Successfully","green",5);
                  apiOut.innerHTML="Output from Lien System: "+message;
                  //
                  let apiLog;
                  try{
                    apiLog=JSON.stringify(data).slice(0,4990);
                  }
                  catch(err)
                  {
                    console.error("Exception in Stringifying API log",err,data);
                    apiLog=String(data).slice(0,4990) || "";
                  }
                  //
                  create_ticket_in_desk(
                    "Lien Marking through S360 - CyberCrime Cell/LEA",
                    "Lien Marking through S360 - CyberCrime Cell/LEA",
                    "Service Request", 
                    "CASA", 
                    "Lien marking", 
                    selectedAcct, 
                    null,
                    mail_for_desk, 
                    phone_for_desk, 
                    null,null,null,
                    `Lien Marking of Amount ${lienAmt} on ${dateElem.value} has been done as per order by CyberCrime Cell/LEA with acknowledgement number ${ackNoElem.value || ackNoElem.getAttribute("value")}`,
                    dateElem.value, 
                    null, null, null, null, null, null, null, null, null,null, 
                    lienAmt, 
                    lienRemarks, 
                    lienCode, 
                    ackNoElem.value || ackNoElem.getAttribute("value"),
                    apiLog
                  );
                  submitSuccess=true;
                }
                else
                {
                  show_msg_box("Lien Remarks Failed. Please try again or contact administrator.","red",5);
                  console.error("Error in Lien Remarks API",data);
                  if(message)
                  {
                    apiOut.innerHTML="Error from Lien System: "+message;
                  }
                  else
                  {
                    apiOut.innerHTML="Error occurred from Lien System.";
                  }
                  //
                  let apiLog;
                  try{
                    apiLog=JSON.stringify(data).slice(0,4990);
                  }
                  catch(err)
                  {
                    console.error("Exception in Stringifying API log",err,data);
                    apiLog=String(data).slice(0,4990) || "";
                  }
                  //
                  create_ticket_in_desk(
                    "Lien Marking through S360 - CyberCrime Cell/LEA",
                    "Lien Marking through S360 - CyberCrime Cell/LEA",
                    "Service Request", 
                    "CASA", 
                    "Lien marking", 
                    selectedAcct,null,
                    mail_for_desk, 
                    phone_for_desk, 
                    null,null,null,
                    `Lien Marking of Amount ${lienAmt} on ${dateElem.value} has been done as per order by CyberCrime Cell/LEA with acknowledgement number ${ackNoElem.value || ackNoElem.getAttribute("value")}`,
                    dateElem.value, 
                    null, null, null, "Open", null, null, null, null, null,null, 
                    lienAmt, 
                    lienRemarks, 
                    lienCode, 
                    ackNoElem.value || ackNoElem.getAttribute("value"),
                    apiLog,
                    null,
                    solId
                  );
                  //
                  write_to_error_log_module("Lien Marking API",data);
                }
              }).catch((err)=>{
                console.error("Error in Lien Remarks API",err,apiData);
                apiOut.innerHTML="Error occurred from Lien System.";
                //
                let apiLog;
                  try{
                    apiLog=JSON.stringify(err).slice(0,4990);
                  }
                  catch(er)
                  {
                    console.error("Exception in Stringifying API log",er,data);
                    apiLog=String(err).slice(0,4990) || "";
                  }
                  //
                  create_ticket_in_desk(
                    "Lien Marking through S360 - CyberCrime Cell/LEA",
                    "Lien Marking through S360 - CyberCrime Cell/LEA",
                    "Service Request", 
                    "CASA", 
                    "Lien marking", 
                    selectedAcct,null,
                    mail_for_desk, 
                    phone_for_desk, 
                    null,null,null,
                    `Lien Marking of Amount ${lienAmt} on ${dateElem.value} has been done as per order by CyberCrime Cell/LEA with acknowledgement number ${ackNoElem.value || ackNoElem.getAttribute("value")}`,
                    dateElem.value, 
                    null, null, null, "Open", null, null, null, null, null,null, 
                    lienAmt, 
                    lienRemarks, 
                    lienCode, 
                    ackNoElem.value || ackNoElem.getAttribute("value"),
                    apiLog,
                    null,
                    solId
                  );
                //
                write_to_error_log_module("Lien Marking API",err);
              }).finally(()=>{
                enableBtn(submitBtn,"Mark Lien");
                if(submitSuccess)
                {
                  turnOffBtn(submitBtn);
                }
              });

            }
            else
            {
              apiOut.innerHTML="Please fill in mandatory inputs";
            }
          });
          //
          evt.stopPropagation();
        });
        lienRemarksBtn.setAttribute("remarksEnableď","true");
      }
    }
   
  }
}
//change for dynamic inputs for lien remarks feature
function manageDynamicFields(formElem,dynamicFieldsConditions)
{
  
  if(formElem)
  {
    let inputFormTable=formElem.querySelector("#formInputTable");
    let cloneParent=formElem.querySelector("#cloneTemplates");
    let lastRow=formElem.querySelector("#lastRow");
    let dynamicRowTemplate=formElem.querySelector("#dynamicInputRow");
    if(dynamicRowTemplate&&inputFormTable)
    {
      //clear previously created dynamic rows before adding new
      let existingDynamicRows=inputFormTable.querySelectorAll(".dynamic-input-rows");
      for(let row of existingDynamicRows)
      {
        row.remove();
      }
      //
      //checking input conditions
      for(let condition of dynamicFieldsConditions)
      {
        let inputCombinations=condition.inputCombinations;
        let inputValidationPassed=true;
        for(let combo of inputCombinations)
        {
          let label=combo.label;
          let rowID=combo.rowId;
          let condition=combo.condition;
          let values=combo.values;
          let inputRowElem=inputFormTable.querySelector(`#${rowID}`);
          if(inputRowElem)
          {
            let inputLabelElem=inputRowElem.querySelector("[selector-id='inputLabel']");
            let inputFieldElem=inputRowElem.querySelector("[selector-id='inputValue']");
            if(inputFieldElem)
            {
              let inputValue=inputFieldElem.value || inputFieldElem.getAttribute("value");
              if(!values.includes(inputValue))
              {
                inputValidationPassed=false; 
              }
            }
          }
        }
        if(inputValidationPassed)
        {
          let fieldsToBeCreated=condition.fieldsToBeCreated;
          let mandatoryFields=condition.mandatoryFields;
                for(let field of fieldsToBeCreated)
                {
                  let dynamicRow=dynamicRowTemplate.cloneNode(true);
                  dynamicRow.id+=generalCloneCount++;
                  let fieldId=field.id;
                  let fieldLabel=field.label;
                  let fieldType=field.type;
                  let fieldPlaceHolder=field.placeHolder;
                  let isMandatory=false;
                  let fieldTitle=field.title;
                  for(let field of mandatoryFields)
                  {
                    if(fieldId==field.id)
                    {
                      isMandatory=true;
                    }
                  }
                  //allowed types: text || date || dropDown || number
                  
                  if(fieldType=="text")
                  {
                    let inputTextField=formElem.querySelector("#inputText");
                    if(inputTextField)
                    {
                      let inputFieldClone=inputTextField.cloneNode(true);
                      if(fieldPlaceHolder)
                      {
                        inputFieldClone.placeHolder=fieldPlaceHolder;
                      }
                      if(fieldTitle)
                      {
                        inputFieldClone.title=fieldTitle;
                      }
                      if(fieldLabel)
                      {
                        dynamicRow.children[0].innerHTML=fieldLabel;
                      }
                      if(isMandatory)
                      {
                        inputFieldClone.classList.add("mandatory-input");
                      }
                      if(fieldId)
                      {
                        inputFieldClone.id=fieldId;
                      }
                      dynamicRow.children[1].appendChild(inputFieldClone);
                    }
                  }
                  else if(fieldType=="date")
                  {
                    let inputDateField=formElem.querySelector("#inputDate");
                    if(inputDateField)
                    {
                      let inputFieldClone=inputDateField.cloneNode(true);
                      if(fieldLabel)
                      {
                        dynamicRow.children[0].innerHTML=fieldLabel;
                      }
                      if(fieldTitle)
                      {
                        inputFieldClone.title=fieldTitle;
                      }
                      if(isMandatory)
                      {
                        inputFieldClone.classList.add("mandatory-input");
                      }
                      if(fieldId)
                      {
                        inputFieldClone.id=fieldId;
                      }
                      dynamicRow.children[1].appendChild(inputFieldClone);
                    }
                  }
                  else if(fieldType=="dropDown")
                  {

                  }
                  else if(fieldType=="number")
                  {
                    let inputNumberField=formElem.querySelector("#inputNumber");
                    if(inputNumberField)
                    {
                      let inputFieldClone=inputNumberField.cloneNode(true);
                      if(fieldLabel)
                      {
                        dynamicRow.children[0].innerHTML=fieldLabel;
                      }
                      if(fieldTitle)
                      {
                        inputFieldClone.title=fieldTitle;
                      }
                      if(isMandatory)
                      {
                        inputFieldClone.classList.add("mandatory-input");
                      }
                      if(fieldId)
                      {
                        inputFieldClone.id=fieldId;
                      }
                      dynamicRow.children[1].appendChild(inputFieldClone);
                    }
                  }
                  inputFormTable.appendChild(dynamicRow);
                  dynamicRow.classList.remove("hide");
                }
        }
      }
      //append the last row into the form table
      inputFormTable.appendChild(lastRow);
    }
  }
  
}
//change for MB deregistration
function enablederegister(selectedMobile) {
  console.log("Selected Mobile Number:", selectedMobile);

  //change for UPI blocking 
  const svcFns={
    "0":async (evt)=>{
      // svcOption 0 - MB deregisteration
      evt.stopPropagation();
        const loader = document.getElementById("mobilederegister_loader_table");
        const apiOut = document.querySelector("#apiOutContainer");
        const errorDiv = document.getElementById("mobilederegister_error_div");
        if (!loader || !apiOut || !errorDiv) {
          console.error("MB HTML templates not found");
          return;
        }
        apiOut.innerHTML = "";
        apiOut.classList.add("hide");
        errorDiv.classList.add("hide");
        loader.classList.remove("hide_tab_imp");
        const mobileElem = mobileDeregisterBtn.getAttribute("mobileDeregister_Mobile");
        console.log("mobileElem", mobileElem);
        console.log("mobileElem selectedMobile", selectedMobile);
        let apiName;
        if(isUatInstance)
        {
          MB_Deregister_API="mb_deregister_s360_uat";
          apiName="MB deregister UAT";
        }
        else
        {
          MB_Deregister_API="mb_deregister_s360_uat1_1";
          apiName="MB deregister";
        }
        const ip = { mobileNo: mobileElem, customerId: ds_cust_id || "" };
        let userMakerId=remarks_prefix=(logged_in_user_mail||"@").split("@")[0];
        ip["makerId"]=userMakerId;
        console.log("Input param", ip);
        try {
          const data = await call_crm_function(MB_Deregister_API, ip, null, true);
          console.log("API MB_Deregister_API response:", data);
          const repsObj = JSON.parse(data.details.output);
          const errorMsg = repsObj.errorMsg;
          // Hide loader
          loader.classList.add("hide_tab_imp");
          if (errorMsg) {
            /*
            show_msg_box(
              "Mobile Deregister Failed",
              "red",
              5
            );
            */
            errorDiv.classList.remove("hide_tab_imp");
            apiOut.innerHTML = `Error from MB System: ${errorMsg}`;
            append_send_log("send_log_container_"+String((send_log_msg_ids["MB deregister API"]-1)),apiName);
            //
            let apiLog;
            try{
              apiLog=JSON.stringify(data).slice(0,4990);
            }
            catch(err)
            {
              console.error("Exception in Stringifying API log",err,data);
              apiLog=String(data).slice(0,4990) || "";
            }
            //
            create_ticket_in_desk("Mobile Banking Deregistration through S360","Request for MB deregistration","Service Request","Mobile Banking","Mobile Banking Deregistration",null,null,null,null,null,null,null,"Deregistration completed using automated service request",null,null,"Service Request","Mobile Banking Deregistration","Open",null,null,null,null,null,null,null,null,null,null,apiLog,mobileBankingTeamId);
            //
            write_to_error_log_module("MB Deregisteration API",data);
            return;
          }
          const AddObj = repsObj.data || {};
          const successFlag = AddObj.successorfailure || AddObj.response || "F";
          const message = repsObj.data.msg || AddObj.Message || repsObj.data.messageField;
          if (successFlag === "S" || successFlag === "SUCCESS") {
            /*show_msg_box("Mobile Deregister Successful", "green", 5);*/
            apiOut.classList.remove("hide");
            apiOut.innerHTML = `Deregistration Successful. Response from MB System: ${message}`;
            // create_ticket_in_desk("Automated MB deregistration - S360","Request for MB deregistration","Service Request","Mobile Banking","Mobile Banking Deregistration",null,null,null,null,null,null,null,"Deregistration completed using automated service request",null,null,"Service Request","Mobile Banking Deregistration");
            //Mobile Banking Deregistration through S360 - change requested by Prakash
            //
            let apiLog;
            try{
              apiLog=JSON.stringify(data).slice(0,4990);
            }
            catch(err)
            {
              console.error("Exception in Stringifying API log",err,data);
              apiLog=String(data).slice(0,4990) || "";
            }
            //
            create_ticket_in_desk("Mobile Banking Deregistration through S360","Request for MB deregistration","Service Request","Mobile Banking","Mobile Banking Deregistration",null,null,null,null,null,null,null,"Deregistration completed using automated service request",null,null,"Service Request","Mobile Banking Deregistration",null,null,null,null,null,null,null,null,null,null,null,apiLog,null);
          } else if (successFlag === "FAILED" || successFlag === "F") {
            /*show_msg_box("Mobile Deregister Failed", "red", 5);*/
            apiOut.classList.remove("hide");
            apiOut.innerHTML = `Deregistration Failed. Response from MB System: ${AddObj}`;
            let apiLog;
            try{
              apiLog=JSON.stringify(data).slice(0,4990);
            }
            catch(err)
            {
              console.error("Exception in Stringifying API log",err,data);
              apiLog=String(data).slice(0,4990) || "";
            }
            //
            create_ticket_in_desk("Mobile Banking Deregistration through S360","Request for MB deregistration","Service Request","Mobile Banking","Mobile Banking Deregistration",null,null,null,null,null,null,null,"Deregistration completed using automated service request",null,null,"Service Request","Mobile Banking Deregistration","Open",null,null,null,null,null,null,null,null,null,null,apiLog,mobileBankingTeamId);
            write_to_error_log_module("MB Deregisteration API",data);
          } else {
            /*
            show_msg_box(
              "Mobile Deregister Failed",
              "red",
              5
            );*/
            errorDiv.classList.remove("hide_tab_imp");
            apiOut.classList.remove("hide");
            apiOut.innerHTML = `Deregistration Failed. Error from MB system: ${message || "Couldn't fetch error message."}`;
            let apiLog;
            try{
              apiLog=JSON.stringify(data).slice(0,4990);
            }
            catch(err)
            {
              console.error("Exception in Stringifying API log",err,data);
              apiLog=String(data).slice(0,4990) || "";
            }
            //
            create_ticket_in_desk("Mobile Banking Deregistration through S360","Request for MB deregistration","Service Request","Mobile Banking","Mobile Banking Deregistration",null,null,null,null,null,null,null,"Deregistration completed using automated service request",null,null,"Service Request","Mobile Banking Deregistration","Open",null,null,null,null,null,null,null,null,null,null,apiLog,mobileBankingTeamId);
            write_to_error_log_module("MB Deregisteration API",data);
          }
          /*
          setTimeout(() => {
            apiOut.classList.add("hide");
          }, 5000);
          */
        } catch (err) {
          console.error("Error in MB deregister API:", err);
          // Hide loader
          loader.classList.add("hide_tab_imp");
          errorDiv.classList.remove("hide_tab_imp");
          apiOut.classList.remove("hide");
          apiOut.innerHTML = `Deregistration Failed. Error from MB system: ${err.message || err || "Couldn't fetch error message."}`;
          /*
          setTimeout(() => {
            apiOut.classList.add("hide");
          }, 3000);
          */
          let apiLog;
          try{
            apiLog=JSON.stringify(err).slice(0,4990);
          }
          catch(er)
          {
            console.error("Exception in Stringifying API log",er,err);
            apiLog=String(err).slice(0,4990) || "";
          }
          //
          create_ticket_in_desk("Mobile Banking Deregistration through S360","Request for MB deregistration","Service Request","Mobile Banking","Mobile Banking Deregistration",null,null,null,null,null,null,null,"Deregistration completed using automated service request",null,null,"Service Request","Mobile Banking Deregistration","Open",null,null,null,null,null,null,null,null,null,null,apiLog,mobileBankingTeamId);
          write_to_error_log_module("MB Deregisteration API",err);
        }
        finally{
          append_send_log("send_log_container_"+String((send_log_msg_ids["MB deregister API"]-1)),apiName);
          //create_ticket_in_desk("Automated MB deregistration - S360","Request for MB deregistration","Service Request","Mobile Banking","Mobile Banking Deregistration",null,null,null,null,null,null,null,"Deregistration completed using automated service request",null,null,"Service Request","Mobile Banking Deregistration");
        }
    },
    "1":async (evt)=>{
      //svcOption 1 - UPI blocking
      console.log("UPI blocking fired");
       // svcOption 0 - MB deregisteration
       evt.stopPropagation();
       const loader = document.getElementById("mobilederegister_loader_table");
       const apiOut = document.querySelector("#apiOutContainer");
       const errorDiv = document.getElementById("mobilederegister_error_div");
       let remarks_prefix=(logged_in_user_mail||"@").split("@")[0];
       if (!loader || !apiOut || !errorDiv) {
         console.error("MB HTML templates not found");
         return;
       }
       apiOut.innerHTML = "";
       apiOut.classList.add("hide");
       errorDiv.classList.add("hide");
       loader.classList.remove("hide_tab_imp");
       const mobileElem = mobileDeregisterBtn.getAttribute("mobileDeregister_Mobile");
       console.log("mobileElem", mobileElem);
       console.log("mobileElem selectedMobile", selectedMobile);
       let apiName;
       if(isUatInstance)
       {
         MB_Deregister_API="mb_deregister_s360_uat1";
         apiName="UPI Block UAT";
       }
       else
       {
         MB_Deregister_API="mb_deregister_s360_uat1";
         apiName="UPI Block UAT";
       }
       const ip = { mobile: mobileElem, loggedInUserMail: remarks_prefix};
       console.log("Input param", ip);
       try {
         const data = await call_crm_function(MB_Deregister_API, ip, null, true);
         console.log("API UPI block response:", data);
         const repsObj = JSON.parse(data.details.output);
        /*
         const samplePosResp={
          "code": "success",
          "details": {
              "output": "{\"data\":{\"result\":\"SUCCESS\",\"msg\":null,\"code\":\"00\",\"errorDesc\":null,\"data\":\"Mobile Number has been blocked!!\"},\"msgrrn\":\"8c73da69cca7feeb4aa16cb1f33421c6 a06e00b5449b78dca53f5c3bcaaa0776 vaO7EWPmIP9Nu1BAGAT8LB4nmpaHucZQR2P7fqaiZsMzXE3w8fFdE0ift4T8JIWc2mU5HTLOCf1Cervygqdh0JfxJxDvTpqBAVatw50T/G0=\",\"msgtime\":\"2025-01-21 15:06:22.729\",\"msgid\":\"510493541\",\"channelName\":\"CRMV3Channel\",\"status\":\"00\"}",
              "userMessage": [
                  "https://apimuat.unionbankofindia.co.in/BankServices/handlersb/1/CRMV3Channel/CRMtoMADPServiceGroup/BlockUIPidService",
                  "1. Unencrypted request:",
                  "{\"requestType\": \"0\", \"msgid\": \"654645646\", \"data\": { \"mobile\": \"919160916024\", \"action\": \"BLOCK\" }}",
                  "-------*******-------",
                  "2. Encrypted Request:",
                  "{\"reqdata\":\"79FFE98B15D7A5508A7F7C8FBEA57E04 84F6802203012C32A255AB8BB48ADFAC PTJ6VQxRGbX8mlDWiHuR4UYk3O4LgbXNZqFN7quDIRo8gIGMssA+fJu1us6fP3q2bEyqxHqE/58tb7OaPFhAzXKdEtM953HqCHK2tYkY6X359MtdJljTk5sZoLRBotC3UpJk+XtGNIGMsv/TfCrTcQ==\",\"msgid\":510493541}",
                  "-------*******-------",
                  "3. Encrypted Response:",
                  "2f5d3b5ebfe52d3f4d33b5c6b2ba9f56 ec1f0cb1d9ab89714ab0610510409d3c nNYloSb0XvzUPQVA2w5Dw9He0ziZyWTTMG/I2E8daf8EC7K3HHjzg/CPKjgyEBVXJyZGDMTGxGgQ9ONWV8Wjnrg7aoPyyawu9k4jc41BPGArxtMCIS/ktiueShzWgGxRkAUSvsqknQN2UoDEh0VVvSinBqB0hg6q1eJKGqFGuUWPkoF6DsIkQD858bdrXX7OKC2iXB1UQtl1tlCz3Aw6+QjS/e9Bnl1m+zXzr+XZPCEO4aGXhBnn4i3tY2TglPPZJEvcZph14VTFIIr/AAlOLwbtC5nHjL8O+zJIrlbmiMLfu+SVMTZM/xyoy1h7BUYBsNpJjXD685u5sxp4irOomO2jd4hLjQAXmqoNp7YigRo8NsT1jn0o3VuiFWXGYo1Mle6FD/CAtEtoQI8aw0H+svIjF80KVcHKhpnPxqDG03riu1r6iZEIQdZsLswaNGjYhkatrQBMhklJILbuVq4kOenGnPXTzc4GbB2f0IqhkUJF3VU4Z2qY7TNLCfAjS1R1LCCWkpbxh22OF9EDxPWYGg==",
                  "-------*******-------",
                  "4. Decrypted Response:",
                  "{\"data\":{\"result\":\"SUCCESS\",\"msg\":null,\"code\":\"00\",\"errorDesc\":null,\"data\":\"Mobile Number has been blocked!!\"},\"msgrrn\":\"8c73da69cca7feeb4aa16cb1f33421c6 a06e00b5449b78dca53f5c3bcaaa0776 vaO7EWPmIP9Nu1BAGAT8LB4nmpaHucZQR2P7fqaiZsMzXE3w8fFdE0ift4T8JIWc2mU5HTLOCf1Cervygqdh0JfxJxDvTpqBAVatw50T/G0=\",\"msgtime\":\"2025-01-21 15:06:22.729\",\"msgid\":\"510493541\",\"channelName\":\"CRMV3Channel\",\"status\":\"00\"}",
                  "Log Obj",
                  "{\"Request\":\"{\\\"requestType\\\": \\\"0\\\", \\\"msgid\\\": \\\"654645646\\\", \\\"data\\\": { \\\"mobile\\\": \\\"919160916024\\\", \\\"action\\\": \\\"BLOCK\\\" }}\",\"Url\":\"https://apimuat.unionbankofindia.co.in/BankServices/handlersb/1/CRMV3Channel/CRMtoMADPServiceGroup/BlockUIPidService\",\"Response\":\"{\\\"data\\\":{\\\"result\\\":\\\"SUCCESS\\\",\\\"msg\\\":null,\\\"code\\\":\\\"00\\\",\\\"errorDesc\\\":null,\\\"data\\\":\\\"Mobile Number has been blocked!!\\\"},\\\"msgrrn\\\":\\\"8c73da69cca7feeb4aa16cb1f33421c6 a06e00b5449b78dca53f5c3bcaaa0776 vaO7EWPmIP9Nu1BAGAT8LB4nmpaHucZQR2P7fqaiZsMzXE3w8fFdE0ift4T8JIWc2mU5HTLOCf1Cervygqdh0JfxJxDvTpqBAVatw50T/G0=\\\",\\\"msgtime\\\":\\\"2025-01-21 15:06:22.729\\\",\\\"msgid\\\":\\\"510493541\\\",\\\"channelName\\\":\\\"CRMV3Channel\\\",\\\"status\\\":\\\"00\\\"}\",\"Api_Name\":\"UPI Block UAT\"}"
              ],
              "output_type": "string",
              "id": "587000000398117"
          },
          "message": "function executed successfully",
          "$responseHeaders": {
              "x-ratelimit-remaining": null,
              "x-ratelimit-limit": null,
              "x-ratelimit-reset": null
          }
      };
      */
        //  let repsObj = JSON.parse(samplePosResp);
        //  let repsObj=JSON.parse(samplePosResp.details.output);
         const errorMsg = repsObj.errorMsg;
         // Hide loader
         loader.classList.add("hide_tab_imp");
         if (errorMsg) {
           /*
           show_msg_box(
             "Mobile Deregister Failed",
             "red",
             5
           );
           */
           errorDiv.classList.remove("hide_tab_imp");
           apiOut.innerHTML = `Error from MB System: ${errorMsg}`;
           append_send_log("send_log_container_"+String((send_log_msg_ids["MB deregister API"]-1)),apiName);
           return;
         }
         const AddObj = repsObj.data || {};
         const successFlag = AddObj.result || "F";
         const message = AddObj.data || repsObj.data.errorDesc;
         if (successFlag === "S" || successFlag === "SUCCESS") {
           /*show_msg_box("Mobile Deregister Successful", "green", 5);*/
           apiOut.classList.remove("hide");
           apiOut.innerHTML = `UPI Blocking Successful. Response from UPI System: ${message}`;
          //  create_ticket_in_desk("Automated UPI Blocking - S360","Request for UPI blocking","Service Request","UPI","UPI Blocking",null,null,null,null,null,null,null,"Blocking completed using automated service request");
          //subject line change requested by Prakash
          create_ticket_in_desk("UPI Blocking through S360","Request for UPI blocking","Service Request","UPI","UPI Blocking",null,null,null,null,null,null,null,"Blocking completed using automated service request");
         } else if (successFlag === "FAILURE" ||successFlag === "FAILED" || successFlag === "F") {
           /*show_msg_box("Mobile Deregister Failed", "red", 5);*/
           apiOut.classList.remove("hide");
           apiOut.innerHTML = `UPI Blocking Failed. Response from UPI System: ${message}`;
         } else {
           /*
           show_msg_box(
             "Mobile Deregister Failed",
             "red",
             5
           );*/
           errorDiv.classList.remove("hide_tab_imp");
           apiOut.classList.remove("hide");
           apiOut.innerHTML = `UPI Blocking Failed. Response from UPI System: ${message || "Couldn't fetch error message."}`;
         }
         /*
         setTimeout(() => {
           apiOut.classList.add("hide");
         }, 5000);
         */
       } catch (err) {
         console.error("Error in UPI Block API:", err);
         // Hide loader
         loader.classList.add("hide_tab_imp");
         errorDiv.classList.remove("hide_tab_imp");
         apiOut.classList.remove("hide");
         apiOut.innerHTML = `UPI Blocking failed. Error from UPI system: ${err.message || err || "Couldn't fetch error message."}`;
         /*
         setTimeout(() => {
           apiOut.classList.add("hide");
         }, 3000);
         */
       }
       finally{
         append_send_log("send_log_container_"+String((send_log_msg_ids["MB deregister API"]-1)),apiName);
       }
      //
    }
  };
  //
  const mobileDeregisterBtn = document.getElementById("add_mobile_deregister");
  if (!mobileDeregisterBtn) {
    console.error("Deregister button not found!");
    return;
  }
  mobileDeregisterBtn.setAttribute("mobileDeregister_Mobile", selectedMobile);
  const isRemarksEnabled = mobileDeregisterBtn.getAttribute("deregisterEnabled");
  if (isRemarksEnabled !== "true") {
    enableBtn(mobileDeregisterBtn);
    if (!mobileDeregisterBtn.hasAttribute("eventAttached")) {
      mobileDeregisterBtn.addEventListener("click", async (evt) => {
        let svcOption=mobileDeregisterBtn.getAttribute("svcOption");
        if(svcOption)
        {
          let selectedFn=svcFns[svcOption];
          if(selectedFn)
          {
            selectedFn(evt);
          }
        }
      });
      mobileDeregisterBtn.setAttribute("eventAttached", "true");
    }
    mobileDeregisterBtn.setAttribute("deregisterEnabled", "true");
  }
}
//
//change for debit freeze reason fetch feature
function fetch_reason(data, parentZIndex) {
  console.log("NOW Create a pop with table ", data);

  const keys = Object.keys(data);
  const rows = keys
    .filter(key => key.includes("AccountFreezeRemarks") && data[key] !== "DUMMY")
    .map(key => {
      const rnum = key.replace("AccountFreezeRemarks", "");
      return `
        <tr>
          <td class="crm-style-cell add-background">${data["AccountFreezeReasonCode" + rnum]}</td>
          <td class="crm-style-cell add-background">${data[key]}</td>
        </tr>
      `;
    }).join("");

  const headerHTML = `
    <thead>
      <tr style="background-color: #f0f0f0; border-bottom: 2px solid #ddd;">
        <th class="crm-style-header">Reason Code</th>
        <th class="crm-style-header">Reason Remarks</th>
      </tr>
    </thead>
  `;

  const contentHTML = rows
    ? `${headerHTML}<tbody>${rows}</tbody>`
    : `
      <div 
        id="noFreezeReasonsMsg" 
        style="
          display: flex; 
          align-items: center; 
          justify-content: center; 
          height: 100%; 
          font-size: 14px; 
          color: #555; 
          text-align: center;
          background-color: #f9f9f9;
          border: 1px solid #ddd;
          padding: 10px;
        "
      >
        No Freeze Reasons
      </div>
    `;

  console.log("Show reasons :: ", contentHTML);

  let genericPopUp = createGenericPopUp();
  let genericPopUpContentContainer = genericPopUp.querySelector("#modalCloneBody");
  let parentGenericPopupContainer = genericPopUpContentContainer.parentElement;
  
  genericPopUpContentContainer.classList.add("genericPopUpContentPadding");
  parentGenericPopupContainer.classList.add("genericPopUpContainerReason");
  
  genericPopUp.style.zIndex = Number(parentZIndex) + 1;
  
  let reasonTableClone = document.getElementById("reason_table_body");
  let reasonTableDetails = reasonTableClone.cloneNode(true);
  reasonTableDetails.id += "" + cloneCount++;
  reasonTableDetails.innerHTML = contentHTML; 
  genericPopUpContentContainer.innerHTML = "";
  genericPopUpContentContainer.appendChild(reasonTableDetails);
  reasonTableDetails.classList.remove("hide");
}
function sortAccountFreezeDetails(json) {
  // Extract fields starting with "AccountFreeze"
  const freezeDetails = Object.keys(json)
    .filter((key) => key.startsWith("AccountFreeze")) // Filter relevant keys
    .reduce((obj, key) => {
      obj[key] = json[key]; // Add to result object
      return obj;
    }, {});

  // Sort the extracted fields alphabetically
  const sortedFreezeDetails = {};
  Object.keys(freezeDetails)
    .sort()
    .forEach((key) => {
      sortedFreezeDetails[key] = freezeDetails[key];
    });

  // Return the sorted freeze details only
  return sortedFreezeDetails;
}
























//
try {
  console.log("initialising embedded app");
  mobilise_pop_ups("pop-up");
  mobilise_pop_ups("modal-content");
  append_send_log_elems("sr-main-section");
  ZOHO.embeddedApp.init();
  let a=JSON.parse(`{"a":{"cardNumber":12345678901234},"b":"cardNumber","c":{"cardNumber":12345678901234}}`);
  a=mask_logs(a,["cardNumber"]);
  console.log("test log masking",a);
} catch (e) {
  console.log("error in embedded app initialisation",e);
}
